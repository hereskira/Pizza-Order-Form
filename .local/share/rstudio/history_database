1727343783837:print ("Hello")
1727344019506:print("Hello World")
1727345398575:print("Shakira Regalado BSIT 3B")
1727346184319:#Install the following packages first
1727346184320:install.packages("ISLR")
1727346196629:install.packages("ggplot2")
1727346204272:install.packages("caret")
1727346234282:#Access the installed libraries.
1727346234282:library("ISLR")
1727346235793:library("ggplot2")
1727346237439:library("caret")
1727346241653:#An example of a dataframe
1727346241653:mtcars
1727346243781:#Call in the dataset Wage from ISLR.
1727346243782:data(Wage)
1727346245112:#To find the columns inside the dataset
1727346245112:str(Wage)
1727346245971:colnames(Wage)
1727346246837:Wage
1727346247918:#To access one column from the Wage dataset
1727346247918:Wage$age
1727346262978:Wage$jobclass
1727346263784:#Descriptive Statistics
1727346263784:#Getting the mean and the median
1727346263784:mean(Wage$age)
1727346264411:mean(Wage$wage)
1727346264793:median(Wage$age)
1727346264923:median(Wage$wage)
1727346265015:#Getting the sum
1727346265015:sum(Wage$age)
1727346265323:sum(Wage$wage)
1727346265437:#Other operators
1727346265437:#Variance
1727346265437:var(Wage$age)
1727346265549:#Standard Deviation
1727346265549:sqrt(var(Wage$age))
1727346265648:#Descriptive Statistics summary of the Wage Dataset
1727346265648:summary(Wage)
1727346265838:#Indexing features of the dataset. head returns 1st 6 rows
1727346265839:head(Wage)
1727346265960:#Row 3, Column 11
1727346265960:Wage[3,11]
1727346266152:Wage[3,]
1727346266300:#Row 1 to 3 and column 1 to 3
1727346266300:Wage[1:3,1:3]
1727346266528:#Removes the 4th and 9th column and store it in reduced wage variable
1727346266528:reducedwage <- Wage[,-c(4,9)]
1727346266955:head(reducedwage)
1727346267068:nrow(reducedwage)
1727346267165:ncol(reducedwage)
1727346267277:#Only select rows with health Very Good
1727346267277:reducedwage <- reducedwage[which(reducedwage$health=='2. >=Very Good'),]
1727346267396:head(reducedwage)
1727346267496:#Drop column Health or column 7, drop job class column
1727346267496:reducedwage <- reducedwage[,-c(6, 7)]
1727346267613:head(reducedwage)
1727346267727:#Option to not print in exponential notation
1727346267727:options("scipen"=100, "digits"=4)
1727346267830:head(reducedwage)
1727346267944:#plot only one numerical column
1727346267944:plot(reducedwage$wage)
1727346268064:#Plot only one categorical/factor column
1727346268064:plot(reducedwage$maritl)
1727346268273:#plot two columns produces a box plot
1727346268273:plot(reducedwage$education, reducedwage$wage)
1727346268498:#plot everything in one graph
1727346268498:plot(reducedwage)
1727346269149:pairs(reducedwage)
1727346269832:#plot a histogram
1727346269832:hist(reducedwage$age)
1727346269920:hist(reducedwage$wage)
1727346269931:#plotting arguments
1727346269931:plot(reducedwage$age, type = 'o', main='Plot of wages', xlab='ID', ylab='wages')
1727346269969:#To know more about arguments of plot functions
1727346269969:help("plot")
1727346270013:?(plot)
1727346270239:library("ggplot2")
1727346270240:#scatterplot of age vs. wages for each combination of marital status and year
1727346270240:qplot(reducedwage$age, reducedwage$wage, data=reducedwage, color=maritl, xlab="Age, ylab=wages")
1727346270538:qplot(reducedwage$age, reducedwage$wage, data=reducedwage, color=maritl, facets=maritl~year, xlab="Age, ylab=wages")
1727346271040:#Line plot using ggplot
1727346271040:qplot(reducedwage$age,
1727346271040:reducedwage$wage,
1727346271040:data=reducedwage,geom=c("point","smooth"), xlab="Age",
1727346271040:ylab="Wages")
1727346271936:#Boxplot using ggplot
1727346271936:qplot(reducedwage$maritl,
1727346271936:reducedwage$wage,
1727346271936:data=reducedwage,geom=c("boxplot")
1727346271936:,fill=as.factor(maritl),
1727346271936:xlab="Marital Status",
1727346271936:ylab="Wages")
1727346272128:#Simple Regression Analysis
1727346272128:#Initialize plot parameters
1727346272128:par(mfrow=c(2,2))
1727346272128:#Create the linear model
1727346272128:simplelrfit = lm(wage~age, data=reducedwage)
1727346272129:summary(simplelrfit)
1727346272132:plot(simplelrfit)
1727346355865:#Boxplot using ggplot
1727346355865:qplot(reducedwage$maritl,
1727346355865:reducedwage$wage,
1727346355865:data=reducedwage,geom=c("boxplot")
1727346355865:,fill=as.factor(maritl),
1727346355866:xlab="Marital Status",
1727346355866:ylab="Wages")
1727346364839:#Call in the dataset Wage from ISLR.
1727346364839:data(Wage)
1727346540428:#
1727346541015:#
1727346542847:#
1727346547242:#Install the following packages first
1727346547242:install.packages("ISLR")
1727346548597:install.packages("ggplot2")
1727346549622:install.packages("caret")
1727346550503:#Access the installed libraries.
1727346550503:library("ISLR")
1727346550508:library("ggplot2")
1727346550858:library("caret")
1727346551632:#An example of a dataframe
1727346551632:mtcars
1727346551636:#Call in the dataset Wage from ISLR.
1727346551636:data(Wage)
1727346551637:#To find the columns inside the dataset
1727346551637:str(Wage)
1727346551641:colnames(Wage)
1727346551641:Wage
1727346551648:#To access one column from the Wage dataset
1727346551648:Wage$age
1727346551652:Wage$jobclass
1727346551658:#Descriptive Statistics
1727346551659:#Getting the mean and the median
1727346551659:mean(Wage$age)
1727346551659:mean(Wage$wage)
1727346551659:median(Wage$age)
1727346551659:median(Wage$wage)
1727346551659:#Getting the sum
1727346551659:sum(Wage$age)
1727346551659:sum(Wage$wage)
1727346551659:#Other operators
1727346551659:#Variance
1727346551659:var(Wage$age)
1727346551659:#Standard Deviation
1727346551659:sqrt(var(Wage$age))
1727346551660:#Descriptive Statistics summary of the Wage Dataset
1727346551660:summary(Wage)
1727346551663:#Indexing features of the dataset. head returns 1st 6 rows
1727346551663:head(Wage)
1727346551664:#Row 3, Column 11
1727346551664:Wage[3,11]
1727346551664:Wage[3,]
1727346551665:#Row 1 to 3 and column 1 to 3
1727346551665:Wage[1:3,1:3]
1727346551665:#Removes the 4th and 9th column and store it in reduced wage variable
1727346551665:reducedwage <- Wage[,-c(4,9)]
1727346551665:head(reducedwage)
1727346551666:nrow(reducedwage)
1727346551666:ncol(reducedwage)
1727346551666:#Only select rows with health Very Good
1727346551666:reducedwage <- reducedwage[which(reducedwage$health=='2. >=Very Good'),]
1727346551667:head(reducedwage)
1727346551667:#Drop column Health or column 7, drop job class column
1727346551667:reducedwage <- reducedwage[,-c(6, 7)]
1727346551668:head(reducedwage)
1727346551668:#Option to not print in exponential notation
1727346551668:options("scipen"=100, "digits"=4)
1727346551668:head(reducedwage)
1727346551669:#plot only one numerical column
1727346551669:plot(reducedwage$wage)
1727346551697:#Plot only one categorical/factor column
1727346551697:plot(reducedwage$maritl)
1727346551716:#plot two columns produces a box plot
1727346551716:plot(reducedwage$education, reducedwage$wage)
1727346551733:#plot everything in one graph
1727346551733:plot(reducedwage)
1727346552373:pairs(reducedwage)
1727346553034:#plot a histogram
1727346553034:hist(reducedwage$age)
1727346553119:hist(reducedwage$wage)
1727346553131:#plotting arguments
1727346553131:plot(reducedwage$age, type = 'o', main='Plot of wages', xlab='ID', ylab='wages')
1727346553183:#To know more about arguments of plot functions
1727346553183:help("plot")
1727346553214:?(plot)
1727346553439:library("ggplot2")
1727346553439:#scatterplot of age vs. wages for each combination of marital status and year
1727346553439:qplot(reducedwage$age, reducedwage$wage, data=reducedwage, color=maritl, xlab="Age, ylab=wages")
1727346553649:qplot(reducedwage$age, reducedwage$wage, data=reducedwage, color=maritl, facets=maritl~year, xlab="Age, ylab=wages")
1727346554177:#Line plot using ggplot
1727346554177:qplot(reducedwage$age,
1727346554178:reducedwage$wage,
1727346554178:data=reducedwage,geom=c("point","smooth"), xlab="Age",
1727346554178:ylab="Wages")
1727346554422:#Boxplot using ggplot
1727346554422:qplot(reducedwage$maritl,
1727346554422:reducedwage$wage,
1727346554422:data=reducedwage,geom=c("boxplot")
1727346554422:,fill=as.factor(maritl),
1727346554422:xlab="Marital Status",
1727346554422:ylab="Wages")
1727346554549:#Simple Regression Analysis
1727346554549:#Initialize plot parameters
1727346554549:par(mfrow=c(2,2))
1727346554549:#Create the linear model
1727346554549:simplelrfit = lm(wage~age, data=reducedwage)
1727346554550:summary(simplelrfit)
1727346554553:plot(simplelrfit)
1727346595500:#Access the installed libraries.
1727346595500:library("ISLR")
1727346608163:library("ggplot2")
1727346609953:library("caret")
1727346666816:#An example of a dataframe
1727346666816:mtcars
1727346806128:#To find the columns inside the dataset
1727346806128:str(Wage)
1727346928778:Wage$race
1727346932039:Wage$race
1727346948147:#Other operators
1727346948147:#Variance
1727346948147:var(Wage$age)
1727346951337:#Standard Deviation
1727346951337:sqrt(var(Wage$age))
1727347007867:#Indexing features of the dataset. head returns 1st 6 rows
1727347007868:head(Wage)
1727347023816:View(Wage)
1727347045621:#Row 3, Column 11
1727347045621:Wage[3,11]
1727347051835:Wage[3,]
1727347124633:#Row 1 to 3 and column 1 to 3
1727347124633:Wage[1:3,1:3]
1727347240231:#Removes the 4th and 9th column and store it in reduced wage variable
1727347240231:reducedwage <- Wage[,-c(4,9)]
1727347281636:View(reducedwage)
1727347567541:head(reducedwage)
1727347573134:#Plot only one categorical/factor column
1727347573134:plot(reducedwage$maritl)
1727347577502:#Plot only one categorical/factor column
1727347577502:plot(reducedwage$maritl)
1727347580224:#plot only one numerical column
1727347580225:plot(reducedwage$wage)
1727347583335:#plot everything in one graph
1727347583335:plot(reducedwage)
1727364862914:# Calculate the sum
1727364862915:sum <- num1 + num2
1727364873901:# Print the result
1727364873901:print(paste("The sum of", num1, "and", num2, "is", sum))
1727364878781:# Define two variables
1727364878781:num1 <- 5
1727364879577:num2 <- 10
1727364880002:# Calculate the sum
1727364880002:sum <- num1 + num2
1727364880364:# Print the result
1727364880364:print(paste("The sum of", num1, "and", num2, "is", sum))
1727364888510:# Print the result
1727364888510:print(paste("The sum of", num1, "and", num2, "is", sum))
1727364900021:# Print the result
1727364900021:print(paste("The sum of", num1, "and", num2, "is", sum))
1727364944742:# Define two variables
1727364944742:num1 <- 5
1727364945232:num2 <- 10
1727364945655:# Calculate the sum
1727364945656:sum <- num1 + num2
1727364946025:# Print the result
1727364946025:print(paste("The sum of", num1, "and", num2, "is", sum))
1729419308591:ObesityDataSet_raw_and_data_sinthetic <- read.csv("~/Downloads/ObesityDataSet_raw_and_data_sinthetic.csv", header=FALSE)
1729419308604:View(ObesityDataSet_raw_and_data_sinthetic)
1730783821476:#Install the following packages first
1730783821476:install.packages("ISLR")
1730783823910:install.packages("ggplot2")
1730783825538:install.packages("caret")
1730783833799:#Access the installed libraries.
1730783833799:library("ISLR")
1730783835172:library("ggplot2")
1730783836603:library("caret")
1730783929455:#Install the following packages first
1730783929455:install.packages("ISLR")
1730783933862:install.packages("ISLR")
1730784427085:# Replace 'your_dataset.csv' with the path to your file
1730784427086:data <- read.csv("ObesityDataSet_raw_and_data_sinthetic.csv")
1730784435790:data <- read.csv("ObesityDataSet_raw_and_data_sinthetic.csv")
1730784457637:data <- read.csv("ObesityDataSet_raw_and_data_sinthetic.csv")
1730784458087:# View the first few rows
1730784458087:head(data)
1730784460375:# Check the structure of the data
1730784460375:str(data)
1730784461347:# Summary statistics
1730784461347:summary(data)
1730784465004:library(ggplot2)
1730784465668:# Bar plot for Gender
1730784465668:ggplot(data, aes(x = Gender)) +
1730784465669:geom_bar(fill = "skyblue") +
1730784465669:labs(title = "Gender Distribution", x = "Gender", y = "Count") +
1730784465670:theme_minimal()
1730784546141:# Age vs. Weight Scatter Plot
1730784546141:ggplot(data, aes(x = Age, y = Weight, color = family_history_with_overweight)) +
1730784546141:geom_point() +
1730784546141:labs(title = "Age vs. Weight by Family History of Overweight", x = "Age", y = "Weight") +
1730784546141:theme_minimal()
1730784550572:# Box Plot of BMI Based on Eating Habits (FAVC)
1730784550572:ggplot(data, aes(x = FAVC, y = Weight)) +
1730784550572:geom_boxplot(fill = "orange") +
1730784550572:labs(title = "Weight by High-Caloric Food Consumption", x = "Frequent High-Caloric Food Consumption", y = "Weight") +
1730784550572:theme_minimal()
1730784610665:# Load required libraries
1730784610665:install.packages("ggplot2")  # if not installed already
1730784612589:install.packages("ggplot2")
1730784614424:library(ggplot2)
1730784615002:# Load the dataset
1730784615002:data <- read.csv("your_dataset.csv")
1730784634495:# Load the dataset
1730784634496:data <- read.csv("ObesityDataSet_raw_and_data_sinthetic.csv")
1730784635665:# Inspect the dataset
1730784635665:head(data)
1730784636741:str(data)
1730784637546:summary(data)
1730784638516:# Bar Plot: Gender Distribution
1730784638516:ggplot(data, aes(x = Gender)) +
1730784638516:geom_bar(fill = "skyblue") +
1730784638516:labs(title = "Gender Distribution", x = "Gender", y = "Count") +
1730784638516:theme_minimal()
1730784639432:# Scatter Plot: Age vs. Weight by Family History of Overweight
1730784639432:ggplot(data, aes(x = Age, y = Weight, color = family_history_with_overweight)) +
1730784639433:geom_point() +
1730784639433:labs(title = "Age vs. Weight by Family History of Overweight", x = "Age", y = "Weight") +
1730784639433:theme_minimal()
1730784640313:# Box Plot: Weight by High-Caloric Food Consumption (FAVC)
1730784640313:ggplot(data, aes(x = FAVC, y = Weight)) +
1730784640314:geom_boxplot(fill = "orange") +
1730784640314:labs(title = "Weight by High-Caloric Food Consumption", x = "High-Caloric Food Consumption", y = "Weight") +
1730784640314:theme_minimal()
1730784641019:# Heatmap: Physical Activity (FAF) vs. Technology Use (TUE)
1730784641019:ggplot(data, aes(x = FAF, y = TUE)) +
1730784641019:geom_tile(aes(fill = ..count..), color = "white") +
1730784641019:scale_fill_gradient(low = "lightblue", high = "blue") +
1730784641019:labs(title = "Heatmap of Physical Activity vs. Technology Use",
1730784641019:x = "Physical Activity Frequency", y = "Technology Use Time") +
1730784641020:theme_minimal()
1730784644064:# Save the last plot as a PNG
1730784644064:ggsave("last_plot.png")
1730784885769:# Bar Plot: Gender Distribution
1730784885770:ggplot(data, aes(x = Gender)) +
1730784885770:geom_bar(fill = "skyblue") +
1730784885770:labs(title = "Gender Distribution", x = "Gender", y = "Count") +
1730784885770:theme_minimal()
1730784886874:# Scatter Plot: Age vs. Weight by Family History of Overweight
1730784886874:ggplot(data, aes(x = Age, y = Weight, color = family_history_with_overweight)) +
1730784886875:geom_point() +
1730784886875:labs(title = "Age vs. Weight by Family History of Overweight", x = "Age", y = "Weight") +
1730784886875:theme_minimal()
1730784887808:# Box Plot: Weight by High-Caloric Food Consumption (FAVC)
1730784887808:ggplot(data, aes(x = FAVC, y = Weight)) +
1730784887808:geom_boxplot(fill = "orange") +
1730784887808:labs(title = "Weight by High-Caloric Food Consumption", x = "High-Caloric Food Consumption", y = "Weight") +
1730784887808:theme_minimal()
1730784889358:# Heatmap: Physical Activity (FAF) vs. Technology Use (TUE)
1730784889358:ggplot(data, aes(x = FAF, y = TUE)) +
1730784889358:geom_tile(aes(fill = ..count..), color = "white") +
1730784889358:scale_fill_gradient(low = "lightblue", high = "blue") +
1730784889358:labs(title = "Heatmap of Physical Activity vs. Technology Use",
1730784889358:x = "Physical Activity Frequency", y = "Technology Use Time") +
1730784889358:theme_minimal()
1730784894021:# Scatter Plot: Age vs. Weight by Family History of Overweight
1730784894021:ggplot(data, aes(x = Age, y = Weight, color = family_history_with_overweight)) +
1730784894021:geom_point() +
1730784894021:labs(title = "Age vs. Weight by Family History of Overweight", x = "Age", y = "Weight") +
1730784894021:theme_minimal()
1730784944150:# Scatter Plot: Age vs. Weight by Family History of Overweight
1730784944150:ggplot(data, aes(x = Age, y = Gender, color = family_history_with_overweight)) +
1730784944151:geom_point() +
1730784944151:labs(title = "Age vs. Weight by Family History of Overweight", x = "Age", y = "Weight") +
1730784944151:theme_minimal()
1730784948248:# Scatter Plot: Age vs. Weight by Family History of Overweight
1730784948248:ggplot(data, aes(x = Age, y = Gender, color = family_history_with_overweight)) +
1730784948248:geom_point() +
1730784948248:labs(title = "Age vs. Weight by Family History of Overweight", x = "Age", y = "Weight") +
1730784948248:theme_minimal()
1730784961361:# Scatter Plot: Age vs. Weight by Family History of Overweight
1730784961361:ggplot(data, aes(x = Age, y = Weight, color = family_history_with_overweight)) +
1730784961361:geom_point() +
1730784961361:labs(title = "Age vs. Weight by Family History of Overweight", x = "Age", y = "Weight") +
1730784961361:theme_minimal()
1730784970706:# Scatter Plot: Age vs. Gender by Family History of Overweight
1730784970706:ggplot(data, aes(x = Age, y = Gender, color = family_history_with_overweight)) +
1730784970706:geom_point() +
1730784970706:labs(title = "Age vs. Weight by Family History of Overweight", x = "Age", y = "Weight") +
1730784970706:theme_minimal()
1730784975269:# Scatter Plot: Age vs. Gender by Family History of Overweight
1730784975270:ggplot(data, aes(x = Age, y = Gender, color = family_history_with_overweight)) +
1730784975270:geom_point() +
1730784975270:labs(title = "Age vs. Gender by Family History of Overweight", x = "Age", y = "Weight") +
1730784975270:theme_minimal()
1730785218514:# Load the dataset
1730785218515:data <- read.csv("RISKFACTORSANDACCESSTOCARE.csv")
1730787572120:# Load the dataset
1730787572122:data <- read.csv("RISKFACTORSANDACCESSTOCARE.csv")
1730787595328:# Load the dataset
1730787595328:data <- read.csv("(Cleansed) ObesityDataSet_raw_and_data_sinthetic.arff.csv")
1730787622388:# Load the dataset
1730787622389:data <- read.csv("(Cleansed) ObesityDataSet_raw_and_data_sinthetic.csv")
1730787653232:# Load the dataset
1730787653232:data <- read.csv("Cleansed_Dataset1.csv")
1730787698789:# Load the dataset
1730787698790:data <- read.csv("(Cleansed) ObesityDataSet_raw_and_data_sinthetic.csv")
1730787732944:# Load the dataset
1730787732944:data <- read.csv("Cleansed_Dataset2.csv")
1730787747071:# Load the dataset
1730787747071:data <- read.csv("Cleansed_Dataset2.csv")
1730787747701:# Inspect the dataset
1730787747701:head(data)
1730787747891:str(data)
1730787752670:# Load the dataset
1730787752670:data <- read.csv("Cleansed_Dataset2.csv")
1730787791563:# Load required libraries
1730787791563:install.packages("ggplot2")  # if not installed already
1730787793812:install.packages("ggplot2")
1730787794493:library(ggplot2)
1730787796760:# Load the dataset
1730787796760:data <- read.csv("Cleansed_Dataset2.csv")
1730787822946:# Load the dataset
1730787822946:data <- read.csv("Dataset2.csv")
1730787875535:# Load the dataset
1730787875535:data <- read.csv("Dataset2.csv")
1730787877346:# Inspect the dataset
1730787877346:head(data)
1730787903158:# Load required libraries
1730787903158:install.packages("ggplot2")  # if not installed already
1730787905653:install.packages("ggplot2")
1730787906978:library(ggplot2)
1730787908628:# Load the dataset
1730787908628:data <- read.csv("Dataset2.csv")
1730787918896:# Load the dataset
1730787918896:data <- read.csv("ObesityDataSet_raw_and_data_sinthetic.csv")
1730787970681:# Load the dataset
1730787970682:data <- read.csv("Dataset2.csv")
1730787982028:# Load required libraries
1730787982029:install.packages("ggplot2")  # if not installed already
1730787993571:library(ggplot2)
1730787995426:# Load the dataset
1730787995426:data <- read.csv("Dataset2.csv")
1730788000085:# Load the dataset
1730788000085:data <- read.csv("Dataset2.csv")
1730788016363:# Load the dataset
1730788016363:data <- read.csv("ObesityDataSet_raw_and_data_sinthetic.csv")
1730788042710:# Load the dataset
1730788042710:data <- read.csv("ObesityDataSet_raw_and_data_sinthetic.csv")
1730788054771:# Load the dataset
1730788054771:data <- read.csv("Dataset2.csv")
1730788081738:# Load the dataset
1730788081738:data <- read.csv("Dataset2.csv")
1730788083007:# Inspect the dataset
1730788083007:head(data)
1730788088549:str(data)
1730788088839:summary(data)
1730788089283:# Bar Plot: Gender Distribution
1730788089283:ggplot(data, aes(x = Gender)) +
1730788089284:geom_bar(fill = "skyblue") +
1730788089284:labs(title = "Gender Distribution", x = "Gender", y = "Count") +
1730788089284:theme_minimal()
1730788089571:# Scatter Plot: Age vs. Gender by Family History of Overweight
1730788089572:ggplot(data, aes(x = Age, y = Gender, color = family_history_with_overweight)) +
1730788089572:geom_point() +
1730788089572:labs(title = "Age vs. Gender by Family History of Overweight", x = "Age", y = "Weight") +
1730788089572:theme_minimal()
1730788089765:# Box Plot: Weight by High-Caloric Food Consumption (FAVC)
1730788089765:ggplot(data, aes(x = FAVC, y = Weight)) +
1730788089765:geom_boxplot(fill = "orange") +
1730788089765:labs(title = "Weight by High-Caloric Food Consumption", x = "High-Caloric Food Consumption", y = "Weight") +
1730788089765:theme_minimal()
1730788089909:# Heatmap: Physical Activity (FAF) vs. Technology Use (TUE)
1730788089909:ggplot(data, aes(x = FAF, y = TUE)) +
1730788089909:geom_tile(aes(fill = ..count..), color = "white") +
1730788089909:scale_fill_gradient(low = "lightblue", high = "blue") +
1730788089909:labs(title = "Heatmap of Physical Activity vs. Technology Use",
1730788089909:x = "Physical Activity Frequency", y = "Technology Use Time") +
1730788089909:theme_minimal()
1730788132059:# Load the dataset
1730788132059:data <- read.csv("RISKFACTORSANDACCESSTOCARE.csv")
1730789442505:# Load the dataset
1730789442505:data <- read.csv("RISKFACTORSANDACCESSTOCARE.csv")
1730789442884:# Inspect the dataset
1730789442884:head(data)
1730789443095:str(data)
1730789443288:summary(data)
1730789443681:# Bar Plot: Gender Distribution
1730789443681:ggplot(data, aes(x = Gender)) +
1730789443681:geom_bar(fill = "skyblue") +
1730789443681:labs(title = "Gender Distribution", x = "Gender", y = "Count") +
1730789443681:theme_minimal()
1730789447104:# Scatter Plot: Age vs. Gender by Family History of Overweight
1730789447104:ggplot(data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1730789447104:geom_point() +
1730789447104:labs(title = "Age vs. Gender by Family History of Overweight", x = "Age", y = "Weight") +
1730789447104:theme_minimal()
1730789465424:# Scatter Plot: Age vs. Gender by Family History of Overweight
1730789465425:ggplot(data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1730789465425:geom_point() +
1730789465425:labs(title = "Age vs. Gender by Family History of Overweight", x = "Age", y = "Weight") +
1730789465425:theme_minimal()
1730789698013:# Load the dataset
1730789698014:data <- read.csv("RISKFACTORSANDACCESSTOCARE.csv")
1730789709483:# Load the dataset
1730789709483:data <- read.csv("RISKFACTORSANDACCESSTOCARE.csv")
1730789710122:# Inspect the dataset
1730789710122:head(data)
1730789742313:# Load necessary libraries
1730789742313:install.packages("ggplot2")  # if not installed already
1730789744406:install.packages("ggplot2")
1730789756999:library(ggplot2)
1730789756999:library(dplyr)
1730789757013:# Load the dataset
1730789757014:data <- read.csv("RISKFACTORSANDACCESSTOCARE.csv")
1730789802788:getwd()
1730789882976:# Load necessary libraries
1730789882976:install.packages("ggplot2")  # if not installed already
1730789886817:install.packages("ggplot2")
1730789904846:library(ggplot2)
1730789904846:library(dplyr)
1730789904846:# Load the dataset
1730789904846:data <- read.csv("RISKFACTORSANDACCESSTOCARE.csv")
1730789925313:getwd()
1730789950568:# Load the dataset
1730789950568:data <- read.csv("Users/shakiraregalado/Downloads/IM_2/capstoneRISKFACTORSANDACCESSTOCARE.csv")
1730789952111:getwd()
1730789978220:data <- read.csv("Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1730790000540:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1730790004325:getwd()
1730790012374:# Load the dataset
1730790012374:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1730790014920:getwd()
1730790022134:# Load the dataset
1730790022134:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1730790023059:# Inspect the dataset
1730790023059:head(data)
1730790025349:str(data)
1730790026147:summary(data)
1730790027011:# Filter out rows with -1111.1 values for Obesity, Diabetes, and High_Blood_Pres
1730790027011:filtered_data <- data %>%
1730790027011:filter(Obesity != -1111.1, Diabetes != -1111.1, High_Blood_Pres != -1111.1)
1730790033694:# Scatter Plot: Obesity vs. Diabetes, Colored by High Blood Pressure
1730790033694:ggplot(filtered_data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1730790033694:geom_point() +
1730790033694:labs(title = "Obesity vs. Diabetes by High Blood Pressure Status",
1730790033694:x = "Obesity",
1730790033694:y = "Diabetes") +
1730790033694:theme_minimal()
1730790074048:# Scatter Plot: Obesity vs. Diabetes, Colored by High Blood Pressure
1730790074048:ggplot(filtered_data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1730790074048:geom_point() +
1730790074048:labs(title = "High Blood Pressure vs. Diabetes by Obesity Status",
1730790074048:x = "Obesity",
1730790074048:y = "Diabetes") +
1730790074048:theme_minimal()
1730790118810:# Bar Plot: Gender Distribution
1730790118811:ggplot(data, aes(x = Gender)) +
1730790118811:geom_bar(fill = "skyblue") +
1730790118811:labs(title = "Gender Distribution", x = "Gender", y = "Count") +
1730790118811:theme_minimal()
1730790119372:# Scatter Plot: Age vs. Gender by Family History of Overweight
1730790119372:ggplot(data, aes(x = Age, y = Gender, color = family_history_with_overweight)) +
1730790119372:geom_point() +
1730790119373:labs(title = "Age vs. Gender by Family History of Overweight", x = "Age", y = "Weight") +
1730790119373:theme_minimal()
1730790120476:# Box Plot: Weight by High-Caloric Food Consumption (FAVC)
1730790120476:ggplot(data, aes(x = FAVC, y = Weight)) +
1730790120476:geom_boxplot(fill = "orange") +
1730790120476:labs(title = "Weight by High-Caloric Food Consumption", x = "High-Caloric Food Consumption", y = "Weight") +
1730790120476:theme_minimal()
1730790140958:# Load the dataset
1730790140958:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/ObesityDataSet_raw_and_data_sinthetic.csv")
1730790143816:# Inspect the dataset
1730790143816:head(data)
1730790144267:str(data)
1730790144532:summary(data)
1730790144732:# Bar Plot: Gender Distribution
1730790144732:ggplot(data, aes(x = Gender)) +
1730790144732:geom_bar(fill = "skyblue") +
1730790144732:labs(title = "Gender Distribution", x = "Gender", y = "Count") +
1730790144732:theme_minimal()
1730790144934:# Scatter Plot: Age vs. Gender by Family History of Overweight
1730790144934:ggplot(data, aes(x = Age, y = Gender, color = family_history_with_overweight)) +
1730790144934:geom_point() +
1730790144934:labs(title = "Age vs. Gender by Family History of Overweight", x = "Age", y = "Weight") +
1730790144934:theme_minimal()
1730790145135:# Box Plot: Weight by High-Caloric Food Consumption (FAVC)
1730790145135:ggplot(data, aes(x = FAVC, y = Weight)) +
1730790145135:geom_boxplot(fill = "orange") +
1730790145135:labs(title = "Weight by High-Caloric Food Consumption", x = "High-Caloric Food Consumption", y = "Weight") +
1730790145135:theme_minimal()
1730790145561:# Heatmap: Physical Activity (FAF) vs. Technology Use (TUE)
1730790145561:ggplot(data, aes(x = FAF, y = TUE)) +
1730790145562:geom_tile(aes(fill = ..count..), color = "white") +
1730790145562:scale_fill_gradient(low = "lightblue", high = "blue") +
1730790145562:labs(title = "Heatmap of Physical Activity vs. Technology Use",
1730790145562:x = "Physical Activity Frequency", y = "Technology Use Time") +
1730790145562:theme_minimal()
1730790150388:# Heatmap: Physical Activity (FAF) vs. Technology Use (TUE)
1730790150388:ggplot(data, aes(x = FAF, y = TUE)) +
1730790150390:geom_tile(aes(fill = ..count..), color = "white") +
1730790150392:scale_fill_gradient(low = "lightblue", high = "blue") +
1730790150392:labs(title = "Heatmap of Physical Activity vs. Technology Use",
1730790150392:x = "Physical Activity Frequency", y = "Technology Use Time") +
1730790150392:theme_minimal()
1730790163723:# Bar Plot: Gender Distribution
1730790163723:ggplot(data, aes(x = Gender)) +
1730790163723:geom_bar(fill = "skyblue") +
1730790163723:labs(title = "Gender Distribution", x = "Gender", y = "Count") +
1730790163723:theme_minimal()
1730790164604:# Scatter Plot: Age vs. Gender by Family History of Overweight
1730790164604:ggplot(data, aes(x = Age, y = Gender, color = family_history_with_overweight)) +
1730790164604:geom_point() +
1730790164604:labs(title = "Age vs. Gender by Family History of Overweight", x = "Age", y = "Weight") +
1730790164605:theme_minimal()
1730790165331:# Box Plot: Weight by High-Caloric Food Consumption (FAVC)
1730790165331:ggplot(data, aes(x = FAVC, y = Weight)) +
1730790165331:geom_boxplot(fill = "orange") +
1730790165331:labs(title = "Weight by High-Caloric Food Consumption", x = "High-Caloric Food Consumption", y = "Weight") +
1730790165331:theme_minimal()
1730790201125:# Box Plot: Weight by High-Caloric Food Consumption (FAVC)
1730790201125:ggplot(data, aes(x = FAVC, y = Gender)) +
1730790201125:geom_boxplot(fill = "orange") +
1730790201125:labs(title = "Weight by High-Caloric Food Consumption", x = "High-Caloric Food Consumption", y = "Weight") +
1730790201125:theme_minimal()
1730790217574:# Box Plot: Weight by High-Caloric Food Consumption (FAVC)
1730790217574:ggplot(data, aes(x = FAVC, y = Weight)) +
1730790217574:geom_boxplot(fill = "orange") +
1730790217574:labs(title = "Weight by High-Caloric Food Consumption", x = "High-Caloric Food Consumption", y = "Weight") +
1730790217574:theme_minimal()
1730790871096:# Load the dataset
1730790871098:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1730790873230:# Inspect the dataset
1730790873231:head(data)
1730790874230:str(data)
1730790875626:summary(data)
1730790876464:# Filter out rows with -1111.1 values for Obesity, Diabetes, and High_Blood_Pres
1730790876465:filtered_data <- data %>%
1730790876466:filter(Obesity != -1111.1, Diabetes != -1111.1, High_Blood_Pres != -1111.1)
1730790878311:# Scatter Plot: High Blood Pressure vs. Diabetes by Obesity
1730790878311:ggplot(filtered_data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1730790878311:geom_point() +
1730790878311:labs(title = "High Blood Pressure vs. Diabetes by Obesity Status",
1730790878311:x = "Obesity",
1730790878311:y = "Diabetes") +
1730790878311:theme_minimal()
1731406029527:install.packages("kernlab")
1731406030668:install.packages("caret")
1731406031709:install.packages("tm")
1731406032342:install.packages("dplyr")
1731406033180:install.packages("splitstackshape")
1731406033722:install.packages("e1071")
1731406067460:library("kernlab")
1731406067686:library("caret")
1731406068906:library("tm")
1731406068995:library("dplyr")
1731406069002:library("splitstackshape")
1731406069010:library("e1071")
1731406098841:# Step 1. Ingest your training data and clean it.
1731406098841:train <- VCorpus(DirSource("Training", encoding = "UTF-8"), readerControl=list(language="English"))
1731406103317:View(train)
1731406103588:View(train)
1731406194687:setwd("~/Downloads/Machine Learning with R Tutorial")
1731407318210:train <- tm_map(train, content_transformer(stripWhitespace))
1731407321430:train <- tm_map(train, content_transformer(tolower))
1731407345140:train <- tm_map(train, content_transformer(removeNumbers))
1731407347321:train <- tm_map(train, content_transformer(removePunctuation))
1731407363285:# Step 2. Create your document term matrices for the training data.
1731407363286:train.dtm <- as.matrix(DocumentTermMatrix(train, control=list(wordLengths=c(1,Inf))))
1731407363783:# Step 3. Repeat steps 1 & 2 above for the Test set.
1731407363783:test <- VCorpus(DirSource("Test", encoding = "UTF-8"), readerControl=list(language="English"))
1731407382357:View(test)
1731407384976:View(train.dtm)
1731407386381:View(train.dtm)
1731407434319:test <- tm_map(test, content_transformer(stripWhitespace))
1731407436911:test <- tm_map(test, content_transformer(tolower))
1731407439586:test <- tm_map(test, content_transformer(removeNumbers))
1731407440334:test <- tm_map(test, content_transformer(removePunctuation))
1731407441226:test.dtm <- as.matrix(DocumentTermMatrix(test, control=list(wordLengths=c(1,Inf))))
1731407453426:# Step 4. Make test and train matrices of identical length (find intersection)
1731407453426:train.df <- data.frame(train.dtm[,intersect(colnames(train.dtm), colnames(test.dtm))])
1731407461252:test.df <- data.frame(test.dtm[,intersect(colnames(test.dtm), colnames(train.dtm))])
1731407469128:# Step 5. Retrieve the correct labels for training data and put dummy values for testing data
1731407469128:label.df <- data.frame(row.names(train.df))
1731407473970:View(label.df)
1731407485895:colnames(label.df) <- c("filenames")
1731407490538:label.df<- cSplit(label.df, 'filenames', sep="_", type.convert=FALSE)
1731407519266:train.df$corpus<- label.df$filenames_1
1731407522077:test.df$corpus <- c("Neg")
1731407525185:# Step 6. Create folds of your data, then run the training once to inspect results
1731407525185:stringsAsFactors = TRUE
1731407529121:df.train <- train.df
1731407532326:df.test <- train.df
1731407542830:df.model<-ksvm(as.factor(corpus)~., data=df.train, kernel="rbfdot")
1731407549934:df.pred<-predict(df.model, df.test)
1731407562451:con.matrix<-confusionMatrix(table(df.pred, df.test$corpus))
1731407565134:print(con.matrix)
1731407609614:# Step 7. Run the final prediction on the test data and re-attach file names.
1731407609614:df.test <- test.df
1731407612338:df.pred<-predict(df.model, df.test)
1731407614111:results <- as.data.frame(df.pred)
1731407616342:rownames(results) <- rownames(test.df)
1731407618084:print(results)
1731419618066:# Load necessary libraries
1731419618067:install.packages("ggplot2")  # if not installed already
1731419867720:# Load necessary libraries
1731419867720:install.packages("ggplot2")  # if not installed already
1731419869458:library(ggplot2)
1731419871192:library(dplyr)
1731419872241:# Load the dataset
1731419872241:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1731419874195:# Inspect the dataset
1731419874195:head(data)
1731419875713:str(data)
1731419876286:summary(data)
1731419876790:# Filter out rows with -1111.1 values for Obesity, Diabetes, and High_Blood_Pres
1731419876790:filtered_data <- data %>%
1731419876790:filter(Obesity != -1111.1, Diabetes != -1111.1, High_Blood_Pres != -1111.1)
1731419877225:# Scatter Plot: High Blood Pressure vs. Diabetes by Obesity
1731419877225:ggplot(filtered_data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1731419877225:geom_point() +
1731419877225:labs(title = "High Blood Pressure vs. Diabetes by Obesity Status",
1731419877225:x = "Obesity",
1731419877225:y = "Diabetes") +
1731419877225:theme_minimal()
1731420443906:# Load necessary libraries
1731420443906:install.packages("ggplot2")  # if not installed already
1731420443953:library(ggplot2)
1731420443953:library(dplyr)
1731420443953:# Load the dataset
1731420443953:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1731420443973:# Inspect the dataset
1731420443973:head(data)
1731420443977:str(data)
1731420444024:summary(data)
1731420444031:# Filter out rows with -1111.1 values for Obesity, Diabetes, and High_Blood_Pres
1731420444031:filtered_data <- data %>%
1731420444031:filter(Obesity != -1111.1, Diabetes != -1111.1, High_Blood_Pres != -1111.1)
1731420444035:# Scatter Plot: High Blood Pressure vs. Diabetes by Obesity
1731420444035:ggplot(filtered_data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1731420444035:geom_point() +
1731420444035:labs(title = "High Blood Pressure vs. Diabetes by Obesity Status",
1731420444035:x = "Obesity",
1731420444035:y = "Diabetes") +
1731420444035:theme_minimal()
1731420446271:install.packages("ggplot2")
1731420459289:# Load the dataset
1731420459289:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1731420459805:# Inspect the dataset
1731420459805:head(data)
1731420460009:str(data)
1731420460143:summary(data)
1731420460981:# Filter out rows with -1111.1 values for Obesity, Diabetes, and High_Blood_Pres
1731420460981:filtered_data <- data %>%
1731420460982:filter(Obesity != -1111.1, Diabetes != -1111.1, High_Blood_Pres != -1111.1)
1731420462148:# Scatter Plot: High Blood Pressure vs. Diabetes by Obesity
1731420462148:ggplot(filtered_data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1731420462148:geom_point() +
1731420462148:labs(title = "High Blood Pressure vs. Diabetes by Obesity Status",
1731420462148:x = "Obesity",
1731420462148:y = "Diabetes") +
1731420462148:theme_minimal()
1731427511655:View(data)
1731427658249:# Load necessary libraries
1731427658250:install.packages("ggplot2")  # if not installed already
1731427660308:install.packages("ggplot2")
1731427662014:library(ggplot2)
1731427662620:library(dplyr)
1731427663865:# Load the dataset
1731427663866:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1731427666084:# Inspect the dataset
1731427666084:head(data)
1731427667907:str(data)
1731427672228:summary(data)
1731427675821:# Filter out rows with -1111.1 values for Obesity, Diabetes, and High_Blood_Pres
1731427675821:filtered_data <- data %>%
1731427675821:filter(Obesity != -1111.1, Diabetes != -1111.1, High_Blood_Pres != -1111.1)
1731427681067:View(data)
1731848486489:# Load necessary libraries
1731848486489:install.packages("ggplot2")  # if not installed already
1731848488634:library(ggplot2)
1731848489753:library(dplyr)
1731848491213:# Load the dataset
1731848491213:data <- read.csv("/Users/shakiraregalado/Downloads/IM_2/capstone/RISKFACTORSANDACCESSTOCARE.csv")
1731848492105:# Inspect the dataset
1731848492105:head(data)
1731848492889:str(data)
1731848493674:summary(data)
1731848494290:# Filter out rows with -1111.1 values for Obesity, Diabetes, and High_Blood_Pres
1731848494291:filtered_data <- data %>%
1731848494291:filter(Obesity != -1111.1, Diabetes != -1111.1, High_Blood_Pres != -1111.1)
1731848495024:# Scatter Plot: High Blood Pressure vs. Diabetes by Obesity
1731848495024:ggplot(filtered_data, aes(x = Obesity, y = Diabetes, color = High_Blood_Pres)) +
1731848495024:geom_point() +
1731848495024:labs(title = "High Blood Pressure vs. Diabetes by Obesity Status",
1731848495024:x = "Obesity",
1731848495024:y = "Diabetes") +
1731848495024:theme_minimal()
1731901260865:# Install necessary libraries
1731901260866:pkgs <- c('tidyverse')
1731901269288:# Install necessary libraries
1731901269288:pkgs <- c('tidyverse')
1731901270852:pkgs_install <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
1731901272244:if(length(pkgs_install)) install.packages(pkgs_install)
1731901297240:# Vectors
1731901297241:x <- c(10.4, 5.6, Inf, NA, 21.7)
1731901299585:x
1731901301825:3:10
1731901303682:y <- seq(from = 0, to = 1, length.out = 5)
1731901307000:y
1731901308485:# Vectorized Operations
1731901308485:x + 1
1731901310157:x > y
1731901364607:# Subsetting Vectors
1731901364607:x[1:3]
1731901366651:x[-1]
1731901368668:is.na(x)
1731901371092:## [1] FALSE FALSE FALSE  TRUE FALSE
1731901371093:x[!is.na(x)] # select all non-missing values
1731901373417:x[!is.finite(x)] <- NA
1731901376003:x
1731901448696:# Functions
1731901448696:inc <- function(x, by = 1) {
1731901448696:x + by
1731901448696:}
1731901450488:inc(x, by = 2)
1731901451716:# Strings
1731901451717:string <- c("Hello", "Goodbye")
1731901452833:string
1731901453907:paste(string, "World!")
1731901456415:# Plotting
1731901456415:plot(x, y)
1731901639004:# Objects
1731901639004:x
1731901640380:summary(x)
1731901641608:class(x)
1731901643087:str(x)
1731901644364:# Tidyverse
1731901644364:library(tidyverse)
1731901648411:# Tibbles
1731901648412:fruit <- tibble(
1731901648412:name = c("apple", "banana", "mango", "orange", "lime"),
1731901648412:price = c(2.5, 2.0, 4.0, 3.5, 2.5),
1731901648412:vitamin_c = c(20, 45, 130, 250, 132),
1731901648412:type = c("pome", "tropical", "tropical", "citrus", "citrus"))
1731901651942:fruit
1731901655190:## # A tibble: 5 × 4
1731901655905:## # A tibble: 5 × 4
1731901655905:##   name   price vitamin_c type
1731901656708:## # A tibble: 5 × 4
1731901656708:##   name   price vitamin_c type
1731901656708:##   <chr>  <dbl>     <dbl> <chr>
1731901657196:## # A tibble: 5 × 4
1731901657196:##   name   price vitamin_c type
1731901657196:##   <chr>  <dbl>     <dbl> <chr>
1731901657196:## 1 apple    2.5        20 pome
1731901657491:## # A tibble: 5 × 4
1731901657492:##   name   price vitamin_c type
1731901657492:##   <chr>  <dbl>     <dbl> <chr>
1731901657492:## 1 apple    2.5        20 pome
1731901657492:## 2 banana   2          45 tropical
1731901657887:## # A tibble: 5 × 4
1731901657887:##   name   price vitamin_c type
1731901657887:##   <chr>  <dbl>     <dbl> <chr>
1731901657887:## 1 apple    2.5        20 pome
1731901657887:## 2 banana   2          45 tropical
1731901657887:## 3 mango    4         130 tropical
1731901658519:## # A tibble: 5 × 4
1731901658519:##   name   price vitamin_c type
1731901658519:##   <chr>  <dbl>     <dbl> <chr>
1731901658519:## 1 apple    2.5        20 pome
1731901658519:## 2 banana   2          45 tropical
1731901658519:## 3 mango    4         130 tropical
1731901658519:## 4 orange   3.5       250 citrus
1731901659250:## # A tibble: 5 × 4
1731901659250:##   name   price vitamin_c type
1731901659250:##   <chr>  <dbl>     <dbl> <chr>
1731901659250:## 1 apple    2.5        20 pome
1731901659251:## 2 banana   2          45 tropical
1731901659251:## 3 mango    4         130 tropical
1731901659251:## 4 orange   3.5       250 citrus
1731901659251:## 5 lime     2.5       132 citrus
1731901716500:# Transformations
1731901716500:affordable_vitamin_c_sources <- fruit |>
1731901716500:mutate(vitamin_c_per_dollar = vitamin_c / price) |>
1731901716500:filter(vitamin_c_per_dollar > 20) |>
1731901716500:arrange(desc(vitamin_c_per_dollar))
1731901717623:affordable_vitamin_c_sources
1731901718571:affordable_vitamin_c_sources |>
1731901718571:summarize(min = min(price),
1731901718571:mean = mean(price),
1731901718571:max = max(price))
1731901719543:affordable_vitamin_c_sources |>
1731901719543:group_by(type) |>
1731901719543:summarize(min = min(price),
1731901719543:mean = mean(price),
1731901719543:max = max(price))
1731901720215:affordable_vitamin_c_sources |>
1731901720216:summarize(across(c(price, vitamin_c), mean))
1731901720905:# ggplot2
1731901720905:ggplot(data, mapping = aes(x = ..., y = ..., color = ...)) +
1731901720906:geom_point()
1731901732311:ggplot(fruit, aes(x = price, y = vitamin_c)) +
1731901732312:geom_point()
1731901750782:# ggplot2
1731901750782:ggplot(data, mapping = aes(x = ..., y = ..., color = ...)) +
1731901750782:geom_point()
1731901752131:ggplot(fruit, aes(x = price, y = vitamin_c)) +
1731901752131:geom_point()
1731901813772:ggplot(fruit, aes(x = price, y = vitamin_c)) +
1731901813772:geom_point() +
1731901813772:geom_smooth(method = "lm", se = FALSE)
1731901819731:ggplot(fruit, aes(x = name, y = vitamin_c)) +
1731901819731:geom_bar(stat = "identity")
1731928271641:# Install necessary libraries
1731928271642:pkgs <- c("arules", "caret", "factoextra", "GGally",
1731928271642:"ggcorrplot", "hexbin", "palmerpenguins", "plotly",
1731928271642:"proxy", "seriation", "tidyverse")
1731928273231:pkgs_install <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
1731928274113:if(length(pkgs_install)) install.packages(pkgs_install)
1731928323969:# Attributes and Measurement
1731928323969:factor(c("red", "green", "green", "blue"))
1731928349701:ordered(c("S", "L", "M", "S"),
1731928349701:levels = c("S", "M", "L"))
1731928351120:c(1, 2, 3, 4, 3, 3)
1731928352153:# The Iris Dataset
1731928352153:library(tidyverse)
1731928353204:data(iris)
1731928354010:iris <- as_tibble(iris)
1731928354678:iris
1731928355780:print(iris, n = 3, width = Inf)
1731928356599:# Data Quality
1731928356599:summary(iris)
1731928357573:iris |>
1731928357573:summarize(mean = mean(Sepal.Length))
1731928358622:iris |>
1731928358622:summarize(across(where(is.numeric), mean))
1731928359568:library(GGally)
1731928362560:## Registered S3 method overwritten by 'GGally':
1731928362560:##   method from
1731928362560:##   +.gg   ggplot2
1731928362560:ggpairs(iris, aes(color = Species), progress = FALSE)
1731928367096:## `stat_bin()` using `bins = 30`. Pick better value with
1731928368226:## `stat_bin()` using `bins = 30`. Pick better value with
1731928368226:## `binwidth`.
1731928369172:## `stat_bin()` using `bins = 30`. Pick better value with
1731928369173:## `binwidth`.
1731928369173:## `stat_bin()` using `bins = 30`. Pick better value with
1731928370260:## `stat_bin()` using `bins = 30`. Pick better value with
1731928370260:## `binwidth`.
1731928370260:## `stat_bin()` using `bins = 30`. Pick better value with
1731928370261:## `binwidth`.
1731928370975:## `stat_bin()` using `bins = 30`. Pick better value with
1731928370975:## `binwidth`.
1731928370975:## `stat_bin()` using `bins = 30`. Pick better value with
1731928370975:## `binwidth`.
1731928370975:## `stat_bin()` using `bins = 30`. Pick better value with
1731928371538:## `stat_bin()` using `bins = 30`. Pick better value with
1731928371538:## `binwidth`.
1731928371538:## `stat_bin()` using `bins = 30`. Pick better value with
1731928371538:## `binwidth`.
1731928371538:## `stat_bin()` using `bins = 30`. Pick better value with
1731928371538:## `binwidth`.
1731928372088:## `stat_bin()` using `bins = 30`. Pick better value with
1731928372088:## `binwidth`.
1731928372088:## `stat_bin()` using `bins = 30`. Pick better value with
1731928372089:## `binwidth`.
1731928372089:## `stat_bin()` using `bins = 30`. Pick better value with
1731928372089:## `binwidth`.
1731928372089:## `stat_bin()` using `bins = 30`. Pick better value with
1731928496288:clean.data <- iris |>
1731928496288:drop_na() |>
1731928496289:unique()
1731928498215:summary(clean.data)
1731928499181:# Aggregation
1731928499182:iris |>
1731928499198:group_by(Species) |>
1731928499204:summarize(across(everything(), mean))
1731928500655:## # A tibble: 3 × 5
1731928500655:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1731928500655:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1731928500655:## 1 setosa           5.01        3.43         1.46       0.246
1731928500655:## 2 versico…         5.94        2.77         4.26       1.33
1731928500655:## 3 virgini…         6.59        2.97         5.55       2.03
1731928500655:iris |>
1731928500656:group_by(Species) |>
1731928500656:summarize(across(everything(), median))
1731928501283:# Random Sampling
1731928501284:sample(c("A", "B", "C"), size = 10, replace = TRUE)
1731928501772:take <- sample(seq(nrow(iris)), size = 15)
1731928502325:take
1731928502919:##  [1]  99 113 103 119  10 130  67  27  38  79  71  30 138  84
1731928502919:## [15] 110
1731928502919:iris[take, ]
1731928504615:set.seed(1000)
1731928505806:s <- iris |>
1731928505807:slice_sample(n = 15)
1731928506711:library(GGally)
1731928507504:ggpairs(s, aes(color = Species), progress = FALSE)
1731928509272:## `stat_bin()` using `bins = 30`. Pick better value with
1731928510471:## `stat_bin()` using `bins = 30`. Pick better value with
1731928510471:## `binwidth`.
1731928511237:## `stat_bin()` using `bins = 30`. Pick better value with
1731928511237:## `binwidth`.
1731928511238:## `stat_bin()` using `bins = 30`. Pick better value with
1731928511956:## `stat_bin()` using `bins = 30`. Pick better value with
1731928511956:## `binwidth`.
1731928511956:## `stat_bin()` using `bins = 30`. Pick better value with
1731928511956:## `binwidth`.
1731928512368:## `stat_bin()` using `bins = 30`. Pick better value with
1731928512368:## `binwidth`.
1731928512368:## `stat_bin()` using `bins = 30`. Pick better value with
1731928512369:## `binwidth`.
1731928512369:## `stat_bin()` using `bins = 30`. Pick better value with
1731928512771:## `stat_bin()` using `bins = 30`. Pick better value with
1731928512771:## `binwidth`.
1731928512772:## `stat_bin()` using `bins = 30`. Pick better value with
1731928512772:## `binwidth`.
1731928512772:## `stat_bin()` using `bins = 30`. Pick better value with
1731928512772:## `binwidth`.
1731928513137:## `stat_bin()` using `bins = 30`. Pick better value with
1731928513137:## `binwidth`.
1731928513138:## `stat_bin()` using `bins = 30`. Pick better value with
1731928513138:## `binwidth`.
1731928513138:## `stat_bin()` using `bins = 30`. Pick better value with
1731928513138:## `binwidth`.
1731928513138:## `stat_bin()` using `bins = 30`. Pick better value with
1731928550674:# Stratified Sampling
1731928550674:set.seed(1000)
1731928551442:s2 <- iris |>
1731928551442:group_by(Species) |>
1731928551442:slice_sample(n = 5) |>
1731928551442:ungroup()
1731928552216:library(GGally)
1731928554951:ggpairs(s2, aes(color = Species), progress = FALSE)
1731928556757:## `stat_bin()` using `bins = 30`. Pick better value with
1731928557435:## `stat_bin()` using `bins = 30`. Pick better value with
1731928557435:## `binwidth`.
1731928557987:## `stat_bin()` using `bins = 30`. Pick better value with
1731928557987:## `binwidth`.
1731928557987:## `stat_bin()` using `bins = 30`. Pick better value with
1731928558481:## `stat_bin()` using `bins = 30`. Pick better value with
1731928558481:## `binwidth`.
1731928558481:## `stat_bin()` using `bins = 30`. Pick better value with
1731928558481:## `binwidth`.
1731928558954:## `stat_bin()` using `bins = 30`. Pick better value with
1731928558954:## `binwidth`.
1731928558955:## `stat_bin()` using `bins = 30`. Pick better value with
1731928558955:## `binwidth`.
1731928558955:## `stat_bin()` using `bins = 30`. Pick better value with
1731928559335:## `stat_bin()` using `bins = 30`. Pick better value with
1731928559335:## `binwidth`.
1731928559336:## `stat_bin()` using `bins = 30`. Pick better value with
1731928559336:## `binwidth`.
1731928559336:## `stat_bin()` using `bins = 30`. Pick better value with
1731928559336:## `binwidth`.
1731928598346:# Principal Components Analysis (PCA
1731928598347:plotly::plot_ly(iris,
1731928598347:x = ~Sepal.Length,
1731928598347:y = ~Petal.Length,
1731928598347:z = ~Sepal.Width,
1731928598347:color = ~Species, size = 1) |>
1731928598347:plotly::add_markers()
1731928625995:# Install necessary libraries
1731928632454:pc <- iris |>
1731928632454:select(-Species) |>
1731928632454:as.matrix() |>
1731928632454:prcomp()
1731928633767:summary(pc)
1731928635022:## Importance of components:
1731928635746:## Importance of components:
1731928635746:##                          PC1    PC2    PC3     PC4
1731928636481:## Importance of components:
1731928636481:##                          PC1    PC2    PC3     PC4
1731928636481:## Standard deviation     2.056 0.4926 0.2797 0.15439
1731928648949:plot(pc, type = "line")
1731928671475:str(pc)
1731928672714:iris_projected <- as_tibble(pc$x) |>
1731928672714:add_column(Species = iris$Species)
1731928673691:ggplot(iris_projected, aes(x = PC1, y = PC2, color = Species)) +
1731928673691:geom_point()
1731928697828:ggplot(iris_projected, aes(x = PC1, y = PC2, color = Species)) +
1731928697828:geom_point()
1731928698658:ggplot(iris_projected,
1731928698658:aes(x = PC1, y = 0, color = Species)) +
1731928698658:geom_point() +
1731928698658:scale_y_continuous(expand=c(0,0)) +
1731928698658:theme(axis.text.y = element_blank(),
1731928698659:axis.title.y = element_blank()
1731928698659:)
1731928712884:library(factoextra)
1731928714721:fviz_pca(pc)
1731928731598:fviz_pca_var(pc)
1731928756145:# Multi-Dimensional Scaling (MDS)
1731928756145:d <- iris |>
1731928756145:select(-Species) |>
1731928756145:dist()
1731928760089:fit <- cmdscale(d, k = 2)
1731928761790:colnames(fit) <- c("comp1", "comp2")
1731928763083:fit <- as_tibble(fit) |>
1731928763084:add_column(Species = iris$Species)
1731928764446:ggplot(fit, aes(x = comp1, y = comp2, color = Species)) +
1731928764446:geom_point()
1731928828607:# Other Nonlinear Dimensionality Reduction Methods
1731928828607:iris |>
1731928828608:pull(Sepal.Width) |>
1731928828608:cut(breaks = 3)
1731928829910:library(arules)
1731928832100:##
1731928832100:##     expand, pack, unpack
1731928832100:##
1731928832100:## Attaching package: 'arules'
1731928832101:## The following object is masked from 'package:dplyr':
1731928832101:##
1731928832101:##     recode
1731928832101:## The following objects are masked from 'package:base':
1731928832101:##
1731928832101:##     abbreviate, write
1731928832101:iris |> pull(Petal.Width) |>
1731928832101:discretize(method = "interval", breaks = 3)
1731928833378:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1731928833378:geom_vline(
1731928833378:xintercept = iris |>
1731928833378:pull(Petal.Width) |>
1731928833378:discretize(method = "interval", breaks = 3, onlycuts = TRUE),
1731928833378:color = "blue"
1731928833379:) +
1731928833379:labs(title = "Discretization: interval",
1731928833379:subtitle = "Blue lines are discretization boundaries")
1731928850661:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1731928850661:geom_vline(
1731928850661:xintercept = iris |>
1731928850661:pull(Petal.Width) |>
1731928850661:discretize(method = "frequency", breaks = 3, onlycuts = TRUE),
1731928850662:color = "blue"
1731928850662:) +
1731928850662:labs(title = "Discretization: frequency",
1731928850662:subtitle = "Blue lines are discretization boundaries")
1731928868931:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1731928868931:geom_vline(
1731928868932:xintercept = iris |>
1731928868932:pull(Petal.Width) |>
1731928868932:discretize(method = "cluster", breaks = 3, onlycuts = TRUE),
1731928868932:color = "blue"
1731928868932:) +
1731928868932:labs(title = "Discretization: cluster",
1731928868932:subtitle = "Blue lines are discretization boundaries")
1731928921602:# Variable Transformation: Standardization
1731928921602:scale_numeric <- function(x)
1731928922296:x |>
1731928922296:mutate(across(where(is.numeric),
1731928922296:function(y) (y - mean(y, na.rm = TRUE)) / sd(y, na.rm = TRUE)))
1731928923272:iris.scaled <- iris |>
1731928923272:scale_numeric()
1731928923993:iris.scaled
1731928924676:##  2       -1.14      -0.132         -1.34       -1.31 setosa
1731928924677:##  3       -1.38       0.327         -1.39       -1.31 setosa
1731928924677:##  4       -1.50       0.0979        -1.28       -1.31 setosa
1731928924677:##  5       -1.02       1.25          -1.34       -1.31 setosa
1731928924677:##  6       -0.535      1.93          -1.17       -1.05 setosa
1731928924677:##  7       -1.50       0.786         -1.34       -1.18 setosa
1731928924677:##  8       -1.02       0.786         -1.28       -1.31 setosa
1731928924677:##  9       -1.74      -0.361         -1.34       -1.31 setosa
1731928924677:## 10       -1.14       0.0979        -1.28       -1.44 setosa
1731928924677:## # ℹ 140 more rows
1731928924677:summary(iris.scaled)
1731928926109:##   Sepal.Length      Sepal.Width      Petal.Length
1731928926859:##   Sepal.Length      Sepal.Width      Petal.Length
1731928926859:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928927553:##   Sepal.Length      Sepal.Width      Petal.Length
1731928927553:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928927553:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928928045:##   Sepal.Length      Sepal.Width      Petal.Length
1731928928045:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928928045:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928928045:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928928529:##   Sepal.Length      Sepal.Width      Petal.Length
1731928928529:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928928529:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928928529:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928928529:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928928936:##   Sepal.Length      Sepal.Width      Petal.Length
1731928928936:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928928937:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928928937:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928928937:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928928937:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1731928929483:##   Sepal.Length      Sepal.Width      Petal.Length
1731928929483:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928929483:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928929483:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928929484:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928929484:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1731928929484:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1731928930113:##   Sepal.Length      Sepal.Width      Petal.Length
1731928930113:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928930114:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928930114:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928930114:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928930114:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1731928930114:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1731928930114:##   Petal.Width           Species
1731928930884:##   Sepal.Length      Sepal.Width      Petal.Length
1731928930885:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928930885:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928930885:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928930885:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928930885:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1731928930885:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1731928930885:##   Petal.Width           Species
1731928930885:##  Min.   :-1.442   setosa    :50
1731928931834:##   Sepal.Length      Sepal.Width      Petal.Length
1731928931835:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928931835:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928931835:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928931835:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928931835:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1731928931835:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1731928931835:##   Petal.Width           Species
1731928931835:##  Min.   :-1.442   setosa    :50
1731928931836:##  1st Qu.:-1.180   versicolor:50
1731928932493:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1731928932493:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928932493:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928932493:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928932493:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1731928932494:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1731928932494:##   Petal.Width           Species
1731928932494:##  Min.   :-1.442   setosa    :50
1731928932494:##  1st Qu.:-1.180   versicolor:50
1731928932494:##  Median : 0.132   virginica :50
1731928934318:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1731928934318:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928934318:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928934318:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1731928934318:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1731928934318:##   Petal.Width           Species
1731928934318:##  Min.   :-1.442   setosa    :50
1731928934319:##  1st Qu.:-1.180   versicolor:50
1731928934319:##  Median : 0.132   virginica :50
1731928934319:##  Mean   : 0.000
1731928935213:##  Median :-0.0523   Median :-0.132   Median : 0.335
1731928935213:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1731928935214:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1731928935214:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1731928935214:##   Petal.Width           Species
1731928935214:##  Min.   :-1.442   setosa    :50
1731928935214:##  1st Qu.:-1.180   versicolor:50
1731928935214:##  Median : 0.132   virginica :50
1731928935214:##  Mean   : 0.000
1731928935214:##  3rd Qu.: 0.788
1731929105597:# Minkowsky Distance
1731929105597:iris_sample <- iris.scaled |>
1731929105597:select(-Species) |>
1731929105597:slice(1:5)
1731929106464:iris_sample
1731929107324:dist(iris_sample, method = "euclidean")
1731929108106:##        1      2      3      4
1731929108106:## 2 1.1723
1731929108106:## 3 0.8428 0.5216
1731929108106:## 4 1.1000 0.4326 0.2829
1731929108106:## 5 0.2593 1.3819 0.9883 1.2460
1731929108107:dist(iris_sample, method = "manhattan")
1731929108861:##        1      2      3      4
1731929108861:## 2 1.3887
1731929108861:## 3 1.2280 0.7570
1731929108861:## 4 1.5782 0.6484 0.4635
1731929108861:## 5 0.3502 1.4973 1.3367 1.6868
1731929108861:dist(iris_sample, method = "maximum")
1731929109805:# Distances for Binary Data
1731929109805:b <- rbind(
1731929109805:c(0,0,0,1,1,1,1,0,0,1),
1731929109805:c(0,0,1,1,1,0,0,1,0,0)
1731929109805:)
1731929110753:b
1731929111545:##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
1731929111545:## [1,]    0    0    0    1    1    1    1    0    0     1
1731929111545:## [2,]    0    0    1    1    1    0    0    1    0     0
1731929111545:b_logical <- apply(b, MARGIN = 2, as.logical)
1731929112446:b_logical
1731929113291:# Hamming Distance
1731929113291:dist(b, method = "manhattan")
1731929114326:##   1
1731929114327:## 2 5
1731929114327:dist(b, method = "euclidean")^2
1731929115062:# Jaccard Index
1731929115062:dist(b, method = "binary")
1731929116040:# Distances for Mixed Data
1731929116040:people <- tibble(
1731929116040:height = c(      160,    185,    170),
1731929116040:weight = c(       52,     90,     75),
1731929116040:sex    = c( "female", "male", "male")
1731929116040:)
1731929116945:people
1731929118605:people <- people |>
1731929118605:mutate(across(where(is.character), factor))
1731929119353:people
1731929120229:# Gower’s Coefficient
1731929120229:library(proxy)
1731929121873:## Attaching package: 'proxy'
1731929121873:## The following object is masked from 'package:Matrix':
1731929121873:##
1731929121873:##     as.matrix
1731929121873:## The following objects are masked from 'package:stats':
1731929121873:##
1731929121873:##     as.dist, dist
1731929121873:## The following object is masked from 'package:base':
1731929121873:##
1731929121873:##     as.matrix
1731929121873:d_Gower <- dist(people, method = "Gower")
1731929122761:d_Gower
1731929123480:# Using Euclidean Distance with Mixed Data
1731929123480:library(caret)
1731929125306:## Loading required package: lattice
1731929125306:##
1731929125306:## Attaching package: 'caret'
1731929125306:## The following object is masked from 'package:purrr':
1731929125306:##
1731929125306:##     lift
1731929125306:data_dummy <- dummyVars(~., people) |>
1731929125306:predict(people)
1731929125308:data_dummy
1731929125308:weight_matrix <- matrix(c(1, 1, 1/2, 1/2),
1731929125308:ncol = 4,
1731929125308:nrow = nrow(data_dummy),
1731929125308:byrow = TRUE)
1731929125811:data_dummy_scaled <- scale(data_dummy) * weight_matrix
1731929126432:d_dummy <- dist(data_dummy_scaled)
1731929126927:d_dummy
1731929127388:ggplot(tibble(d_dummy, d_Gower), aes(x = d_dummy, y = d_Gower)) +
1731929127388:geom_point() +
1731929127388:geom_smooth(method = "lm", se = FALSE)
1731929129165:## Don't know how to automatically pick scale for object of
1731929129641:## Don't know how to automatically pick scale for object of
1731929129641:## type <dist>. Defaulting to continuous.
1731929130080:## Don't know how to automatically pick scale for object of
1731929130080:## type <dist>. Defaulting to continuous.
1731929130080:## Don't know how to automatically pick scale for object of
1731929132573:## Don't know how to automatically pick scale for object of
1731929132574:## type <dist>. Defaulting to continuous.
1731929132574:## Don't know how to automatically pick scale for object of
1731929132574:## type <dist>. Defaulting to continuous.
1731929156378:# More Proximity Measure
1731929156379:library(proxy)
1731929157098:pr_DB$get_entry_names()
1731929158544:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929159187:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929159192:##  [4] "Mountford"       "Fager"           "Russel"
1731929159807:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929159807:##  [4] "Mountford"       "Fager"           "Russel"
1731929159807:##  [7] "simple matching" "Hamman"          "Faith"
1731929160302:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929160302:##  [4] "Mountford"       "Fager"           "Russel"
1731929160302:##  [7] "simple matching" "Hamman"          "Faith"
1731929160302:## [10] "Tanimoto"        "Dice"            "Phi"
1731929160690:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929160690:##  [4] "Mountford"       "Fager"           "Russel"
1731929160690:##  [7] "simple matching" "Hamman"          "Faith"
1731929160690:## [10] "Tanimoto"        "Dice"            "Phi"
1731929160691:## [13] "Stiles"          "Michael"         "Mozley"
1731929161026:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929161026:##  [4] "Mountford"       "Fager"           "Russel"
1731929161026:##  [7] "simple matching" "Hamman"          "Faith"
1731929161027:## [10] "Tanimoto"        "Dice"            "Phi"
1731929161027:## [13] "Stiles"          "Michael"         "Mozley"
1731929161027:## [16] "Yule"            "Yule2"           "Ochiai"
1731929161510:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929161510:##  [4] "Mountford"       "Fager"           "Russel"
1731929161510:##  [7] "simple matching" "Hamman"          "Faith"
1731929161510:## [10] "Tanimoto"        "Dice"            "Phi"
1731929161510:## [13] "Stiles"          "Michael"         "Mozley"
1731929161510:## [16] "Yule"            "Yule2"           "Ochiai"
1731929161510:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929161826:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929161826:##  [4] "Mountford"       "Fager"           "Russel"
1731929161826:##  [7] "simple matching" "Hamman"          "Faith"
1731929161826:## [10] "Tanimoto"        "Dice"            "Phi"
1731929161826:## [13] "Stiles"          "Michael"         "Mozley"
1731929161826:## [16] "Yule"            "Yule2"           "Ochiai"
1731929161826:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929161826:## [22] "angular"         "eJaccard"        "eDice"
1731929162215:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929162215:##  [4] "Mountford"       "Fager"           "Russel"
1731929162215:##  [7] "simple matching" "Hamman"          "Faith"
1731929162215:## [10] "Tanimoto"        "Dice"            "Phi"
1731929162215:## [13] "Stiles"          "Michael"         "Mozley"
1731929162215:## [16] "Yule"            "Yule2"           "Ochiai"
1731929162215:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929162215:## [22] "angular"         "eJaccard"        "eDice"
1731929162215:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1731929162554:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1731929162554:##  [4] "Mountford"       "Fager"           "Russel"
1731929162554:##  [7] "simple matching" "Hamman"          "Faith"
1731929162554:## [10] "Tanimoto"        "Dice"            "Phi"
1731929162554:## [13] "Stiles"          "Michael"         "Mozley"
1731929162554:## [16] "Yule"            "Yule2"           "Ochiai"
1731929162554:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929162554:## [22] "angular"         "eJaccard"        "eDice"
1731929162554:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1731929162554:## [28] "Tschuprow"       "Cramer"          "Pearson"
1731929162882:##  [4] "Mountford"       "Fager"           "Russel"
1731929162882:##  [7] "simple matching" "Hamman"          "Faith"
1731929162882:## [10] "Tanimoto"        "Dice"            "Phi"
1731929162882:## [13] "Stiles"          "Michael"         "Mozley"
1731929162882:## [16] "Yule"            "Yule2"           "Ochiai"
1731929162882:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929162882:## [22] "angular"         "eJaccard"        "eDice"
1731929162882:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1731929162882:## [28] "Tschuprow"       "Cramer"          "Pearson"
1731929162883:## [31] "Gower"           "Euclidean"       "Mahalanobis"
1731929163254:##  [7] "simple matching" "Hamman"          "Faith"
1731929163254:## [10] "Tanimoto"        "Dice"            "Phi"
1731929163254:## [13] "Stiles"          "Michael"         "Mozley"
1731929163254:## [16] "Yule"            "Yule2"           "Ochiai"
1731929163254:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929163255:## [22] "angular"         "eJaccard"        "eDice"
1731929163255:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1731929163255:## [28] "Tschuprow"       "Cramer"          "Pearson"
1731929163255:## [31] "Gower"           "Euclidean"       "Mahalanobis"
1731929163255:## [34] "Bhjattacharyya"  "Manhattan"       "supremum"
1731929163436:## [10] "Tanimoto"        "Dice"            "Phi"
1731929163437:## [13] "Stiles"          "Michael"         "Mozley"
1731929163437:## [16] "Yule"            "Yule2"           "Ochiai"
1731929163437:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929163437:## [22] "angular"         "eJaccard"        "eDice"
1731929163437:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1731929163437:## [28] "Tschuprow"       "Cramer"          "Pearson"
1731929163437:## [31] "Gower"           "Euclidean"       "Mahalanobis"
1731929163437:## [34] "Bhjattacharyya"  "Manhattan"       "supremum"
1731929163437:## [37] "Minkowski"       "Canberra"        "Wave"
1731929163564:## [13] "Stiles"          "Michael"         "Mozley"
1731929163565:## [16] "Yule"            "Yule2"           "Ochiai"
1731929163565:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929163565:## [22] "angular"         "eJaccard"        "eDice"
1731929163565:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1731929163565:## [28] "Tschuprow"       "Cramer"          "Pearson"
1731929163565:## [31] "Gower"           "Euclidean"       "Mahalanobis"
1731929163565:## [34] "Bhjattacharyya"  "Manhattan"       "supremum"
1731929163565:## [37] "Minkowski"       "Canberra"        "Wave"
1731929163565:## [40] "divergence"      "Kullback"        "Bray"
1731929164228:## [16] "Yule"            "Yule2"           "Ochiai"
1731929164228:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929164228:## [22] "angular"         "eJaccard"        "eDice"
1731929164228:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1731929164228:## [28] "Tschuprow"       "Cramer"          "Pearson"
1731929164229:## [31] "Gower"           "Euclidean"       "Mahalanobis"
1731929164229:## [34] "Bhjattacharyya"  "Manhattan"       "supremum"
1731929164229:## [37] "Minkowski"       "Canberra"        "Wave"
1731929164229:## [40] "divergence"      "Kullback"        "Bray"
1731929164229:## [43] "Soergel"         "Levenshtein"     "Podani"
1731929164698:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1731929164698:## [22] "angular"         "eJaccard"        "eDice"
1731929164698:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1731929164698:## [28] "Tschuprow"       "Cramer"          "Pearson"
1731929164698:## [31] "Gower"           "Euclidean"       "Mahalanobis"
1731929164699:## [34] "Bhjattacharyya"  "Manhattan"       "supremum"
1731929164699:## [37] "Minkowski"       "Canberra"        "Wave"
1731929164699:## [40] "divergence"      "Kullback"        "Bray"
1731929164699:## [43] "Soergel"         "Levenshtein"     "Podani"
1731929164699:## [46] "Chord"           "Geodesic"        "Whittaker"
1731929319287:library(tidyverse)
1731929320992:data(iris)
1731929321822:iris <- as_tibble(iris)
1731929322553:iris
1731929323204:# Basic statistics
1731929323205:summary(iris)
1731929324023:iris |>
1731929324023:summarize(avg_Sepal.Length = mean(Sepal.Length),
1731929324023:sd_Sepal.Length = sd(Sepal.Length))
1731929324692:mean(c(1, 2, NA, 3, 4, 5))
1731929325244:## [1] NA
1731929325244:mean(c(1, 2, NA, 3, 4, 5),  na.rm = TRUE)
1731929325872:iris |>
1731929325872:summarize(
1731929325872:avg_Sepal.Length = mean(Sepal.Length),
1731929325872:trimmed_avg_Sepal.Length = mean(Sepal.Length, trim = .1)
1731929325872:)
1731929326541:iris |> summarize(across(where(is.numeric), mean))
1731929327634:## # A tibble: 1 × 4
1731929327634:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1731929327635:##          <dbl>       <dbl>        <dbl>       <dbl>
1731929327635:## 1         5.84        3.06         3.76        1.20
1731929327635:iris |> summarize(across(where(is.numeric), sd))
1731929328556:## # A tibble: 1 × 4
1731929328556:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1731929328556:##          <dbl>       <dbl>        <dbl>       <dbl>
1731929328556:## 1        0.828       0.436         1.77       0.762
1731929328557:iris |> summarize(across(where(is.numeric),
1731929328557:list(min = min,
1731929328557:median = median,
1731929328557:max = max)))
1731929329241:iris |> summarize(across(where(is.numeric), mad))
1731929329966:# Grouped Operations and Calculations
1731929329966:iris |>
1731929329966:group_by(Species) |>
1731929329966:summarize(across(Sepal.Length, mean))
1731929330705:## # A tibble: 3 × 2
1731929330705:##   Species    Sepal.Length
1731929330705:##   <fct>             <dbl>
1731929330705:## 1 setosa             5.01
1731929330706:## 2 versicolor         5.94
1731929330706:## 3 virginica          6.59
1731929330706:iris |>
1731929330706:group_by(Species) |>
1731929330706:summarize(across(where(is.numeric), mean))
1731929331429:res.aov <- aov(Sepal.Length ~ Species, data = iris)
1731929332673:summary(res.aov)
1731929333709:##              Df Sum Sq Mean Sq F value Pr(>F)
1731929333709:## Species       2   63.2   31.61     119 <2e-16 ***
1731929333710:## Residuals   147   39.0    0.27
1731929333710:## ---
1731929333710:## Signif. codes:
1731929333710:## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
1731929333710:TukeyHSD(res.aov)
1731929334550:# Tabulate data
1731929334550:iris |>
1731929334550:group_by(Species) |>
1731929334550:summarize(n())
1731929335463:iris_ord <- iris |>
1731929335463:mutate(across(where(is.numeric),
1731929335463:function(x) cut(x, 3, labels = c("short", "medium", "long"),
1731929335464:ordered = TRUE)))
1731929336421:iris_ord
1731929337484:##  2 short        medium      short        short       setosa
1731929337484:##  3 short        medium      short        short       setosa
1731929337484:##  4 short        medium      short        short       setosa
1731929337485:##  5 short        medium      short        short       setosa
1731929337485:##  6 short        long        short        short       setosa
1731929337485:##  7 short        medium      short        short       setosa
1731929337485:##  8 short        medium      short        short       setosa
1731929337485:##  9 short        medium      short        short       setosa
1731929337485:## 10 short        medium      short        short       setosa
1731929337485:## # ℹ 140 more rows
1731929337485:summary(iris_ord)
1731929338321:tbl <- iris_ord |>
1731929338321:select(Sepal.Length, Species) |>
1731929338321:table()
1731929339255:tbl
1731929340007:iris_ord |>
1731929340007:select(Species, Sepal.Length) |>
1731929340007:### Relationship Between Nominal and Ordinal Features
1731929340007:pivot_longer(cols = Sepal.Length) |>
1731929340007:group_by(Species, value) |>
1731929340007:count() |>
1731929340007:ungroup() |>
1731929340007:pivot_wider(names_from = Species, values_from = n)
1731929340722:tbl |>
1731929340722:chisq.test()
1731929341502:fisher.test(tbl)
1731929342756:##
1731929343342:##
1731929343342:##  Fisher's Exact Test for Count Data
1731929343847:##
1731929343847:##  Fisher's Exact Test for Count Data
1731929343847:##
1731929344367:##
1731929344367:##  Fisher's Exact Test for Count Data
1731929344367:##
1731929344367:## data:  tbl
1731929392699:# Percentiles (Quantiles)
1731929392699:iris |>
1731929392699:pull(Petal.Length) |>
1731929392699:quantile()
1731929456207:library(tidyverse)
1731929456209:data(iris)
1731929456226:iris <- as_tibble(iris)
1731929456228:iris
1731929456302:## # A tibble: 150 × 5
1731929456302:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1731929456302:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1731929456302:##  1          5.1         3.5          1.4         0.2 setosa
1731929456302:##  2          4.9         3            1.4         0.2 setosa
1731929456302:##  3          4.7         3.2          1.3         0.2 setosa
1731929456302:##  4          4.6         3.1          1.5         0.2 setosa
1731929456302:##  5          5           3.6          1.4         0.2 setosa
1731929456302:##  6          5.4         3.9          1.7         0.4 setosa
1731929456302:##  7          4.6         3.4          1.4         0.3 setosa
1731929456302:##  8          5           3.4          1.5         0.2 setosa
1731929456302:##  9          4.4         2.9          1.4         0.2 setosa
1731929456302:## 10          4.9         3.1          1.5         0.1 setosa
1731929456302:## # ℹ 140 more rows
1731929456302:# Basic statistics
1731929456302:summary(iris)
1731929456304:##   Sepal.Length   Sepal.Width    Petal.Length   Petal.Width
1731929456304:##  Min.   :4.30   Min.   :2.00   Min.   :1.00   Min.   :0.1
1731929456304:##  1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60   1st Qu.:0.3
1731929456304:##  Median :5.80   Median :3.00   Median :4.35   Median :1.3
1731929456304:##  Mean   :5.84   Mean   :3.06   Mean   :3.76   Mean   :1.2
1731929456304:##  3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10   3rd Qu.:1.8
1731929456304:##  Max.   :7.90   Max.   :4.40   Max.   :6.90   Max.   :2.5
1731929456304:##        Species
1731929456304:##  setosa    :50
1731929456304:##  versicolor:50
1731929456304:##  virginica :50
1731929456304:##
1731929456304:##
1731929456304:##
1731929464271:iris |>
1731929464271:summarize(avg_Sepal.Length = mean(Sepal.Length),
1731929464272:sd_Sepal.Length = sd(Sepal.Length))
1731929464298:## # A tibble: 1 × 2
1731929464298:##   avg_Sepal.Length sd_Sepal.Length
1731929464298:##              <dbl>           <dbl>
1731929464299:## 1             5.84           0.828
1731929468001:mean(c(1, 2, NA, 3, 4, 5))
1731929468002:## [1] NA
1731929468002:mean(c(1, 2, NA, 3, 4, 5),  na.rm = TRUE)
1731929468002:## [1] 3
1731929472166:iris |>
1731929472167:summarize(
1731929472167:avg_Sepal.Length = mean(Sepal.Length),
1731929472167:trimmed_avg_Sepal.Length = mean(Sepal.Length, trim = .1)
1731929472167:)
1731929472190:## # A tibble: 1 × 2
1731929472190:##   avg_Sepal.Length trimmed_avg_Sepal.Length
1731929472190:##              <dbl>                    <dbl>
1731929472190:## 1             5.84                     5.81
1731929479449:iris |> summarize(across(where(is.numeric), mean))
1731929479481:## # A tibble: 1 × 4
1731929479481:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1731929479481:##          <dbl>       <dbl>        <dbl>       <dbl>
1731929479481:## 1         5.84        3.06         3.76        1.20
1731929479481:iris |> summarize(across(where(is.numeric), sd))
1731929479503:## # A tibble: 1 × 4
1731929479503:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1731929479503:##          <dbl>       <dbl>        <dbl>       <dbl>
1731929479503:## 1        0.828       0.436         1.77       0.762
1731929479503:iris |> summarize(across(where(is.numeric),
1731929479503:list(min = min,
1731929479503:median = median,
1731929479503:max = max)))
1731929483569:## # A tibble: 1 × 12
1731929483570:##   Sepal.Length_min Sepal.Length_median Sepal.Length_max
1731929483570:##              <dbl>               <dbl>            <dbl>
1731929483570:## 1              4.3                 5.8              7.9
1731929483570:## # ℹ 9 more variables: Sepal.Width_min <dbl>,
1731929483570:## #   Sepal.Width_median <dbl>, Sepal.Width_max <dbl>,
1731929483570:## #   Petal.Length_min <dbl>, Petal.Length_median <dbl>,
1731929483570:## #   Petal.Length_max <dbl>, Petal.Width_min <dbl>,
1731929483570:## #   Petal.Width_median <dbl>, Petal.Width_max <dbl>
1731929487985:iris |> summarize(across(where(is.numeric), mad))
1731929488013:## # A tibble: 1 × 4
1731929488013:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1731929488013:##          <dbl>       <dbl>        <dbl>       <dbl>
1731929488013:## 1         1.04       0.445         1.85        1.04
1731929498701:# Grouped Operations and Calculations
1731929498701:iris |>
1731929498701:group_by(Species) |>
1731929498701:summarize(across(Sepal.Length, mean))
1731929498789:## # A tibble: 3 × 2
1731929498789:##   Species    Sepal.Length
1731929498789:##   <fct>             <dbl>
1731929498789:## 1 setosa             5.01
1731929498789:## 2 versicolor         5.94
1731929498789:## 3 virginica          6.59
1731929498789:iris |>
1731929498789:group_by(Species) |>
1731929498789:summarize(across(where(is.numeric), mean))
1731929498804:## # A tibble: 3 × 5
1731929498805:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1731929498805:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1731929498805:## 1 setosa           5.01        3.43         1.46       0.246
1731929498805:## 2 versico…         5.94        2.77         4.26       1.33
1731929498805:## 3 virgini…         6.59        2.97         5.55       2.03
1731929505219:res.aov <- aov(Sepal.Length ~ Species, data = iris)
1731929505222:summary(res.aov)
1731929505225:##              Df Sum Sq Mean Sq F value Pr(>F)
1731929505225:## Species       2   63.2   31.61     119 <2e-16 ***
1731929505225:## Residuals   147   39.0    0.27
1731929505226:## ---
1731929505226:## Signif. codes:
1731929505226:## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
1731929505226:TukeyHSD(res.aov)
1731929505232:##   Tukey multiple comparisons of means
1731929505232:##     95% family-wise confidence level
1731929505232:##
1731929505232:## Fit: aov(formula = Sepal.Length ~ Species, data = iris)
1731929505232:##
1731929505232:## $Species
1731929505232:##                       diff    lwr    upr p adj
1731929505232:## versicolor-setosa    0.930 0.6862 1.1738     0
1731929505232:## virginica-setosa     1.582 1.3382 1.8258     0
1731929505232:## virginica-versicolor 0.652 0.4082 0.8958     0
1731929508346:# Tabulate data
1731929508346:iris |>
1731929508346:group_by(Species) |>
1731929508346:summarize(n())
1731929508372:## # A tibble: 3 × 2
1731929508372:##   Species    `n()`
1731929508372:##   <fct>      <int>
1731929508373:## 1 setosa        50
1731929508373:## 2 versicolor    50
1731929508373:## 3 virginica     50
1731929512577:iris_ord <- iris |>
1731929512577:mutate(across(where(is.numeric),
1731929512577:function(x) cut(x, 3, labels = c("short", "medium", "long"),
1731929512577:ordered = TRUE)))
1731929517885:iris_ord
1731929517919:## # A tibble: 150 × 5
1731929517919:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1731929517919:##    <ord>        <ord>       <ord>        <ord>       <fct>
1731929517919:##  1 short        medium      short        short       setosa
1731929517919:##  2 short        medium      short        short       setosa
1731929517919:##  3 short        medium      short        short       setosa
1731929517919:##  4 short        medium      short        short       setosa
1731929517919:##  5 short        medium      short        short       setosa
1731929517919:##  6 short        long        short        short       setosa
1731929517919:##  7 short        medium      short        short       setosa
1731929517919:##  8 short        medium      short        short       setosa
1731929517919:##  9 short        medium      short        short       setosa
1731929517919:## 10 short        medium      short        short       setosa
1731929517919:## # ℹ 140 more rows
1731929517919:summary(iris_ord)
1731929517920:##  Sepal.Length Sepal.Width Petal.Length Petal.Width
1731929517921:##  short :59    short :47   short :50    short :50
1731929517921:##  medium:71    medium:88   medium:54    medium:54
1731929517921:##  long  :20    long  :15   long  :46    long  :46
1731929517921:##        Species
1731929517921:##  setosa    :50
1731929517921:##  versicolor:50
1731929517921:##  virginica :50
1731929522216:tbl <- iris_ord |>
1731929522217:select(Sepal.Length, Species) |>
1731929522217:table()
1731929522219:tbl
1731929522220:##             Species
1731929522220:## Sepal.Length setosa versicolor virginica
1731929522220:##       short      47         11         1
1731929522220:##       medium      3         36        32
1731929522221:##       long        0          3        17
1731929526924:iris_ord |>
1731929526924:select(Species, Sepal.Length) |>
1731929526924:### Relationship Between Nominal and Ordinal Features
1731929526925:pivot_longer(cols = Sepal.Length) |>
1731929526925:group_by(Species, value) |>
1731929526925:count() |>
1731929526925:ungroup() |>
1731929526925:pivot_wider(names_from = Species, values_from = n)
1731929526967:## # A tibble: 3 × 4
1731929526967:##   value  setosa versicolor virginica
1731929526967:##   <ord>   <int>      <int>     <int>
1731929526967:## 1 short      47         11         1
1731929526967:## 2 medium      3         36        32
1731929526967:## 3 long       NA          3        17
1731929530863:tbl |>
1731929530863:chisq.test()
1731929530865:##
1731929530865:##  Pearson's Chi-squared test
1731929530865:##
1731929530865:## data:  tbl
1731929530865:## X-squared = 112, df = 4, p-value <2e-16
1731929535195:fisher.test(tbl)
1731929535201:##
1731929535201:##  Fisher's Exact Test for Count Data
1731929535201:##
1731929535202:## data:  tbl
1731929535202:## p-value <2e-16
1731929535202:## alternative hypothesis: two.sided
1731929538865:# Percentiles (Quantiles)
1731929538865:iris |>
1731929538865:pull(Petal.Length) |>
1731929538865:quantile()
1731929538866:##   0%  25%  50%  75% 100%
1731929538866:## 1.00 1.60 4.35 5.10 6.90
1731929542885:iris |>
1731929542885:summarize(IQR =
1731929542885:quantile(Petal.Length, probs = 0.75) -
1731929542885:quantile(Petal.Length, probs = 0.25))
1731929542908:## # A tibble: 1 × 1
1731929542908:##     IQR
1731929542908:##   <dbl>
1731929542908:## 1   3.5
1731929579830:# Pearson Correlation
1731929579830:cc <- iris |>
1731929579830:select(-Species) |>
1731929579831:cor()
1731929580612:cc
1731929581240:ggplot(iris, aes(Petal.Length, Petal.Width)) +
1731929581240:geom_point() +
1731929581240:geom_smooth(method = "lm")
1731929603967:with(iris, cor(Petal.Length, Petal.Width))
1731929604747:with(iris, cor.test(Petal.Length, Petal.Width))
1731929605693:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1731929605693:geom_point() +
1731929605693:geom_smooth(method = "lm")
1731929624868:with(iris, cor(Sepal.Length, Sepal.Width))
1731929625609:## [1] -0.1176
1731929625610:with(iris, cor.test(Sepal.Length, Sepal.Width))
1731929626924:##
1731929627527:##
1731929627527:##  Pearson's product-moment correlation
1731929628126:##
1731929628126:##  Pearson's product-moment correlation
1731929628126:##
1731929628697:##
1731929628697:##  Pearson's product-moment correlation
1731929628697:##
1731929628697:## data:  Sepal.Length and Sepal.Width
1731929629215:##
1731929629215:##  Pearson's product-moment correlation
1731929629215:##
1731929629215:## data:  Sepal.Length and Sepal.Width
1731929629215:## t = -1.4, df = 148, p-value = 0.2
1731929629682:##
1731929629683:##  Pearson's product-moment correlation
1731929629683:##
1731929629683:## data:  Sepal.Length and Sepal.Width
1731929629683:## t = -1.4, df = 148, p-value = 0.2
1731929629683:## alternative hypothesis: true correlation is not equal to 0
1731929629911:##
1731929629912:##  Pearson's product-moment correlation
1731929629912:##
1731929629912:## data:  Sepal.Length and Sepal.Width
1731929629912:## t = -1.4, df = 148, p-value = 0.2
1731929629912:## alternative hypothesis: true correlation is not equal to 0
1731929629912:## 95 percent confidence interval:
1731929630284:##
1731929630284:##  Pearson's product-moment correlation
1731929630284:##
1731929630284:## data:  Sepal.Length and Sepal.Width
1731929630284:## t = -1.4, df = 148, p-value = 0.2
1731929630284:## alternative hypothesis: true correlation is not equal to 0
1731929630285:## 95 percent confidence interval:
1731929630285:##  -0.27269  0.04351
1731929630751:##
1731929630751:##  Pearson's product-moment correlation
1731929630751:##
1731929630751:## data:  Sepal.Length and Sepal.Width
1731929630751:## t = -1.4, df = 148, p-value = 0.2
1731929630751:## alternative hypothesis: true correlation is not equal to 0
1731929630751:## 95 percent confidence interval:
1731929630751:##  -0.27269  0.04351
1731929630751:## sample estimates:
1731929631274:##
1731929631275:##  Pearson's product-moment correlation
1731929631275:##
1731929631275:## data:  Sepal.Length and Sepal.Width
1731929631275:## t = -1.4, df = 148, p-value = 0.2
1731929631275:## alternative hypothesis: true correlation is not equal to 0
1731929631275:## 95 percent confidence interval:
1731929631275:##  -0.27269  0.04351
1731929631275:## sample estimates:
1731929631275:##     cor
1731929671081:# Rank Correlation
1731929671082:iris_ord <- iris |>
1731929671082:mutate(across(where(is.numeric),
1731929671082:function(x) cut(x, 3,
1731929671082:labels = c("short", "medium", "long"),
1731929671082:ordered = TRUE)))
1731929671924:iris_ord
1731929672501:##  2 short        medium      short        short       setosa
1731929672501:##  3 short        medium      short        short       setosa
1731929672502:##  4 short        medium      short        short       setosa
1731929672502:##  5 short        medium      short        short       setosa
1731929672502:##  6 short        long        short        short       setosa
1731929672502:##  7 short        medium      short        short       setosa
1731929672502:##  8 short        medium      short        short       setosa
1731929672502:##  9 short        medium      short        short       setosa
1731929672502:## 10 short        medium      short        short       setosa
1731929672502:## # ℹ 140 more rows
1731929672502:summary(iris_ord)
1731929673049:##  Sepal.Length Sepal.Width Petal.Length Petal.Width
1731929673049:##  short :59    short :47   short :50    short :50
1731929673049:##  medium:71    medium:88   medium:54    medium:54
1731929673050:##  long  :20    long  :15   long  :46    long  :46
1731929673050:##        Species
1731929673050:##  setosa    :50
1731929673050:##  versicolor:50
1731929673050:##  virginica :50
1731929673050:iris_ord |>
1731929673050:pull(Sepal.Length)
1731929673650:iris_ord |>
1731929673650:select(-Species) |>
1731929673650:sapply(xtfrm) |>
1731929673650:cor(method = "kendall")
1731929674161:iris_ord |>
1731929674161:select(-Species) |>
1731929674161:sapply(xtfrm) |>
1731929674161:cor(method = "spearman")
1731929674650:iris |>
1731929674650:select(-Species) |>
1731929674650:cor()
1731929675546:##              Sepal.Length Sepal.Width Petal.Length
1731929675836:##              Sepal.Length Sepal.Width Petal.Length
1731929675837:## Sepal.Length       1.0000     -0.1176       0.8718
1731929676135:##              Sepal.Length Sepal.Width Petal.Length
1731929676135:## Sepal.Length       1.0000     -0.1176       0.8718
1731929676136:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929676380:##              Sepal.Length Sepal.Width Petal.Length
1731929676380:## Sepal.Length       1.0000     -0.1176       0.8718
1731929676380:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929676380:## Petal.Length       0.8718     -0.4284       1.0000
1731929676531:##              Sepal.Length Sepal.Width Petal.Length
1731929676531:## Sepal.Length       1.0000     -0.1176       0.8718
1731929676531:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929676531:## Petal.Length       0.8718     -0.4284       1.0000
1731929676531:## Petal.Width        0.8179     -0.3661       0.9629
1731929676658:##              Sepal.Length Sepal.Width Petal.Length
1731929676658:## Sepal.Length       1.0000     -0.1176       0.8718
1731929676658:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929676658:## Petal.Length       0.8718     -0.4284       1.0000
1731929676658:## Petal.Width        0.8179     -0.3661       0.9629
1731929676658:##              Petal.Width
1731929676786:##              Sepal.Length Sepal.Width Petal.Length
1731929676786:## Sepal.Length       1.0000     -0.1176       0.8718
1731929676786:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929676786:## Petal.Length       0.8718     -0.4284       1.0000
1731929676786:## Petal.Width        0.8179     -0.3661       0.9629
1731929676787:##              Petal.Width
1731929676787:## Sepal.Length      0.8179
1731929676906:##              Sepal.Length Sepal.Width Petal.Length
1731929676906:## Sepal.Length       1.0000     -0.1176       0.8718
1731929676906:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929676907:## Petal.Length       0.8718     -0.4284       1.0000
1731929676907:## Petal.Width        0.8179     -0.3661       0.9629
1731929676907:##              Petal.Width
1731929676907:## Sepal.Length      0.8179
1731929676907:## Sepal.Width      -0.3661
1731929677019:##              Sepal.Length Sepal.Width Petal.Length
1731929677019:## Sepal.Length       1.0000     -0.1176       0.8718
1731929677019:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929677019:## Petal.Length       0.8718     -0.4284       1.0000
1731929677019:## Petal.Width        0.8179     -0.3661       0.9629
1731929677019:##              Petal.Width
1731929677019:## Sepal.Length      0.8179
1731929677019:## Sepal.Width      -0.3661
1731929677019:## Petal.Length      0.9629
1731929677137:##              Sepal.Length Sepal.Width Petal.Length
1731929677137:## Sepal.Length       1.0000     -0.1176       0.8718
1731929677137:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929677137:## Petal.Length       0.8718     -0.4284       1.0000
1731929677137:## Petal.Width        0.8179     -0.3661       0.9629
1731929677137:##              Petal.Width
1731929677137:## Sepal.Length      0.8179
1731929677137:## Sepal.Width      -0.3661
1731929677137:## Petal.Length      0.9629
1731929677137:## Petal.Width       1.0000
1731929677242:##              Sepal.Length Sepal.Width Petal.Length
1731929677243:## Sepal.Length       1.0000     -0.1176       0.8718
1731929677243:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929677243:## Petal.Length       0.8718     -0.4284       1.0000
1731929677243:## Petal.Width        0.8179     -0.3661       0.9629
1731929677243:##              Petal.Width
1731929677243:## Sepal.Length      0.8179
1731929677243:## Sepal.Width      -0.3661
1731929677243:## Petal.Length      0.9629
1731929677243:## Petal.Width       1.0000
1731929677352:##              Sepal.Length Sepal.Width Petal.Length
1731929677352:## Sepal.Length       1.0000     -0.1176       0.8718
1731929677352:## Sepal.Width       -0.1176      1.0000      -0.4284
1731929677352:## Petal.Length       0.8718     -0.4284       1.0000
1731929677352:## Petal.Width        0.8179     -0.3661       0.9629
1731929677352:##              Petal.Width
1731929677353:## Sepal.Length      0.8179
1731929677353:## Sepal.Width      -0.3661
1731929677353:## Petal.Length      0.9629
1731929677353:## Petal.Width       1.0000
1731929706289:# Density
1731929706289:ggplot(iris, aes(x = Petal.Length, y = 0)) + geom_point()
1731929721923:# Histograms
1731929721924:ggplot(iris, aes(x = Petal.Length)) +
1731929721924:geom_histogram() +
1731929721924:geom_rug(alpha = 1/2)
1731929733598:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1731929733598:geom_bin2d(bins = 10) +
1731929733599:geom_jitter(color = "red")
1731929747148:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1731929747148:geom_hex(bins = 10) +
1731929747148:geom_jitter(color = "red")
1731929778186:# Kernel Density Estimate (KDE)
1731929778186:ggplot(iris, aes(Petal.Length)) +
1731929778186:geom_density(bw = .2) +
1731929778187:geom_rug(alpha = 1/2)
1731929779583:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1731929779583:geom_density_2d_filled() +
1731929779583:geom_jitter()
1731929821580:# Histogram
1731929821580:ggplot(iris, aes(Petal.Width)) + geom_histogram(bins = 20)
1731929834824:ggplot(iris, aes(Petal.Width)) +
1731929834824:geom_histogram(bins = 20, aes(fill = Species))
1731929845166:ggplot(iris, aes(Petal.Width)) +
1731929845166:geom_histogram(bins = 20, aes(fill = Species), alpha = .5, position = 'identity')
1731929880396:# Boxplot
1731929880396:ggplot(iris, aes(Species, Sepal.Length)) +
1731929880397:geom_boxplot()
1731929881342:iris |> group_by(Species) |>
1731929881342:summarize(across(where(is.numeric), median))
1731929887098:library(tidyr)
1731929888176:iris_long <- iris |>
1731929888176:mutate(id = row_number()) |>
1731929888176:pivot_longer(1:4)
1731929889025:ggplot(iris_long, aes(name, value)) +
1731929889025:geom_boxplot() +
1731929889025:labs(y = "Original value")
1731929908585:library(tidyr)
1731929909250:iris_long_scaled <- iris |>
1731929909250:scale_numeric() |>
1731929909250:mutate(id = row_number()) |> pivot_longer(1:4)
1731929910082:ggplot(iris_long_scaled, aes(name, value)) +
1731929910082:geom_boxplot() +
1731929910082:labs(y = "Scaled value")
1731929950191:# Scatter plot
1731929950191:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1731929950191:geom_point(aes(color = Species))
1731929954959:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1731929954959:geom_point(aes(color = Species)) +
1731929954959:geom_smooth(method = "lm")
1731929959874:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1731929959874:geom_point(aes(color = Species)) +
1731929959874:geom_smooth(method = "lm", aes(color = Species))
1731929985753:# Scatter Plot Matrix
1731929985753:pairs(iris, col = iris$Species)
1731929994566:library("GGally")
1731929995199:ggpairs(iris,  aes(color = Species), progress = FALSE)
1731929998815:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999053:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999053:## `binwidth`.
1731929999215:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999216:## `binwidth`.
1731929999216:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999366:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999366:## `binwidth`.
1731929999366:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999366:## `binwidth`.
1731929999494:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999494:## `binwidth`.
1731929999494:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999494:## `binwidth`.
1731929999494:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999631:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999631:## `binwidth`.
1731929999631:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999632:## `binwidth`.
1731929999632:## `stat_bin()` using `bins = 30`. Pick better value with
1731929999632:## `binwidth`.
1731930000237:## `stat_bin()` using `bins = 30`. Pick better value with
1731930000238:## `binwidth`.
1731930000238:## `stat_bin()` using `bins = 30`. Pick better value with
1731930000238:## `binwidth`.
1731930000238:## `stat_bin()` using `bins = 30`. Pick better value with
1731930000238:## `binwidth`.
1731930000238:## `stat_bin()` using `bins = 30`. Pick better value with
1731930030454:# Matrix Visualization
1731930030454:iris_matrix <- iris |> select(-Species) |> as.matrix()
1731930031392:iris_long <- as_tibble(iris_matrix) |>
1731930031392:mutate(id = row_number()) |>
1731930031393:pivot_longer(1:4)
1731930032330:head(iris_long)
1731930033247:## # A tibble: 6 × 3
1731930033247:##      id name         value
1731930033247:##   <int> <chr>        <dbl>
1731930033247:## 1     1 Sepal.Length   5.1
1731930033247:## 2     1 Sepal.Width    3.5
1731930033248:## 3     1 Petal.Length   1.4
1731930033248:## 4     1 Petal.Width    0.2
1731930033248:## 5     2 Sepal.Length   4.9
1731930033248:## 6     2 Sepal.Width    3
1731930033248:ggplot(iris_long, aes(x = name, y = id)) +
1731930033248:geom_tile(aes(fill = value))
1731930044625:library(seriation)
1731930046068:## Registered S3 methods overwritten by 'registry':
1731930046069:##   method               from
1731930046069:##   print.registry_field proxy
1731930046069:##   print.registry_entry proxy
1731930046069:##
1731930046069:## Attaching package: 'seriation'
1731930046069:## The following object is masked from 'package:lattice':
1731930046069:##
1731930046069:##     panel.lines
1731930046069:ggpimage(iris_matrix, prop = FALSE)
1731930055075:iris_scaled <- scale(iris_matrix)
1731930056701:ggpimage(iris_scaled, prop = FALSE)
1731930066113:ggpimage(iris_scaled, order = seriate(iris_scaled), prop = FALSE)
1731930093824:# Correlation Matrix
1731930093824:cm1 <- iris |>
1731930093824:select(-Species) |>
1731930093824:as.matrix() |>
1731930093824:cor()
1731930094899:cm1
1731930095733:library(ggcorrplot)
1731930097198:ggcorrplot(cm1)
1731930110041:gghmap(cm1, prop = TRUE)
1731930120700:cm2 <- iris |>
1731930120701:select(-Species) |>
1731930120701:as.matrix() |>
1731930120701:t() |>
1731930120701:cor()
1731930121735:ggcorrplot(cm2)
1731930138253:# Parallel Coordinates Plot
1731930138253:library(GGally)
1731930139344:ggparcoord(iris, columns = 1:4, groupColumn = 5)
1731930147361:o <- seriate(as.dist(1-cor(iris[,1:4])), method = "BBURCG")
1731930148248:get_order(o)
1731930149085:## Petal.Length  Petal.Width Sepal.Length  Sepal.Width
1731930149085:##            3            4            1            2
1731930149085:ggparcoord(iris,
1731930149085:columns = as.integer(get_order(o)),
1731930149085:groupColumn = 5)
1731930186514:# Star Plot
1731930186514:flowers_5 <- iris[c(1:5, 51:55, 101:105), ]
1731930187333:flowers_5
1731930188310:##  6          7           3.2          4.7         1.4 versic…
1731930188310:##  7          6.4         3.2          4.5         1.5 versic…
1731930188310:##  8          6.9         3.1          4.9         1.5 versic…
1731930188310:##  9          5.5         2.3          4           1.3 versic…
1731930188311:## 10          6.5         2.8          4.6         1.5 versic…
1731930188311:## 11          6.3         3.3          6           2.5 virgin…
1731930188311:## 12          5.8         2.7          5.1         1.9 virgin…
1731930188311:## 13          7.1         3            5.9         2.1 virgin…
1731930188311:## 14          6.3         2.9          5.6         1.8 virgin…
1731930188311:## 15          6.5         3            5.8         2.2 virgin…
1731930188311:stars(flowers_5[, 1:4], ncol = 5)
1731930612402:knitr::opts_chunk$set(echo = TRUE)
1731930612403:library(palmerpenguins)
1731930612444:library(tidyverse)
1731930612445:library(GGally)
1731930618560:# Display dataset structure
1731930618560:glimpse(penguins)
1731930624705:# Check for missing values
1731930624705:missing_values <- penguins %>%
1731930624705:summarise(across(everything(), ~sum(is.na(.))))
1731930627323:# Total missing values
1731930627323:total_missing <- sum(is.na(penguins))
1731930629695:list(missing_values, total_missing)
1731930632607:```{r penguins}
1731930704547:```{r setup, include=FALSE}
1731930708441:knitr::opts_chunk$set(echo = TRUE)
1731930708442:library(palmerpenguins)
1731930708444:library(tidyverse)
1731930708445:library(GGally)
1731930711265:knitr::opts_chunk$set(echo = TRUE)
1731930711266:library(palmerpenguins)
1731930711267:library(tidyverse)
1731930711267:library(GGally)
1731930713623:summary(penguins)
1731930777075:penguins %>%
1731930777075:group_by(species) %>%
1731930777075:summarise(across(where(is.numeric), mean, na.rm = TRUE))
1731931404709:knitr::opts_chunk$set(echo = TRUE)
1731931404712:library(palmerpenguins)
1731931404713:library(tidyverse)
1731931404714:library(GGally)
1731931416800:knitr::opts_chunk$set(echo = TRUE)
1731931416801:library(palmerpenguins)
1731931416803:library(tidyverse)
1731931416804:library(GGally)
1731931419117:# Load the penguins dataset
1731931419118:data(penguins)
1731931419125:# Display structure of the dataset
1731931419126:glimpse(penguins)
1731931447450:# Display structure of the dataset
1731931447451:str(penguins)
1731931451101:# Display structure of the dataset
1731931451102:str(penguins)
1731931474512:# Count missing values for each column
1731931474513:missing_data <- penguins %>% summarise(across(everything(), ~sum(is.na(.))))
1731931474534:# Total missing values
1731931474534:total_missing <- sum(is.na(penguins))
1731931474536:# Print results
1731931474537:missing_data
1731931474547:total_missing
1731931494803:# Summary statistics for all variables
1731931494804:summary(penguins)
1731931494817:# Mean and standard deviation for numeric columns
1731931494818:penguins %>%
1731931494820:summarise(across(where(is.numeric), list(mean = ~mean(., na.rm = TRUE),
1731931494821:sd = ~sd(., na.rm = TRUE))))
1731931513388:penguins %>%
1731931513389:group_by(species) %>%
1731931513390:summarise(across(where(is.numeric), mean, na.rm = TRUE))
1731931579767:penguins %>%
1731931579768:group_by(island) %>%
1731931579769:summarise(across(where(is.numeric), mean, na.rm = TRUE))
1731931582656:penguins %>%
1731931582657:group_by(sex) %>%
1731931582658:summarise(across(where(is.numeric), mean, na.rm = TRUE))
1731931587357:# Compute the correlation matrix for numeric variables
1731931587358:cor_matrix <- penguins %>%
1731931587358:select(where(is.numeric)) %>%
1731931587359:cor(use = "complete.obs")
1731931587365:# Display the correlation matrix
1731931587367:cor_matrix
1731931591867:penguins %>%
1731931591868:ggplot(aes(x = bill_length_mm, fill = species)) +
1731931591869:geom_histogram(binwidth = 2, alpha = 0.7) +
1731931591870:theme_minimal() +
1731931591872:labs(title = "Bill Length Distribution by Species", x = "Bill Length (mm)", y = "Frequency")
1731931617931:penguins %>%
1731931617933:ggplot(aes(x = bill_length_mm, fill = species)) +
1731931617934:geom_histogram(binwidth = 2, alpha = 0.7) +
1731931617935:theme_minimal() +
1731931617936:labs(title = "Bill Length Distribution by Species", x = "Bill Length (mm)", y = "Frequency")
1731931620156:penguins %>%
1731931620158:ggplot(aes(x = species, y = body_mass_g, fill = species)) +
1731931620159:geom_boxplot() +
1731931620161:theme_minimal() +
1731931620162:labs(title = "Body Mass by Species", x = "Species", y = "Body Mass (g)")
1731931654361:penguins %>%
1731931654362:ggplot(aes(x = bill_length_mm, y = flipper_length_mm, color = species)) +
1731931654363:geom_point() +
1731931654364:theme_minimal() +
1731931654365:labs(title = "Bill Length vs Flipper Length", x = "Bill Length (mm)", y = "Flipper Length (mm)")
1731931655945:penguins %>%
1731931655946:select(where(is.numeric)) %>%
1731931655946:ggpairs()
1731935128592:# Chapter 3: Classification: Basic Concepts
1731935128593:# Shakira B. Regalado
1731935128593:# BSIT 3B
1731935140596:pkgs <- c("caret", "FSelector", "lattice", "mlbench",
1731935140597:"palmerpenguins", "party", "pROC", "rpart",
1731935140597:"rpart.plot", "tidyverse")
1731935143688:pkgs_install <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
1731935143808:if(length(pkgs_install)) install.packages(pkgs_install)
1731935170426:# The Zoo Dataset
1731935170426:data(Zoo, package="mlbench")
1731935173284:head(Zoo)
1731935174085:library(tidyverse)
1731935175628:as_tibble(Zoo, rownames = "animal")
1731935176341:Zoo <- Zoo |>
1731935176341:mutate(across(where(is.logical),
1731935176341:function (x) factor(x, levels = c(TRUE, FALSE)))) |>
1731935176341:mutate(across(where(is.character), factor))
1731935177701:summary(Zoo)
1731935178324:# Decision Tree Classifiers
1731935178324:library(rpart)
1731935179170:# Create Tree
1731935179170:tree_default <- Zoo |>
1731935179171:rpart(type ~ ., data = _)
1731935179860:tree_default
1731935180442:library(rpart.plot)
1731935181614:rpart.plot(tree_default, extra = 2)
1731935326863:# Make Predictions for New Data
1731935326863:my_animal <- tibble(hair = TRUE, feathers = TRUE, eggs = FALSE,
1731935326864:milk = TRUE, airborne = TRUE, aquatic = FALSE, predator = TRUE,
1731935326864:toothed = TRUE, backbone = TRUE, breathes = TRUE,
1731935326864:venomous = FALSE, fins = FALSE, legs = 4, tail = TRUE,
1731935326864:domestic = FALSE, catsize = FALSE, type = NA)
1731935328299:my_animal <- my_animal |>
1731935328299:mutate(across(where(is.logical),
1731935328299:function(x) factor(x, levels = c(TRUE, FALSE))))
1731935329157:my_animal
1731935330089:predict(tree_default , my_animal, type = "class")
1731935331127:# Manual Calculation of the Resubstitution Error
1731935331127:predict(tree_default, Zoo) |> head ()
1731935331983:## bear          1    0       0    0         0      0
1731935331983:## boar          1    0       0    0         0      0
1731935331983:## buffalo       1    0       0    0         0      0
1731935331983:##          mollusc.et.al
1731935331983:## aardvark             0
1731935331983:## antelope             0
1731935331983:## bass                 0
1731935331984:## bear                 0
1731935331984:## boar                 0
1731935331984:## buffalo              0
1731935331984:pred <- predict(tree_default, Zoo, type="class")
1731935332619:head(pred)
1731935333407:confusion_table <- with(Zoo, table(type, pred))
1731935334794:confusion_table
1731935335575:correct <- confusion_table |> diag() |> sum()
1731935336559:correct
1731935337482:## [1] 89
1731935337482:error <- confusion_table |> sum() - correct
1731935338077:error
1731935338859:## [1] 12
1731935338859:accuracy <- correct / (correct + error)
1731935339555:accuracy
1731935340077:accuracy <- function(truth, prediction) {
1731935340077:tbl <- table(truth, prediction)
1731935340077:sum(diag(tbl))/sum(tbl)
1731935340077:}
1731935340725:accuracy(Zoo |> pull(type), pred)
1731935341286:# Confusion Matrix for the Resubstitution Error using Caret
1731935341287:library(caret)
1731935341859:confusionMatrix(data = pred,
1731935341859:reference = Zoo |> pull(type))
1731935342659:# Model Overfitting
1731935342660:tree_full <- Zoo |>
1731935342660:rpart(type ~ . , data = _,
1731935342660:control = rpart.control(minsplit = 2, cp = 0))
1731935343294:rpart.plot(tree_full, extra = 2,
1731935343294:roundint=FALSE,
1731935343294:box.palette = list("Gy", "Gn", "Bu", "Bn",
1731935343294:"Or", "Rd", "Pu"))
1731935455099:tree_full
1731935456779:pred_full <- predict(tree_full, Zoo, type = "class")
1731935458173:accuracy(Zoo |> pull(type), pred_full)
1731935488282:# Model Selection
1731935488282:fit <- Zoo |>
1731935488283:train(type ~ .,
1731935488284:data = _ ,
1731935488284:method = "rpart",
1731935488284:control = rpart.control(minsplit = 2), # we have little data
1731935488284:tuneGrid = data.frame(cp = c(0.01, 0)),
1731935488284:trControl = trainControl(method = "LGOCV",
1731935488284:p = 0.8,
1731935488285:number = 10),
1731935488285:tuneLength = 5)
1731935489123:fit
1731935490233:## CART
1731935490764:## CART
1731935490765:##
1731935491672:## CART
1731935491672:##
1731935491672:## 101 samples
1731935492258:## CART
1731935492258:##
1731935492258:## 101 samples
1731935492258:##  16 predictor
1731935492960:## CART
1731935492960:##
1731935492960:## 101 samples
1731935492960:##  16 predictor
1731935492960:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935493384:## CART
1731935493384:##
1731935493384:## 101 samples
1731935493385:##  16 predictor
1731935493385:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935493385:##
1731935493689:## CART
1731935493689:##
1731935493689:## 101 samples
1731935493689:##  16 predictor
1731935493689:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935493689:##
1731935493689:## No pre-processing
1731935493898:## CART
1731935493898:##
1731935493898:## 101 samples
1731935493898:##  16 predictor
1731935493898:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935493898:##
1731935493898:## No pre-processing
1731935493898:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935494203:## CART
1731935494203:##
1731935494203:## 101 samples
1731935494203:##  16 predictor
1731935494203:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935494203:##
1731935494204:## No pre-processing
1731935494204:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935494204:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935494411:## CART
1731935494412:##
1731935494412:## 101 samples
1731935494412:##  16 predictor
1731935494412:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935494412:##
1731935494412:## No pre-processing
1731935494412:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935494412:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935494412:## Resampling results across tuning parameters:
1731935494693:##
1731935494694:## 101 samples
1731935494694:##  16 predictor
1731935494694:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935494694:##
1731935494694:## No pre-processing
1731935494694:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935494694:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935494694:## Resampling results across tuning parameters:
1731935494694:##
1731935495047:## 101 samples
1731935495047:##  16 predictor
1731935495047:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935495047:##
1731935495047:## No pre-processing
1731935495048:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935495048:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935495048:## Resampling results across tuning parameters:
1731935495048:##
1731935495048:##   cp    Accuracy  Kappa
1731935495359:##  16 predictor
1731935495359:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935495359:##
1731935495359:## No pre-processing
1731935495359:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935495359:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935495360:## Resampling results across tuning parameters:
1731935495360:##
1731935495360:##   cp    Accuracy  Kappa
1731935495360:##   0.00  0.9444    0.9232
1731935495525:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1731935495525:##
1731935495525:## No pre-processing
1731935495525:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935495525:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935495525:## Resampling results across tuning parameters:
1731935495525:##
1731935495525:##   cp    Accuracy  Kappa
1731935495525:##   0.00  0.9444    0.9232
1731935495525:##   0.01  0.9389    0.9155
1731935495667:##
1731935495667:## No pre-processing
1731935495667:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935495667:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935495667:## Resampling results across tuning parameters:
1731935495667:##
1731935495667:##   cp    Accuracy  Kappa
1731935495667:##   0.00  0.9444    0.9232
1731935495667:##   0.01  0.9389    0.9155
1731935495667:##
1731935495794:## No pre-processing
1731935495794:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935495794:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935495794:## Resampling results across tuning parameters:
1731935495794:##
1731935495794:##   cp    Accuracy  Kappa
1731935495794:##   0.00  0.9444    0.9232
1731935495795:##   0.01  0.9389    0.9155
1731935495795:##
1731935495795:## Accuracy was used to select the optimal model using
1731935495914:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1731935495915:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935495915:## Resampling results across tuning parameters:
1731935495915:##
1731935495915:##   cp    Accuracy  Kappa
1731935495915:##   0.00  0.9444    0.9232
1731935495915:##   0.01  0.9389    0.9155
1731935495915:##
1731935495915:## Accuracy was used to select the optimal model using
1731935495915:##  the largest value.
1731935496840:# Model Evaluation
1731935559203:# Model Evaluation
1731935559203:set.seed(2000)
1731935560239:# Holdout Method
1731935560240:inTrain <- createDataPartition(y = Zoo$type, p = .8)[[1]]
1731935561131:Zoo_train <- Zoo |> slice(inTrain)
1731935561673:Zoo_test <- Zoo |> slice(-inTrain)
1731935562122:# Hyperparameter Tuning
1731935562123:inTrain <- createDataPartition(y = Zoo$type, p = .8)[[1]]
1731935562809:Zoo_train <- Zoo |> slice(inTrain)
1731935563318:Zoo_test <- Zoo |> slice(-inTrain)
1731935563777:fit <- Zoo_train |>
1731935563778:train(type ~ .,
1731935563778:data = _ ,
1731935563778:method = "rpart",
1731935563778:control = rpart.control(minsplit = 2), # we have little data
1731935563778:trControl = trainControl(method = "cv", number = 10),
1731935563778:tuneLength = 5)
1731935564292:fit
1731935564760:library(rpart.plot)
1731935565388:rpart.plot(fit$finalModel, extra = 2,
1731935565389:box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
1731935594890:varImp(fit)
1731935595431:imp <- varImp(fit, compete = FALSE)
1731935596232:imp
1731935596765:## legs             7.28
1731935596766:## tailFALSE        0.00
1731935596766:## domesticFALSE    0.00
1731935596766:## airborneFALSE    0.00
1731935596766:## catsizeFALSE     0.00
1731935596766:## toothedFALSE     0.00
1731935596766:## venomousFALSE    0.00
1731935596766:## hairFALSE        0.00
1731935596766:## breathesFALSE    0.00
1731935596766:## predatorFALSE    0.00
1731935596766:ggplot(imp)
1731935634720:pred <- predict(fit, newdata = Zoo_test)
1731935635318:pred
1731935635861:confusionMatrix(data = pred,
1731935635861:ref = Zoo_test |> pull(type))
1731935637018:## Confusion Matrix and Statistics
1731935637427:## Confusion Matrix and Statistics
1731935637427:##
1731935637667:## Confusion Matrix and Statistics
1731935637667:##
1731935637667:##                Reference
1731935637845:## Confusion Matrix and Statistics
1731935637845:##
1731935637845:##                Reference
1731935637845:## Prediction      mammal bird reptile fish amphibian insect
1731935637982:## Confusion Matrix and Statistics
1731935637982:##
1731935637982:##                Reference
1731935637982:## Prediction      mammal bird reptile fish amphibian insect
1731935637982:##   mammal             8    0       0    0         0      0
1731935638118:## Confusion Matrix and Statistics
1731935638118:##
1731935638118:##                Reference
1731935638118:## Prediction      mammal bird reptile fish amphibian insect
1731935638118:##   mammal             8    0       0    0         0      0
1731935638118:##   bird               0    4       0    0         0      0
1731935638233:## Confusion Matrix and Statistics
1731935638234:##
1731935638234:##                Reference
1731935638234:## Prediction      mammal bird reptile fish amphibian insect
1731935638234:##   mammal             8    0       0    0         0      0
1731935638234:##   bird               0    4       0    0         0      0
1731935638234:##   reptile            0    0       1    0         0      0
1731935638342:## Confusion Matrix and Statistics
1731935638342:##
1731935638342:##                Reference
1731935638342:## Prediction      mammal bird reptile fish amphibian insect
1731935638342:##   mammal             8    0       0    0         0      0
1731935638342:##   bird               0    4       0    0         0      0
1731935638342:##   reptile            0    0       1    0         0      0
1731935638342:##   fish               0    0       0    2         0      0
1731935638454:## Confusion Matrix and Statistics
1731935638454:##
1731935638455:##                Reference
1731935638455:## Prediction      mammal bird reptile fish amphibian insect
1731935638455:##   mammal             8    0       0    0         0      0
1731935638455:##   bird               0    4       0    0         0      0
1731935638455:##   reptile            0    0       1    0         0      0
1731935638455:##   fish               0    0       0    2         0      0
1731935638455:##   amphibian          0    0       0    0         0      0
1731935638566:## Confusion Matrix and Statistics
1731935638567:##
1731935638567:##                Reference
1731935638567:## Prediction      mammal bird reptile fish amphibian insect
1731935638567:##   mammal             8    0       0    0         0      0
1731935638567:##   bird               0    4       0    0         0      0
1731935638567:##   reptile            0    0       1    0         0      0
1731935638567:##   fish               0    0       0    2         0      0
1731935638567:##   amphibian          0    0       0    0         0      0
1731935638567:##   insect             0    0       0    0         0      1
1731935638683:##
1731935638683:##                Reference
1731935638683:## Prediction      mammal bird reptile fish amphibian insect
1731935638683:##   mammal             8    0       0    0         0      0
1731935638683:##   bird               0    4       0    0         0      0
1731935638684:##   reptile            0    0       1    0         0      0
1731935638684:##   fish               0    0       0    2         0      0
1731935638684:##   amphibian          0    0       0    0         0      0
1731935638684:##   insect             0    0       0    0         0      1
1731935638684:##   mollusc.et.al      0    0       0    0         0      0
1731935638791:##                Reference
1731935638792:## Prediction      mammal bird reptile fish amphibian insect
1731935638792:##   mammal             8    0       0    0         0      0
1731935638792:##   bird               0    4       0    0         0      0
1731935638792:##   reptile            0    0       1    0         0      0
1731935638792:##   fish               0    0       0    2         0      0
1731935638792:##   amphibian          0    0       0    0         0      0
1731935638792:##   insect             0    0       0    0         0      1
1731935638792:##   mollusc.et.al      0    0       0    0         0      0
1731935638792:##                Reference
1731935638921:## Prediction      mammal bird reptile fish amphibian insect
1731935638921:##   mammal             8    0       0    0         0      0
1731935638921:##   bird               0    4       0    0         0      0
1731935638921:##   reptile            0    0       1    0         0      0
1731935638921:##   fish               0    0       0    2         0      0
1731935638921:##   amphibian          0    0       0    0         0      0
1731935638921:##   insect             0    0       0    0         0      1
1731935638921:##   mollusc.et.al      0    0       0    0         0      0
1731935638921:##                Reference
1731935638921:## Prediction      mollusc.et.al
1731935639034:##   mammal             8    0       0    0         0      0
1731935639034:##   bird               0    4       0    0         0      0
1731935639034:##   reptile            0    0       1    0         0      0
1731935639034:##   fish               0    0       0    2         0      0
1731935639034:##   amphibian          0    0       0    0         0      0
1731935639035:##   insect             0    0       0    0         0      1
1731935639035:##   mollusc.et.al      0    0       0    0         0      0
1731935639035:##                Reference
1731935639035:## Prediction      mollusc.et.al
1731935639035:##   mammal                    0
1731935639150:##   bird               0    4       0    0         0      0
1731935639150:##   reptile            0    0       1    0         0      0
1731935639150:##   fish               0    0       0    2         0      0
1731935639150:##   amphibian          0    0       0    0         0      0
1731935639150:##   insect             0    0       0    0         0      1
1731935639150:##   mollusc.et.al      0    0       0    0         0      0
1731935639150:##                Reference
1731935639150:## Prediction      mollusc.et.al
1731935639150:##   mammal                    0
1731935639151:##   bird                      0
1731935639249:##   reptile            0    0       1    0         0      0
1731935639249:##   fish               0    0       0    2         0      0
1731935639249:##   amphibian          0    0       0    0         0      0
1731935639250:##   insect             0    0       0    0         0      1
1731935639250:##   mollusc.et.al      0    0       0    0         0      0
1731935639250:##                Reference
1731935639250:## Prediction      mollusc.et.al
1731935639250:##   mammal                    0
1731935639250:##   bird                      0
1731935639250:##   reptile                   0
1731935639370:##   fish               0    0       0    2         0      0
1731935639370:##   amphibian          0    0       0    0         0      0
1731935639370:##   insect             0    0       0    0         0      1
1731935639370:##   mollusc.et.al      0    0       0    0         0      0
1731935639370:##                Reference
1731935639370:## Prediction      mollusc.et.al
1731935639370:##   mammal                    0
1731935639370:##   bird                      0
1731935639370:##   reptile                   0
1731935639370:##   fish                      0
1731935639487:##   amphibian          0    0       0    0         0      0
1731935639487:##   insect             0    0       0    0         0      1
1731935639487:##   mollusc.et.al      0    0       0    0         0      0
1731935639487:##                Reference
1731935639487:## Prediction      mollusc.et.al
1731935639487:##   mammal                    0
1731935639487:##   bird                      0
1731935639487:##   reptile                   0
1731935639487:##   fish                      0
1731935639487:##   amphibian                 0
1731935639599:##   insect             0    0       0    0         0      1
1731935639599:##   mollusc.et.al      0    0       0    0         0      0
1731935639599:##                Reference
1731935639600:## Prediction      mollusc.et.al
1731935639600:##   mammal                    0
1731935639600:##   bird                      0
1731935639600:##   reptile                   0
1731935639600:##   fish                      0
1731935639600:##   amphibian                 0
1731935639600:##   insect                    0
1731935639997:##   mollusc.et.al      0    0       0    0         0      0
1731935639998:##                Reference
1731935639998:## Prediction      mollusc.et.al
1731935639998:##   mammal                    0
1731935639998:##   bird                      0
1731935639998:##   reptile                   0
1731935639998:##   fish                      0
1731935639998:##   amphibian                 0
1731935639998:##   insect                    0
1731935639998:##   mollusc.et.al             2
1731935640135:##                Reference
1731935640135:## Prediction      mollusc.et.al
1731935640135:##   mammal                    0
1731935640135:##   bird                      0
1731935640135:##   reptile                   0
1731935640135:##   fish                      0
1731935640135:##   amphibian                 0
1731935640135:##   insect                    0
1731935640135:##   mollusc.et.al             2
1731935640135:##
1731935640249:## Prediction      mollusc.et.al
1731935640249:##   mammal                    0
1731935640249:##   bird                      0
1731935640249:##   reptile                   0
1731935640249:##   fish                      0
1731935640249:##   amphibian                 0
1731935640249:##   insect                    0
1731935640249:##   mollusc.et.al             2
1731935640249:##
1731935640249:## Overall Statistics
1731935640476:##   mammal                    0
1731935640476:##   bird                      0
1731935640476:##   reptile                   0
1731935640476:##   fish                      0
1731935640476:##   amphibian                 0
1731935640476:##   insect                    0
1731935640476:##   mollusc.et.al             2
1731935640476:##
1731935640476:## Overall Statistics
1731935640477:##
1731935640591:##   bird                      0
1731935640591:##   reptile                   0
1731935640591:##   fish                      0
1731935640591:##   amphibian                 0
1731935640591:##   insect                    0
1731935640591:##   mollusc.et.al             2
1731935640591:##
1731935640591:## Overall Statistics
1731935640591:##
1731935640591:##                Accuracy : 1
1731935640704:##   reptile                   0
1731935640704:##   fish                      0
1731935640704:##   amphibian                 0
1731935640704:##   insect                    0
1731935640704:##   mollusc.et.al             2
1731935640704:##
1731935640704:## Overall Statistics
1731935640704:##
1731935640704:##                Accuracy : 1
1731935640704:##                  95% CI : (0.815, 1)
1731935640799:##   fish                      0
1731935640799:##   amphibian                 0
1731935640799:##   insect                    0
1731935640799:##   mollusc.et.al             2
1731935640799:##
1731935640800:## Overall Statistics
1731935640800:##
1731935640800:##                Accuracy : 1
1731935640800:##                  95% CI : (0.815, 1)
1731935640800:##     No Information Rate : 0.444
1731935640979:##   amphibian                 0
1731935640979:##   insect                    0
1731935640979:##   mollusc.et.al             2
1731935640979:##
1731935640980:## Overall Statistics
1731935640980:##
1731935640980:##                Accuracy : 1
1731935640980:##                  95% CI : (0.815, 1)
1731935640980:##     No Information Rate : 0.444
1731935640980:##     P-Value [Acc > NIR] : 4.58e-07
1731935641179:##   insect                    0
1731935641179:##   mollusc.et.al             2
1731935641180:##
1731935641180:## Overall Statistics
1731935641180:##
1731935641180:##                Accuracy : 1
1731935641180:##                  95% CI : (0.815, 1)
1731935641180:##     No Information Rate : 0.444
1731935641180:##     P-Value [Acc > NIR] : 4.58e-07
1731935641180:##
1731935641468:##   mollusc.et.al             2
1731935641468:##
1731935641468:## Overall Statistics
1731935641468:##
1731935641468:##                Accuracy : 1
1731935641468:##                  95% CI : (0.815, 1)
1731935641468:##     No Information Rate : 0.444
1731935641468:##     P-Value [Acc > NIR] : 4.58e-07
1731935641469:##
1731935641469:##                   Kappa : 1
1731935641579:##
1731935641579:## Overall Statistics
1731935641579:##
1731935641579:##                Accuracy : 1
1731935641579:##                  95% CI : (0.815, 1)
1731935641579:##     No Information Rate : 0.444
1731935641579:##     P-Value [Acc > NIR] : 4.58e-07
1731935641579:##
1731935641579:##                   Kappa : 1
1731935641579:##
1731935641691:## Overall Statistics
1731935641691:##
1731935641691:##                Accuracy : 1
1731935641691:##                  95% CI : (0.815, 1)
1731935641691:##     No Information Rate : 0.444
1731935641691:##     P-Value [Acc > NIR] : 4.58e-07
1731935641692:##
1731935641692:##                   Kappa : 1
1731935641692:##
1731935641692:##  Mcnemar's Test P-Value : NA
1731935641939:##
1731935641939:##                Accuracy : 1
1731935641939:##                  95% CI : (0.815, 1)
1731935641939:##     No Information Rate : 0.444
1731935641939:##     P-Value [Acc > NIR] : 4.58e-07
1731935641939:##
1731935641939:##                   Kappa : 1
1731935641940:##
1731935641940:##  Mcnemar's Test P-Value : NA
1731935641940:##
1731935642044:##                Accuracy : 1
1731935642044:##                  95% CI : (0.815, 1)
1731935642044:##     No Information Rate : 0.444
1731935642044:##     P-Value [Acc > NIR] : 4.58e-07
1731935642044:##
1731935642045:##                   Kappa : 1
1731935642045:##
1731935642045:##  Mcnemar's Test P-Value : NA
1731935642045:##
1731935642045:## Statistics by Class:
1731935642258:##                  95% CI : (0.815, 1)
1731935642258:##     No Information Rate : 0.444
1731935642258:##     P-Value [Acc > NIR] : 4.58e-07
1731935642259:##
1731935642259:##                   Kappa : 1
1731935642259:##
1731935642259:##  Mcnemar's Test P-Value : NA
1731935642259:##
1731935642259:## Statistics by Class:
1731935642259:##
1731935642382:##     No Information Rate : 0.444
1731935642382:##     P-Value [Acc > NIR] : 4.58e-07
1731935642382:##
1731935642382:##                   Kappa : 1
1731935642382:##
1731935642382:##  Mcnemar's Test P-Value : NA
1731935642382:##
1731935642383:## Statistics by Class:
1731935642383:##
1731935642383:##                      Class: mammal Class: bird
1731935642498:##     P-Value [Acc > NIR] : 4.58e-07
1731935642498:##
1731935642498:##                   Kappa : 1
1731935642498:##
1731935642498:##  Mcnemar's Test P-Value : NA
1731935642498:##
1731935642498:## Statistics by Class:
1731935642498:##
1731935642498:##                      Class: mammal Class: bird
1731935642498:## Sensitivity                  1.000       1.000
1731935642617:##
1731935642617:##                   Kappa : 1
1731935642617:##
1731935642617:##  Mcnemar's Test P-Value : NA
1731935642617:##
1731935642617:## Statistics by Class:
1731935642617:##
1731935642617:##                      Class: mammal Class: bird
1731935642617:## Sensitivity                  1.000       1.000
1731935642617:## Specificity                  1.000       1.000
1731935642737:##                   Kappa : 1
1731935642737:##
1731935642737:##  Mcnemar's Test P-Value : NA
1731935642737:##
1731935642737:## Statistics by Class:
1731935642737:##
1731935642737:##                      Class: mammal Class: bird
1731935642737:## Sensitivity                  1.000       1.000
1731935642737:## Specificity                  1.000       1.000
1731935642737:## Pos Pred Value               1.000       1.000
1731935642856:##
1731935642856:##  Mcnemar's Test P-Value : NA
1731935642856:##
1731935642856:## Statistics by Class:
1731935642856:##
1731935642856:##                      Class: mammal Class: bird
1731935642856:## Sensitivity                  1.000       1.000
1731935642856:## Specificity                  1.000       1.000
1731935642857:## Pos Pred Value               1.000       1.000
1731935642857:## Neg Pred Value               1.000       1.000
1731935642969:##  Mcnemar's Test P-Value : NA
1731935642969:##
1731935642969:## Statistics by Class:
1731935642969:##
1731935642969:##                      Class: mammal Class: bird
1731935642969:## Sensitivity                  1.000       1.000
1731935642969:## Specificity                  1.000       1.000
1731935642969:## Pos Pred Value               1.000       1.000
1731935642969:## Neg Pred Value               1.000       1.000
1731935642969:## Prevalence                   0.444       0.222
1731935643090:##
1731935643090:## Statistics by Class:
1731935643090:##
1731935643090:##                      Class: mammal Class: bird
1731935643090:## Sensitivity                  1.000       1.000
1731935643090:## Specificity                  1.000       1.000
1731935643090:## Pos Pred Value               1.000       1.000
1731935643090:## Neg Pred Value               1.000       1.000
1731935643090:## Prevalence                   0.444       0.222
1731935643090:## Detection Rate               0.444       0.222
1731935643210:## Statistics by Class:
1731935643210:##
1731935643210:##                      Class: mammal Class: bird
1731935643210:## Sensitivity                  1.000       1.000
1731935643210:## Specificity                  1.000       1.000
1731935643210:## Pos Pred Value               1.000       1.000
1731935643210:## Neg Pred Value               1.000       1.000
1731935643210:## Prevalence                   0.444       0.222
1731935643211:## Detection Rate               0.444       0.222
1731935643211:## Detection Prevalence         0.444       0.222
1731935643335:##
1731935643335:##                      Class: mammal Class: bird
1731935643335:## Sensitivity                  1.000       1.000
1731935643335:## Specificity                  1.000       1.000
1731935643335:## Pos Pred Value               1.000       1.000
1731935643335:## Neg Pred Value               1.000       1.000
1731935643335:## Prevalence                   0.444       0.222
1731935643335:## Detection Rate               0.444       0.222
1731935643335:## Detection Prevalence         0.444       0.222
1731935643335:## Balanced Accuracy            1.000       1.000
1731935643460:##                      Class: mammal Class: bird
1731935643460:## Sensitivity                  1.000       1.000
1731935643460:## Specificity                  1.000       1.000
1731935643460:## Pos Pred Value               1.000       1.000
1731935643460:## Neg Pred Value               1.000       1.000
1731935643460:## Prevalence                   0.444       0.222
1731935643460:## Detection Rate               0.444       0.222
1731935643460:## Detection Prevalence         0.444       0.222
1731935643460:## Balanced Accuracy            1.000       1.000
1731935643460:##                      Class: reptile Class: fish
1731935643587:## Sensitivity                  1.000       1.000
1731935643587:## Specificity                  1.000       1.000
1731935643587:## Pos Pred Value               1.000       1.000
1731935643587:## Neg Pred Value               1.000       1.000
1731935643587:## Prevalence                   0.444       0.222
1731935643587:## Detection Rate               0.444       0.222
1731935643588:## Detection Prevalence         0.444       0.222
1731935643588:## Balanced Accuracy            1.000       1.000
1731935643588:##                      Class: reptile Class: fish
1731935643588:## Sensitivity                  1.0000       1.000
1731935643700:## Specificity                  1.000       1.000
1731935643700:## Pos Pred Value               1.000       1.000
1731935643700:## Neg Pred Value               1.000       1.000
1731935643700:## Prevalence                   0.444       0.222
1731935643700:## Detection Rate               0.444       0.222
1731935643700:## Detection Prevalence         0.444       0.222
1731935643700:## Balanced Accuracy            1.000       1.000
1731935643700:##                      Class: reptile Class: fish
1731935643700:## Sensitivity                  1.0000       1.000
1731935643700:## Specificity                  1.0000       1.000
1731935644746:## Pos Pred Value               1.000       1.000
1731935644746:## Neg Pred Value               1.000       1.000
1731935644746:## Prevalence                   0.444       0.222
1731935644746:## Detection Rate               0.444       0.222
1731935644746:## Detection Prevalence         0.444       0.222
1731935644746:## Balanced Accuracy            1.000       1.000
1731935644746:##                      Class: reptile Class: fish
1731935644746:## Sensitivity                  1.0000       1.000
1731935644746:## Specificity                  1.0000       1.000
1731935644746:## Pos Pred Value               1.0000       1.000
1731935645028:## Neg Pred Value               1.000       1.000
1731935645028:## Prevalence                   0.444       0.222
1731935645028:## Detection Rate               0.444       0.222
1731935645028:## Detection Prevalence         0.444       0.222
1731935645028:## Balanced Accuracy            1.000       1.000
1731935645028:##                      Class: reptile Class: fish
1731935645028:## Sensitivity                  1.0000       1.000
1731935645028:## Specificity                  1.0000       1.000
1731935645028:## Pos Pred Value               1.0000       1.000
1731935645028:## Neg Pred Value               1.0000       1.000
1731935645139:## Prevalence                   0.444       0.222
1731935645139:## Detection Rate               0.444       0.222
1731935645139:## Detection Prevalence         0.444       0.222
1731935645139:## Balanced Accuracy            1.000       1.000
1731935645139:##                      Class: reptile Class: fish
1731935645139:## Sensitivity                  1.0000       1.000
1731935645139:## Specificity                  1.0000       1.000
1731935645139:## Pos Pred Value               1.0000       1.000
1731935645139:## Neg Pred Value               1.0000       1.000
1731935645139:## Prevalence                   0.0556       0.111
1731935645243:## Detection Rate               0.444       0.222
1731935645243:## Detection Prevalence         0.444       0.222
1731935645243:## Balanced Accuracy            1.000       1.000
1731935645243:##                      Class: reptile Class: fish
1731935645243:## Sensitivity                  1.0000       1.000
1731935645243:## Specificity                  1.0000       1.000
1731935645243:## Pos Pred Value               1.0000       1.000
1731935645243:## Neg Pred Value               1.0000       1.000
1731935645243:## Prevalence                   0.0556       0.111
1731935645243:## Detection Rate               0.0556       0.111
1731935645355:## Detection Prevalence         0.444       0.222
1731935645355:## Balanced Accuracy            1.000       1.000
1731935645355:##                      Class: reptile Class: fish
1731935645355:## Sensitivity                  1.0000       1.000
1731935645355:## Specificity                  1.0000       1.000
1731935645355:## Pos Pred Value               1.0000       1.000
1731935645355:## Neg Pred Value               1.0000       1.000
1731935645355:## Prevalence                   0.0556       0.111
1731935645355:## Detection Rate               0.0556       0.111
1731935645355:## Detection Prevalence         0.0556       0.111
1731935645468:## Balanced Accuracy            1.000       1.000
1731935645468:##                      Class: reptile Class: fish
1731935645468:## Sensitivity                  1.0000       1.000
1731935645468:## Specificity                  1.0000       1.000
1731935645468:## Pos Pred Value               1.0000       1.000
1731935645469:## Neg Pred Value               1.0000       1.000
1731935645469:## Prevalence                   0.0556       0.111
1731935645469:## Detection Rate               0.0556       0.111
1731935645469:## Detection Prevalence         0.0556       0.111
1731935645469:## Balanced Accuracy            1.0000       1.000
1731935645589:##                      Class: reptile Class: fish
1731935645589:## Sensitivity                  1.0000       1.000
1731935645589:## Specificity                  1.0000       1.000
1731935645589:## Pos Pred Value               1.0000       1.000
1731935645589:## Neg Pred Value               1.0000       1.000
1731935645589:## Prevalence                   0.0556       0.111
1731935645589:## Detection Rate               0.0556       0.111
1731935645589:## Detection Prevalence         0.0556       0.111
1731935645589:## Balanced Accuracy            1.0000       1.000
1731935645589:##                      Class: amphibian Class: insect
1731935645701:## Sensitivity                  1.0000       1.000
1731935645701:## Specificity                  1.0000       1.000
1731935645701:## Pos Pred Value               1.0000       1.000
1731935645701:## Neg Pred Value               1.0000       1.000
1731935645701:## Prevalence                   0.0556       0.111
1731935645701:## Detection Rate               0.0556       0.111
1731935645702:## Detection Prevalence         0.0556       0.111
1731935645702:## Balanced Accuracy            1.0000       1.000
1731935645702:##                      Class: amphibian Class: insect
1731935645702:## Sensitivity                        NA        1.0000
1731935645822:## Specificity                  1.0000       1.000
1731935645822:## Pos Pred Value               1.0000       1.000
1731935645822:## Neg Pred Value               1.0000       1.000
1731935645822:## Prevalence                   0.0556       0.111
1731935645822:## Detection Rate               0.0556       0.111
1731935645822:## Detection Prevalence         0.0556       0.111
1731935645823:## Balanced Accuracy            1.0000       1.000
1731935645823:##                      Class: amphibian Class: insect
1731935645823:## Sensitivity                        NA        1.0000
1731935645823:## Specificity                         1        1.0000
1731935645942:## Pos Pred Value               1.0000       1.000
1731935645942:## Neg Pred Value               1.0000       1.000
1731935645943:## Prevalence                   0.0556       0.111
1731935645943:## Detection Rate               0.0556       0.111
1731935645943:## Detection Prevalence         0.0556       0.111
1731935645943:## Balanced Accuracy            1.0000       1.000
1731935645943:##                      Class: amphibian Class: insect
1731935645943:## Sensitivity                        NA        1.0000
1731935645943:## Specificity                         1        1.0000
1731935645943:## Pos Pred Value                     NA        1.0000
1731935646208:## Neg Pred Value               1.0000       1.000
1731935646208:## Prevalence                   0.0556       0.111
1731935646208:## Detection Rate               0.0556       0.111
1731935646208:## Detection Prevalence         0.0556       0.111
1731935646209:## Balanced Accuracy            1.0000       1.000
1731935646209:##                      Class: amphibian Class: insect
1731935646209:## Sensitivity                        NA        1.0000
1731935646209:## Specificity                         1        1.0000
1731935646209:## Pos Pred Value                     NA        1.0000
1731935646209:## Neg Pred Value                     NA        1.0000
1731935646344:## Prevalence                   0.0556       0.111
1731935646344:## Detection Rate               0.0556       0.111
1731935646344:## Detection Prevalence         0.0556       0.111
1731935646345:## Balanced Accuracy            1.0000       1.000
1731935646345:##                      Class: amphibian Class: insect
1731935646345:## Sensitivity                        NA        1.0000
1731935646345:## Specificity                         1        1.0000
1731935646345:## Pos Pred Value                     NA        1.0000
1731935646345:## Neg Pred Value                     NA        1.0000
1731935646345:## Prevalence                          0        0.0556
1731935646487:## Detection Rate               0.0556       0.111
1731935646487:## Detection Prevalence         0.0556       0.111
1731935646488:## Balanced Accuracy            1.0000       1.000
1731935646488:##                      Class: amphibian Class: insect
1731935646488:## Sensitivity                        NA        1.0000
1731935646488:## Specificity                         1        1.0000
1731935646488:## Pos Pred Value                     NA        1.0000
1731935646488:## Neg Pred Value                     NA        1.0000
1731935646488:## Prevalence                          0        0.0556
1731935646488:## Detection Rate                      0        0.0556
1731935646603:## Detection Prevalence         0.0556       0.111
1731935646603:## Balanced Accuracy            1.0000       1.000
1731935646603:##                      Class: amphibian Class: insect
1731935646603:## Sensitivity                        NA        1.0000
1731935646603:## Specificity                         1        1.0000
1731935646603:## Pos Pred Value                     NA        1.0000
1731935646603:## Neg Pred Value                     NA        1.0000
1731935646603:## Prevalence                          0        0.0556
1731935646603:## Detection Rate                      0        0.0556
1731935646603:## Detection Prevalence                0        0.0556
1731935646722:## Balanced Accuracy            1.0000       1.000
1731935646722:##                      Class: amphibian Class: insect
1731935646722:## Sensitivity                        NA        1.0000
1731935646722:## Specificity                         1        1.0000
1731935646722:## Pos Pred Value                     NA        1.0000
1731935646722:## Neg Pred Value                     NA        1.0000
1731935646722:## Prevalence                          0        0.0556
1731935646722:## Detection Rate                      0        0.0556
1731935646723:## Detection Prevalence                0        0.0556
1731935646723:## Balanced Accuracy                  NA        1.0000
1731935646835:##                      Class: amphibian Class: insect
1731935646835:## Sensitivity                        NA        1.0000
1731935646835:## Specificity                         1        1.0000
1731935646835:## Pos Pred Value                     NA        1.0000
1731935646835:## Neg Pred Value                     NA        1.0000
1731935646835:## Prevalence                          0        0.0556
1731935646835:## Detection Rate                      0        0.0556
1731935646835:## Detection Prevalence                0        0.0556
1731935646835:## Balanced Accuracy                  NA        1.0000
1731935646835:##                      Class: mollusc.et.al
1731935646955:## Sensitivity                        NA        1.0000
1731935646955:## Specificity                         1        1.0000
1731935646955:## Pos Pred Value                     NA        1.0000
1731935646955:## Neg Pred Value                     NA        1.0000
1731935646955:## Prevalence                          0        0.0556
1731935646955:## Detection Rate                      0        0.0556
1731935646955:## Detection Prevalence                0        0.0556
1731935646956:## Balanced Accuracy                  NA        1.0000
1731935646956:##                      Class: mollusc.et.al
1731935646956:## Sensitivity                         1.000
1731935658430:## Specificity                         1        1.0000
1731935658430:## Pos Pred Value                     NA        1.0000
1731935658430:## Neg Pred Value                     NA        1.0000
1731935658430:## Prevalence                          0        0.0556
1731935658430:## Detection Rate                      0        0.0556
1731935658430:## Detection Prevalence                0        0.0556
1731935658430:## Balanced Accuracy                  NA        1.0000
1731935658431:##                      Class: mollusc.et.al
1731935658431:## Sensitivity                         1.000
1731935658431:## Specificity                         1.000
1731935658665:## Pos Pred Value                     NA        1.0000
1731935658665:## Neg Pred Value                     NA        1.0000
1731935658665:## Prevalence                          0        0.0556
1731935658665:## Detection Rate                      0        0.0556
1731935658665:## Detection Prevalence                0        0.0556
1731935658665:## Balanced Accuracy                  NA        1.0000
1731935658665:##                      Class: mollusc.et.al
1731935658665:## Sensitivity                         1.000
1731935658665:## Specificity                         1.000
1731935658665:## Pos Pred Value                      1.000
1731935658848:## Neg Pred Value                     NA        1.0000
1731935658848:## Prevalence                          0        0.0556
1731935658848:## Detection Rate                      0        0.0556
1731935658848:## Detection Prevalence                0        0.0556
1731935658848:## Balanced Accuracy                  NA        1.0000
1731935658848:##                      Class: mollusc.et.al
1731935658848:## Sensitivity                         1.000
1731935658848:## Specificity                         1.000
1731935658848:## Pos Pred Value                      1.000
1731935658848:## Neg Pred Value                      1.000
1731935658965:## Prevalence                          0        0.0556
1731935658965:## Detection Rate                      0        0.0556
1731935658965:## Detection Prevalence                0        0.0556
1731935658965:## Balanced Accuracy                  NA        1.0000
1731935658965:##                      Class: mollusc.et.al
1731935658965:## Sensitivity                         1.000
1731935658966:## Specificity                         1.000
1731935658966:## Pos Pred Value                      1.000
1731935658966:## Neg Pred Value                      1.000
1731935658966:## Prevalence                          0.111
1731935659070:## Detection Rate                      0        0.0556
1731935659070:## Detection Prevalence                0        0.0556
1731935659070:## Balanced Accuracy                  NA        1.0000
1731935659070:##                      Class: mollusc.et.al
1731935659070:## Sensitivity                         1.000
1731935659071:## Specificity                         1.000
1731935659071:## Pos Pred Value                      1.000
1731935659071:## Neg Pred Value                      1.000
1731935659071:## Prevalence                          0.111
1731935659071:## Detection Rate                      0.111
1731935659191:## Detection Prevalence                0        0.0556
1731935659192:## Balanced Accuracy                  NA        1.0000
1731935659192:##                      Class: mollusc.et.al
1731935659192:## Sensitivity                         1.000
1731935659192:## Specificity                         1.000
1731935659192:## Pos Pred Value                      1.000
1731935659192:## Neg Pred Value                      1.000
1731935659192:## Prevalence                          0.111
1731935659192:## Detection Rate                      0.111
1731935659192:## Detection Prevalence                0.111
1731935659284:## Balanced Accuracy                  NA        1.0000
1731935659284:##                      Class: mollusc.et.al
1731935659284:## Sensitivity                         1.000
1731935659284:## Specificity                         1.000
1731935659284:## Pos Pred Value                      1.000
1731935659284:## Neg Pred Value                      1.000
1731935659284:## Prevalence                          0.111
1731935659284:## Detection Rate                      0.111
1731935659284:## Detection Prevalence                0.111
1731935659284:## Balanced Accuracy                   1.000
1731935660014:## Balanced Accuracy                  NA        1.0000
1731935660014:##                      Class: mollusc.et.al
1731935660014:## Sensitivity                         1.000
1731935660014:## Specificity                         1.000
1731935660014:## Pos Pred Value                      1.000
1731935660014:## Neg Pred Value                      1.000
1731935660014:## Prevalence                          0.111
1731935660015:## Detection Rate                      0.111
1731935660015:## Detection Prevalence                0.111
1731935660015:## Balanced Accuracy                   1.000
1731935697433:# Model Comparison
1731935697433:train_index <- createFolds(Zoo_train$type,
1731935697433:k = 10,
1731935697433:returnTrain = TRUE)
1731935698031:rpartFit <- Zoo_train |>
1731935698031:train(type ~ .,
1731935698031:data = _,
1731935698031:method = "rpart",
1731935698032:tuneLength = 10,
1731935698032:trControl = trainControl(method = "cv",
1731935698032:index = train_index)
1731935698032:)
1731935698586:knnFit <- Zoo_train |>
1731935698586:train(type ~ .,
1731935698586:data = _,
1731935698586:method = "knn",
1731935698586:preProcess = "scale",
1731935698586:tuneLength = 10,
1731935698586:trControl = trainControl(method = "cv",
1731935698586:index = train_index)
1731935698587:)
1731935699053:resamps <- resamples(list(
1731935699053:CART = rpartFit,
1731935699053:kNearestNeighbors = knnFit
1731935699053:))
1731935699529:summary(resamps)
1731935700044:bwplot(resamps, layout = c(3, 1))
1731935723789:difs <- diff(resamps)
1731935724483:difs
1731935725003:##
1731935725003:## Call:
1731935725003:## diff.resamples(x = resamps)
1731935725003:##
1731935725003:## Models: CART, kNearestNeighbors
1731935725003:## Metrics: Accuracy, Kappa
1731935725003:## Number of differences: 1
1731935725003:## p-value adjustment: bonferroni
1731935725004:summary(difs)
1731935725795:##
1731935726232:##
1731935726232:## Call:
1731935726390:##
1731935726390:## Call:
1731935726390:## summary.diff.resamples(object = difs)
1731935726511:##
1731935726511:## Call:
1731935726511:## summary.diff.resamples(object = difs)
1731935726511:##
1731935726639:##
1731935726639:## Call:
1731935726640:## summary.diff.resamples(object = difs)
1731935726640:##
1731935726640:## p-value adjustment: bonferroni
1731935726768:##
1731935726768:## Call:
1731935726768:## summary.diff.resamples(object = difs)
1731935726768:##
1731935726768:## p-value adjustment: bonferroni
1731935726768:## Upper diagonal: estimates of the difference
1731935726883:##
1731935726883:## Call:
1731935726883:## summary.diff.resamples(object = difs)
1731935726883:##
1731935726883:## p-value adjustment: bonferroni
1731935726883:## Upper diagonal: estimates of the difference
1731935726883:## Lower diagonal: p-value for H0: difference = 0
1731935726992:##
1731935726992:## Call:
1731935726992:## summary.diff.resamples(object = difs)
1731935726992:##
1731935726992:## p-value adjustment: bonferroni
1731935726992:## Upper diagonal: estimates of the difference
1731935726992:## Lower diagonal: p-value for H0: difference = 0
1731935726993:##
1731935727122:##
1731935727122:## Call:
1731935727122:## summary.diff.resamples(object = difs)
1731935727122:##
1731935727122:## p-value adjustment: bonferroni
1731935727122:## Upper diagonal: estimates of the difference
1731935727122:## Lower diagonal: p-value for H0: difference = 0
1731935727122:##
1731935727122:## Accuracy
1731935727235:##
1731935727235:## Call:
1731935727235:## summary.diff.resamples(object = difs)
1731935727236:##
1731935727236:## p-value adjustment: bonferroni
1731935727236:## Upper diagonal: estimates of the difference
1731935727236:## Lower diagonal: p-value for H0: difference = 0
1731935727236:##
1731935727236:## Accuracy
1731935727236:##                   CART    kNearestNeighbors
1731935727461:## Call:
1731935727461:## summary.diff.resamples(object = difs)
1731935727462:##
1731935727462:## p-value adjustment: bonferroni
1731935727462:## Upper diagonal: estimates of the difference
1731935727462:## Lower diagonal: p-value for H0: difference = 0
1731935727462:##
1731935727462:## Accuracy
1731935727462:##                   CART    kNearestNeighbors
1731935727462:## CART                      -0.119
1731935727587:## summary.diff.resamples(object = difs)
1731935727587:##
1731935727587:## p-value adjustment: bonferroni
1731935727587:## Upper diagonal: estimates of the difference
1731935727587:## Lower diagonal: p-value for H0: difference = 0
1731935727587:##
1731935727587:## Accuracy
1731935727587:##                   CART    kNearestNeighbors
1731935727587:## CART                      -0.119
1731935727587:## kNearestNeighbors 0.00768
1731935727724:##
1731935727724:## p-value adjustment: bonferroni
1731935727724:## Upper diagonal: estimates of the difference
1731935727724:## Lower diagonal: p-value for H0: difference = 0
1731935727724:##
1731935727724:## Accuracy
1731935727724:##                   CART    kNearestNeighbors
1731935727724:## CART                      -0.119
1731935727724:## kNearestNeighbors 0.00768
1731935727724:##
1731935727835:## p-value adjustment: bonferroni
1731935727835:## Upper diagonal: estimates of the difference
1731935727835:## Lower diagonal: p-value for H0: difference = 0
1731935727835:##
1731935727835:## Accuracy
1731935727835:##                   CART    kNearestNeighbors
1731935727835:## CART                      -0.119
1731935727835:## kNearestNeighbors 0.00768
1731935727836:##
1731935727836:## Kappa
1731935727956:## Upper diagonal: estimates of the difference
1731935727957:## Lower diagonal: p-value for H0: difference = 0
1731935727957:##
1731935727957:## Accuracy
1731935727957:##                   CART    kNearestNeighbors
1731935727957:## CART                      -0.119
1731935727957:## kNearestNeighbors 0.00768
1731935727957:##
1731935727957:## Kappa
1731935727957:##                   CART    kNearestNeighbors
1731935728068:## Lower diagonal: p-value for H0: difference = 0
1731935728068:##
1731935728068:## Accuracy
1731935728068:##                   CART    kNearestNeighbors
1731935728068:## CART                      -0.119
1731935728069:## kNearestNeighbors 0.00768
1731935728069:##
1731935728069:## Kappa
1731935728069:##                   CART    kNearestNeighbors
1731935728069:## CART                      -0.159
1731935728173:##
1731935728173:## Accuracy
1731935728173:##                   CART    kNearestNeighbors
1731935728173:## CART                      -0.119
1731935728173:## kNearestNeighbors 0.00768
1731935728173:##
1731935728173:## Kappa
1731935728173:##                   CART    kNearestNeighbors
1731935728173:## CART                      -0.159
1731935728173:## kNearestNeighbors 0.00538
1731935764849:# Feature Selection
1731935764849:library(FSelector)
1731935765507:# Univariate Feature Importance Score
1731935765507:weights <- Zoo_train |>
1731935765507:chi.squared(type ~ ., data = _) |>
1731935765508:as_tibble(rownames = "feature") |>
1731935765508:arrange(desc(attr_importance))
1731935766261:weights
1731935766763:ggplot(weights,
1731935766763:aes(x = attr_importance,
1731935766763:y = reorder(feature, attr_importance))) +
1731935766763:geom_bar(stat = "identity") +
1731935766763:xlab("Importance score") +
1731935766763:ylab("Feature")
1731935793190:subset <- cutoff.k(weights |>
1731935793190:column_to_rownames("feature"),
1731935793190:5)
1731935793834:subset
1731935794290:f <- as.simple.formula(subset, "type")
1731935794534:f
1731935794969:## type ~ feathers + milk + backbone + toothed + eggs
1731935794970:## <environment: 0x6522c21006e8>
1731935794970:m <- Zoo_train |> rpart(f, data = _)
1731935795422:rpart.plot(m, extra = 2, roundint = FALSE)
1731935866230:Zoo_train |>
1731935866230:gain.ratio(type ~ ., data = _) |>
1731935866230:as_tibble(rownames = "feature") |>
1731935866231:arrange(desc(attr_importance))
1731935867631:# Feature Subset Selection
1731935867631:Zoo_train |>
1731935867631:cfs(type ~ ., data = _)
1731935868598:evaluator <- function(subset) {
1731935868598:model <- Zoo_train |>
1731935868598:train(as.simple.formula(subset, "type"),
1731935868599:data = _,
1731935868599:method = "rpart",
1731935868599:trControl = trainControl(method = "boot", number = 5),
1731935868599:tuneLength = 0)
1731935868599:results <- model$resample$Accuracy
1731935868600:cat("Trying features:", paste(subset, collapse = " + "), "\n")
1731935868600:m <- mean(results)
1731935868600:cat("Accuracy:", round(m, 2), "\n\n")
1731935868600:m
1731935868601:}
1731935869826:features <- Zoo_train |>
1731935869826:colnames() |>
1731935869826:setdiff("type")
1731935870479:# Using Dummy Variables for Factors
1731935870479:tree_predator <- Zoo_train |>
1731935870479:rpart(predator ~ type, data = _)
1731935871059:rpart.plot(tree_predator, extra = 2, roundint = FALSE)
1731935894369:Zoo_train_dummy <- as_tibble(class2ind(Zoo_train$type)) |>
1731935894369:mutate(across(everything(), as.factor)) |>
1731935894369:add_column(predator = Zoo_train$predator)
1731935894952:Zoo_train_dummy
1731935895426:##  3 1      0     0       0     0         0      0
1731935895427:##  4 1      0     0       0     0         0      0
1731935895427:##  5 1      0     0       0     0         0      0
1731935895427:##  6 1      0     0       0     0         0      0
1731935895427:##  7 0      0     0       1     0         0      0
1731935895427:##  8 0      0     0       1     0         0      0
1731935895427:##  9 1      0     0       0     0         0      0
1731935895427:## 10 1      0     0       0     0         0      0
1731935895427:## # ℹ 73 more rows
1731935895427:## # ℹ 1 more variable: predator <fct>
1731935895427:tree_predator <- Zoo_train_dummy |>
1731935895427:rpart(predator ~ .,
1731935895428:data = _,
1731935895428:control = rpart.control(minsplit = 2, cp = 0.01))
1731935896224:rpart.plot(tree_predator, roundint = FALSE)
1731935916931:fit <- Zoo_train |>
1731935916931:train(predator ~ type,
1731935916931:data = _,
1731935916932:method = "rpart",
1731935916932:control = rpart.control(minsplit = 2),
1731935916932:tuneGrid = data.frame(cp = 0.01))
1731935917467:fit
1731935918100:##
1731935918101:## No pre-processing
1731935918101:## Resampling: Bootstrapped (25 reps)
1731935918101:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1731935918101:## Resampling results:
1731935918101:##
1731935918101:##   Accuracy  Kappa
1731935918101:##   0.5635    0.1166
1731935918101:##
1731935918101:## Tuning parameter 'cp' was held constant at a value of 0.01
1731935918102:rpart.plot(fit$finalModel, extra = 2)
1732015372082:# Chapter 1: Introduction
1732015372082:# Shakira B. Regalado
1732015372082:# BSIT 3B
1732015372082:# Install necessary libraries
1732015372082:pkgs <- c('tidyverse')
1732015372083:pkgs_install <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
1732015372177:if(length(pkgs_install)) install.packages(pkgs_install)
1732015372177:# Vectors
1732015372177:x <- c(10.4, 5.6, Inf, NA, 21.7)
1732015372177:x
1732015372178:## [1] 10.4  5.6  Inf   NA 21.7
1732015372178:3:10
1732015372178:## [1]  3  4  5  6  7  8  9 10
1732015372178:y <- seq(from = 0, to = 1, length.out = 5)
1732015372178:y
1732015372178:## [1] 0.00 0.25 0.50 0.75 1.00
1732015372178:# Vectorized Operations
1732015372178:x + 1
1732015372178:## [1] 11.4  6.6  Inf   NA 22.7
1732015372178:x > y
1732015372178:## [1] TRUE TRUE TRUE   NA TRUE
1732015372178:# Subsetting Vectors
1732015372178:x[1:3]
1732015372178:## [1] 10.4  5.6  Inf
1732015372178:x[-1]
1732015372179:## [1]  5.6  Inf   NA 21.7
1732015372179:is.na(x)
1732015372179:## [1] FALSE FALSE FALSE  TRUE FALSE
1732015372179:x[!is.na(x)] # select all non-missing values
1732015372179:## [1] 10.4  5.6  Inf 21.7
1732015372179:x[!is.finite(x)] <- NA
1732015372179:x
1732015372179:## [1] 10.4  5.6   NA   NA 21.7
1732015372179:# Functions
1732015372179:inc <- function(x, by = 1) {
1732015372179:x + by
1732015372179:}
1732015372179:inc(x, by = 2)
1732015372179:## [1] 12.4  7.6   NA   NA 23.7
1732015372179:# Strings
1732015372179:string <- c("Hello", "Goodbye")
1732015372179:string
1732015372180:## [1] "Hello"   "Goodbye"
1732015372180:paste(string, "World!")
1732015372180:## [1] "Hello World!"   "Goodbye World!"
1732015372180:# Plotting
1732015372180:plot(x, y)
1732015372197:# Objects
1732015372197:x
1732015372197:## [1] 10.4  5.6   NA   NA 21.7
1732015372197:summary(x)
1732015372199:##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
1732015372199:##     5.6     8.0    10.4    12.6    16.1    21.7       2
1732015372199:class(x)
1732015372199:## [1] "numeric"
1732015372199:str(x)
1732015372200:##  num [1:5] 10.4 5.6 NA NA 21.7
1732015372200:# Tidyverse
1732015372200:library(tidyverse)
1732015372404:## ── Attaching core tidyverse packages ──── tidyverse 2.0.0 ──
1732015372404:## ✔ dplyr     1.1.4     ✔ readr     2.1.5
1732015372404:## ✔ forcats   1.0.0     ✔ stringr   1.5.1
1732015372404:## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1
1732015372404:## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1
1732015372404:## ✔ purrr     1.0.2
1732015372404:## ── Conflicts ────────────────────── tidyverse_conflicts() ──
1732015372404:## ✖ dplyr::filter() masks stats::filter()
1732015372404:## ✖ dplyr::lag()    masks stats::lag()
1732015372404:## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
1732015372404:# Tibbles
1732015372404:fruit <- tibble(
1732015372404:name = c("apple", "banana", "mango", "orange", "lime"),
1732015372404:price = c(2.5, 2.0, 4.0, 3.5, 2.5),
1732015372404:vitamin_c = c(20, 45, 130, 250, 132),
1732015372404:type = c("pome", "tropical", "tropical", "citrus", "citrus"))
1732015372406:fruit
1732015372439:## # A tibble: 5 × 4
1732015372439:##   name   price vitamin_c type
1732015372439:##   <chr>  <dbl>     <dbl> <chr>
1732015372439:## 1 apple    2.5        20 pome
1732015372439:## 2 banana   2          45 tropical
1732015372439:## 3 mango    4         130 tropical
1732015372439:## 4 orange   3.5       250 citrus
1732015372439:## 5 lime     2.5       132 citrus
1732015372439:# Transformations
1732015372439:affordable_vitamin_c_sources <- fruit |>
1732015372439:mutate(vitamin_c_per_dollar = vitamin_c / price) |>
1732015372439:filter(vitamin_c_per_dollar > 20) |>
1732015372439:arrange(desc(vitamin_c_per_dollar))
1732015372446:affordable_vitamin_c_sources
1732015372460:## # A tibble: 4 × 5
1732015372460:##   name   price vitamin_c type     vitamin_c_per_dollar
1732015372460:##   <chr>  <dbl>     <dbl> <chr>                   <dbl>
1732015372460:## 1 orange   3.5       250 citrus                   71.4
1732015372460:## 2 lime     2.5       132 citrus                   52.8
1732015372460:## 3 mango    4         130 tropical                 32.5
1732015372460:## 4 banana   2          45 tropical                 22.5
1732015372460:affordable_vitamin_c_sources |>
1732015372460:summarize(min = min(price),
1732015372460:mean = mean(price),
1732015372460:max = max(price))
1732015372473:## # A tibble: 1 × 3
1732015372473:##     min  mean   max
1732015372473:##   <dbl> <dbl> <dbl>
1732015372473:## 1     2     3     4
1732015372473:affordable_vitamin_c_sources |>
1732015372473:group_by(type) |>
1732015372473:summarize(min = min(price),
1732015372473:mean = mean(price),
1732015372473:max = max(price))
1732015372488:## # A tibble: 2 × 4
1732015372488:##   type       min  mean   max
1732015372488:##   <chr>    <dbl> <dbl> <dbl>
1732015372488:## 1 citrus     2.5     3   3.5
1732015372488:## 2 tropical   2       3   4
1732015372488:affordable_vitamin_c_sources |>
1732015372488:summarize(across(c(price, vitamin_c), mean))
1732015372499:## # A tibble: 1 × 2
1732015372499:##   price vitamin_c
1732015372499:##   <dbl>     <dbl>
1732015372499:## 1     3      139.
1732015372500:# ggplot2
1732015372500:# ggplot(data, mapping = aes(x = ..., y = ..., color = ...)) +
1732015372500:# geom_point()
1732015372500:ggplot(fruit, aes(x = price, y = vitamin_c)) +
1732015372500:geom_point()
1732015372673:ggplot(fruit, aes(x = price, y = vitamin_c)) +
1732015372673:geom_point() +
1732015372673:geom_smooth(method = "lm", se = FALSE)
1732015373229:## `geom_smooth()` using formula = 'y ~ x'
1732015373229:ggplot(fruit, aes(x = name, y = vitamin_c)) +
1732015373229:geom_bar(stat = "identity")
1732015386276:str(data)
1732015392722:str(data)
1732015900690:# Chapter 2: Data
1732015900690:# Shakira B. Regalado
1732015900690:# BSIT 3B
1732015900691:# Install necessary libraries
1732015900691:pkgs <- c("arules", "caret", "factoextra", "GGally",
1732015900691:"ggcorrplot", "hexbin", "palmerpenguins", "plotly",
1732015900691:"proxy", "seriation", "tidyverse")
1732015900691:pkgs_install <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
1732015900700:if(length(pkgs_install)) install.packages(pkgs_install)
1732015900700:# Types of Data
1732015900700:# Attributes and Measurement
1732015900700:factor(c("red", "green", "green", "blue"))
1732015900702:## [1] red   green green blue
1732015900702:## Levels: blue green red
1732015900702:ordered(c("S", "L", "M", "S"),
1732015900702:levels = c("S", "M", "L"))
1732015900703:## [1] S L M S
1732015900703:## Levels: S < M < L
1732015900703:c(1, 2, 3, 4, 3, 3)
1732015900703:## [1] 1 2 3 4 3 3
1732015900703:# The Iris Dataset
1732015900703:library(tidyverse)
1732015900703:data(iris)
1732015900713:iris <- as_tibble(iris)
1732015900725:iris
1732015900763:## # A tibble: 150 × 5
1732015900763:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015900763:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015900764:##  1          5.1         3.5          1.4         0.2 setosa
1732015900764:##  2          4.9         3            1.4         0.2 setosa
1732015900764:##  3          4.7         3.2          1.3         0.2 setosa
1732015900764:##  4          4.6         3.1          1.5         0.2 setosa
1732015900764:##  5          5           3.6          1.4         0.2 setosa
1732015900764:##  6          5.4         3.9          1.7         0.4 setosa
1732015900764:##  7          4.6         3.4          1.4         0.3 setosa
1732015900764:##  8          5           3.4          1.5         0.2 setosa
1732015900764:##  9          4.4         2.9          1.4         0.2 setosa
1732015900764:## 10          4.9         3.1          1.5         0.1 setosa
1732015900764:## # ℹ 140 more rows
1732015900764:print(iris, n = 3, width = Inf)
1732015900812:## # A tibble: 150 × 5
1732015900812:##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015900812:##          <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015900812:## 1          5.1         3.5          1.4         0.2 setosa
1732015900812:## 2          4.9         3            1.4         0.2 setosa
1732015900812:## 3          4.7         3.2          1.3         0.2 setosa
1732015900812:## # ℹ 147 more rows
1732015900812:# Data Quality
1732015900812:summary(iris)
1732015900815:##   Sepal.Length   Sepal.Width    Petal.Length   Petal.Width
1732015900815:##  Min.   :4.30   Min.   :2.00   Min.   :1.00   Min.   :0.1
1732015900815:##  1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60   1st Qu.:0.3
1732015900815:##  Median :5.80   Median :3.00   Median :4.35   Median :1.3
1732015900815:##  Mean   :5.84   Mean   :3.06   Mean   :3.76   Mean   :1.2
1732015900815:##  3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10   3rd Qu.:1.8
1732015900815:##  Max.   :7.90   Max.   :4.40   Max.   :6.90   Max.   :2.5
1732015900815:##        Species
1732015900815:##  setosa    :50
1732015900815:##  versicolor:50
1732015900815:##  virginica :50
1732015900815:##
1732015900815:##
1732015900815:##
1732015900815:iris |>
1732015900815:summarize(mean = mean(Sepal.Length))
1732015900826:## # A tibble: 1 × 1
1732015900826:##    mean
1732015900826:##   <dbl>
1732015900826:## 1  5.84
1732015900826:iris |>
1732015900826:summarize(across(where(is.numeric), mean))
1732015900846:## # A tibble: 1 × 4
1732015900846:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015900846:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015900846:## 1         5.84        3.06         3.76        1.20
1732015900846:library(GGally)
1732015900909:## Registered S3 method overwritten by 'GGally':
1732015900909:##   method from
1732015900909:##   +.gg   ggplot2
1732015900909:ggpairs(iris, aes(color = Species), progress = FALSE)
1732015902437:## `stat_bin()` using `bins = 30`. Pick better value with
1732015902437:## `binwidth`.
1732015902437:## `stat_bin()` using `bins = 30`. Pick better value with
1732015902437:## `binwidth`.
1732015902437:## `stat_bin()` using `bins = 30`. Pick better value with
1732015902437:## `binwidth`.
1732015902437:## `stat_bin()` using `bins = 30`. Pick better value with
1732015902437:## `binwidth`.
1732015902437:clean.data <- iris |>
1732015902437:drop_na() |>
1732015902437:unique()
1732015902438:summary(clean.data)
1732015902439:##   Sepal.Length   Sepal.Width    Petal.Length
1732015902439:##  Min.   :4.30   Min.   :2.00   Min.   :1.00
1732015902439:##  1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60
1732015902439:##  Median :5.80   Median :3.00   Median :4.30
1732015902439:##  Mean   :5.84   Mean   :3.06   Mean   :3.75
1732015902439:##  3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10
1732015902439:##  Max.   :7.90   Max.   :4.40   Max.   :6.90
1732015902439:##   Petal.Width         Species
1732015902439:##  Min.   :0.10   setosa    :50
1732015902439:##  1st Qu.:0.30   versicolor:50
1732015902439:##  Median :1.30   virginica :49
1732015902439:##  Mean   :1.19
1732015902439:##  3rd Qu.:1.80
1732015902439:##  Max.   :2.50
1732015902439:# Data Preprocessing
1732015902439:# Aggregation
1732015902439:iris |>
1732015902439:group_by(Species) |>
1732015902439:summarize(across(everything(), mean))
1732015902451:## # A tibble: 3 × 5
1732015902451:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015902451:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1732015902451:## 1 setosa           5.01        3.43         1.46       0.246
1732015902451:## 2 versico…         5.94        2.77         4.26       1.33
1732015902451:## 3 virgini…         6.59        2.97         5.55       2.03
1732015902451:iris |>
1732015902451:group_by(Species) |>
1732015902451:summarize(across(everything(), median))
1732015902470:## # A tibble: 3 × 5
1732015902470:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015902470:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1732015902470:## 1 setosa            5           3.4         1.5          0.2
1732015902470:## 2 versico…          5.9         2.8         4.35         1.3
1732015902470:## 3 virgini…          6.5         3           5.55         2
1732015902470:# Random Sampling
1732015902470:sample(c("A", "B", "C"), size = 10, replace = TRUE)
1732015902470:##  [1] "C" "A" "C" "C" "C" "B" "A" "A" "C" "B"
1732015902470:take <- sample(seq(nrow(iris)), size = 15)
1732015902470:take
1732015902470:##  [1]  99 113 103 119  10 130  67  27  38  79  71  30 138  84
1732015902471:## [15] 110
1732015902471:iris[take, ]
1732015902482:## # A tibble: 15 × 5
1732015902482:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015902482:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015902482:##  1          5.1         2.5          3           1.1 versic…
1732015902482:##  2          6.8         3            5.5         2.1 virgin…
1732015902482:##  3          7.1         3            5.9         2.1 virgin…
1732015902482:##  4          7.7         2.6          6.9         2.3 virgin…
1732015902482:##  5          4.9         3.1          1.5         0.1 setosa
1732015902482:##  6          7.2         3            5.8         1.6 virgin…
1732015902482:##  7          5.6         3            4.5         1.5 versic…
1732015902482:##  8          5           3.4          1.6         0.4 setosa
1732015902483:##  9          4.9         3.6          1.4         0.1 setosa
1732015902483:## 10          6           2.9          4.5         1.5 versic…
1732015902483:## 11          5.9         3.2          4.8         1.8 versic…
1732015902483:## 12          4.7         3.2          1.6         0.2 setosa
1732015902483:## 13          6.4         3.1          5.5         1.8 virgin…
1732015902483:## 14          6           2.7          5.1         1.6 versic…
1732015902483:## 15          7.2         3.6          6.1         2.5 virgin…
1732015902483:set.seed(1000)
1732015902483:s <- iris |>
1732015902483:slice_sample(n = 15)
1732015902484:library(GGally)
1732015902485:ggpairs(s, aes(color = Species), progress = FALSE)
1732015904163:## `stat_bin()` using `bins = 30`. Pick better value with
1732015904163:## `binwidth`.
1732015904163:## `stat_bin()` using `bins = 30`. Pick better value with
1732015904163:## `binwidth`.
1732015904163:## `stat_bin()` using `bins = 30`. Pick better value with
1732015904163:## `binwidth`.
1732015904163:## `stat_bin()` using `bins = 30`. Pick better value with
1732015904163:## `binwidth`.
1732015904163:# Stratified Sampling
1732015904163:set.seed(1000)
1732015904163:s2 <- iris |>
1732015904163:group_by(Species) |>
1732015904163:slice_sample(n = 5) |>
1732015904163:ungroup()
1732015904166:library(GGally)
1732015904166:ggpairs(s2, aes(color = Species), progress = FALSE)
1732015905664:## `stat_bin()` using `bins = 30`. Pick better value with
1732015905664:## `binwidth`.
1732015905664:## `stat_bin()` using `bins = 30`. Pick better value with
1732015905664:## `binwidth`.
1732015905664:## `stat_bin()` using `bins = 30`. Pick better value with
1732015905664:## `binwidth`.
1732015905664:## `stat_bin()` using `bins = 30`. Pick better value with
1732015905664:## `binwidth`.
1732015905664:# Principal Components Analysis (PCA
1732015905664:plotly::plot_ly(iris,
1732015905664:x = ~Sepal.Length,
1732015905664:y = ~Petal.Length,
1732015905664:z = ~Sepal.Width,
1732015905664:color = ~Species, size = 1) |>
1732015905664:plotly::add_markers()
1732015906120:pc <- iris |>
1732015906120:select(-Species) |>
1732015906120:as.matrix() |>
1732015906120:prcomp()
1732015906439:summary(pc)
1732015906447:## Importance of components:
1732015906448:##                          PC1    PC2    PC3     PC4
1732015906448:## Standard deviation     2.056 0.4926 0.2797 0.15439
1732015906448:## Proportion of Variance 0.925 0.0531 0.0171 0.00521
1732015906448:## Cumulative Proportion  0.925 0.9777 0.9948 1.00000
1732015906448:plot(pc, type = "line")
1732015906471:str(pc)
1732015906475:## List of 5
1732015906475:##  $ sdev    : num [1:4] 2.056 0.493 0.28 0.154
1732015906475:##  $ rotation: num [1:4, 1:4] 0.3614 -0.0845 0.8567 0.3583 -0.6566 ...
1732015906475:##   ..- attr(*, "dimnames")=List of 2
1732015906475:##   .. ..$ : chr [1:4] "Sepal.Length" "Sepal.Width" "Petal.Length" "Petal.Width"
1732015906475:##   .. ..$ : chr [1:4] "PC1" "PC2" "PC3" "PC4"
1732015906475:##  $ center  : Named num [1:4] 5.84 3.06 3.76 1.2
1732015906475:##   ..- attr(*, "names")= chr [1:4] "Sepal.Length" "Sepal.Width" "Petal.Length" "Petal.Width"
1732015906475:##  $ scale   : logi FALSE
1732015906475:##  $ x       : num [1:150, 1:4] -2.68 -2.71 -2.89 -2.75 -2.73 ...
1732015906475:##   ..- attr(*, "dimnames")=List of 2
1732015906475:##   .. ..$ : NULL
1732015906475:##   .. ..$ : chr [1:4] "PC1" "PC2" "PC3" "PC4"
1732015906475:##  - attr(*, "class")= chr "prcomp"
1732015906475:iris_projected <- as_tibble(pc$x) |>
1732015906475:add_column(Species = iris$Species)
1732015906476:ggplot(iris_projected, aes(x = PC1, y = PC2, color = Species)) +
1732015906476:geom_point()
1732015906589:ggplot(iris_projected,
1732015906589:aes(x = PC1, y = 0, color = Species)) +
1732015906589:geom_point() +
1732015906589:scale_y_continuous(expand=c(0,0)) +
1732015906589:theme(axis.text.y = element_blank(),
1732015906589:axis.title.y = element_blank()
1732015906589:)
1732015906663:library(factoextra)
1732015906699:fviz_pca(pc)
1732015906926:fviz_pca_var(pc)
1732015906994:# Multi-Dimensional Scaling (MDS)
1732015906994:d <- iris |>
1732015906994:select(-Species) |>
1732015906994:dist()
1732015906995:fit <- cmdscale(d, k = 2)
1732015907000:colnames(fit) <- c("comp1", "comp2")
1732015907000:fit <- as_tibble(fit) |>
1732015907000:add_column(Species = iris$Species)
1732015907001:ggplot(fit, aes(x = comp1, y = comp2, color = Species)) +
1732015907001:geom_point()
1732015907072:# Other Nonlinear Dimensionality Reduction Methods
1732015907072:iris |>
1732015907073:pull(Sepal.Width) |>
1732015907073:cut(breaks = 3)
1732015907074:##   [1] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015907074:##   [6] (3.6,4.4] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015907074:##  [11] (3.6,4.4] (2.8,3.6] (2.8,3.6] (2.8,3.6] (3.6,4.4]
1732015907074:##  [16] (3.6,4.4] (3.6,4.4] (2.8,3.6] (3.6,4.4] (3.6,4.4]
1732015907074:##  [21] (2.8,3.6] (3.6,4.4] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015907074:##  [26] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015907074:##  [31] (2.8,3.6] (2.8,3.6] (3.6,4.4] (3.6,4.4] (2.8,3.6]
1732015907074:##  [36] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015907075:##  [41] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6] (3.6,4.4]
1732015907075:##  [46] (2.8,3.6] (3.6,4.4] (2.8,3.6] (3.6,4.4] (2.8,3.6]
1732015907075:##  [51] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2,2.8]   (2,2.8]
1732015907075:##  [56] (2,2.8]   (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]
1732015907075:##  [61] (2,2.8]   (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6]
1732015907075:##  [66] (2.8,3.6] (2.8,3.6] (2,2.8]   (2,2.8]   (2,2.8]
1732015907075:##  [71] (2.8,3.6] (2,2.8]   (2,2.8]   (2,2.8]   (2.8,3.6]
1732015907075:##  [76] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6] (2,2.8]
1732015907075:##  [81] (2,2.8]   (2,2.8]   (2,2.8]   (2,2.8]   (2.8,3.6]
1732015907075:##  [86] (2.8,3.6] (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]
1732015907075:##  [91] (2,2.8]   (2.8,3.6] (2,2.8]   (2,2.8]   (2,2.8]
1732015907075:##  [96] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2,2.8]   (2,2.8]
1732015907075:## [101] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015907075:## [106] (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]   (2.8,3.6]
1732015907075:## [111] (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]   (2,2.8]
1732015907075:## [116] (2.8,3.6] (2.8,3.6] (3.6,4.4] (2,2.8]   (2,2.8]
1732015907075:## [121] (2.8,3.6] (2,2.8]   (2,2.8]   (2,2.8]   (2.8,3.6]
1732015907075:## [126] (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]   (2.8,3.6]
1732015907075:## [131] (2,2.8]   (3.6,4.4] (2,2.8]   (2,2.8]   (2,2.8]
1732015907075:## [136] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015907075:## [141] (2.8,3.6] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6]
1732015907075:## [146] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015907075:## Levels: (2,2.8] (2.8,3.6] (3.6,4.4]
1732015907075:library(arules)
1732015907336:## Loading required package: Matrix
1732015907336:##
1732015907336:## Attaching package: 'Matrix'
1732015907336:## The following objects are masked from 'package:tidyr':
1732015907336:##
1732015907336:##     expand, pack, unpack
1732015907336:##
1732015907336:## Attaching package: 'arules'
1732015907336:## The following object is masked from 'package:dplyr':
1732015907336:##
1732015907336:##     recode
1732015907336:## The following objects are masked from 'package:base':
1732015907336:##
1732015907336:##     abbreviate, write
1732015907336:iris |> pull(Petal.Width) |>
1732015907336:discretize(method = "interval", breaks = 3)
1732015907338:##   [1] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##   [6] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [11] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [16] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [21] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [26] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [31] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [36] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [41] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [46] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015907338:##  [51] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:##  [56] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:##  [61] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:##  [66] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:##  [71] [1.7,2.5] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:##  [76] [0.9,1.7) [0.9,1.7) [1.7,2.5] [0.9,1.7) [0.9,1.7)
1732015907338:##  [81] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:##  [86] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:##  [91] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:##  [96] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015907338:## [101] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015907338:## [106] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015907338:## [111] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015907338:## [116] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [0.9,1.7)
1732015907339:## [121] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015907339:## [126] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [0.9,1.7)
1732015907339:## [131] [1.7,2.5] [1.7,2.5] [1.7,2.5] [0.9,1.7) [0.9,1.7)
1732015907339:## [136] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015907339:## [141] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015907339:## [146] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015907339:## attr(,"discretized:breaks")
1732015907339:## [1] 0.1 0.9 1.7 2.5
1732015907339:## attr(,"discretized:method")
1732015907339:## [1] interval
1732015907339:## Levels: [0.1,0.9) [0.9,1.7) [1.7,2.5]
1732015907339:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1732015907339:geom_vline(
1732015907339:xintercept = iris |>
1732015907339:pull(Petal.Width) |>
1732015907339:discretize(method = "interval", breaks = 3, onlycuts = TRUE),
1732015907339:color = "blue"
1732015907339:) +
1732015907339:labs(title = "Discretization: interval",
1732015907339:subtitle = "Blue lines are discretization boundaries")
1732015907395:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1732015907395:geom_vline(
1732015907395:xintercept = iris |>
1732015907395:pull(Petal.Width) |>
1732015907395:discretize(method = "frequency", breaks = 3, onlycuts = TRUE),
1732015907395:color = "blue"
1732015907395:) +
1732015907395:labs(title = "Discretization: frequency",
1732015907395:subtitle = "Blue lines are discretization boundaries")
1732015907456:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1732015907456:geom_vline(
1732015907456:xintercept = iris |>
1732015907456:pull(Petal.Width) |>
1732015907457:discretize(method = "cluster", breaks = 3, onlycuts = TRUE),
1732015907457:color = "blue"
1732015907457:) +
1732015907457:labs(title = "Discretization: cluster",
1732015907457:subtitle = "Blue lines are discretization boundaries")
1732015907531:# Variable Transformation: Standardization
1732015907531:scale_numeric <- function(x)
1732015907531:x |>
1732015907531:mutate(across(where(is.numeric),
1732015907531:function(y) (y - mean(y, na.rm = TRUE)) / sd(y, na.rm = TRUE)))
1732015907531:iris.scaled <- iris |>
1732015907531:scale_numeric()
1732015907533:iris.scaled
1732015907548:## # A tibble: 150 × 5
1732015907548:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015907548:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015907548:##  1       -0.898      1.02          -1.34       -1.31 setosa
1732015907548:##  2       -1.14      -0.132         -1.34       -1.31 setosa
1732015907548:##  3       -1.38       0.327         -1.39       -1.31 setosa
1732015907548:##  4       -1.50       0.0979        -1.28       -1.31 setosa
1732015907548:##  5       -1.02       1.25          -1.34       -1.31 setosa
1732015907548:##  6       -0.535      1.93          -1.17       -1.05 setosa
1732015907548:##  7       -1.50       0.786         -1.34       -1.18 setosa
1732015907548:##  8       -1.02       0.786         -1.28       -1.31 setosa
1732015907548:##  9       -1.74      -0.361         -1.34       -1.31 setosa
1732015907548:## 10       -1.14       0.0979        -1.28       -1.44 setosa
1732015907548:## # ℹ 140 more rows
1732015907548:summary(iris.scaled)
1732015907549:##   Sepal.Length      Sepal.Width      Petal.Length
1732015907549:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1732015907549:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1732015907549:##  Median :-0.0523   Median :-0.132   Median : 0.335
1732015907550:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1732015907550:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1732015907550:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1732015907550:##   Petal.Width           Species
1732015907550:##  Min.   :-1.442   setosa    :50
1732015907550:##  1st Qu.:-1.180   versicolor:50
1732015907550:##  Median : 0.132   virginica :50
1732015907550:##  Mean   : 0.000
1732015907550:##  3rd Qu.: 0.788
1732015907550:##  Max.   : 1.706
1732015907550:# Measures of Similarity and Dissimilarit
1732015907550:# Minkowsky Distance
1732015907550:iris_sample <- iris.scaled |>
1732015907550:select(-Species) |>
1732015907550:slice(1:5)
1732015907551:iris_sample
1732015907561:## # A tibble: 5 × 4
1732015907561:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015907561:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015907561:## 1       -0.898      1.02          -1.34       -1.31
1732015907561:## 2       -1.14      -0.132         -1.34       -1.31
1732015907561:## 3       -1.38       0.327         -1.39       -1.31
1732015907561:## 4       -1.50       0.0979        -1.28       -1.31
1732015907562:## 5       -1.02       1.25          -1.34       -1.31
1732015907562:dist(iris_sample, method = "euclidean")
1732015907562:##        1      2      3      4
1732015907562:## 2 1.1723
1732015907562:## 3 0.8428 0.5216
1732015907562:## 4 1.1000 0.4326 0.2829
1732015907562:## 5 0.2593 1.3819 0.9883 1.2460
1732015907562:dist(iris_sample, method = "manhattan")
1732015907562:##        1      2      3      4
1732015907562:## 2 1.3887
1732015907562:## 3 1.2280 0.7570
1732015907562:## 4 1.5782 0.6484 0.4635
1732015907562:## 5 0.3502 1.4973 1.3367 1.6868
1732015907563:dist(iris_sample, method = "maximum")
1732015907563:##        1      2      3      4
1732015907563:## 2 1.1471
1732015907563:## 3 0.6883 0.4589
1732015907563:## 4 0.9177 0.3623 0.2294
1732015907563:## 5 0.2294 1.3766 0.9177 1.1471
1732015907563:# Distances for Binary Data
1732015907563:b <- rbind(
1732015907563:c(0,0,0,1,1,1,1,0,0,1),
1732015907563:c(0,0,1,1,1,0,0,1,0,0)
1732015907563:)
1732015907563:b
1732015907563:##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
1732015907563:## [1,]    0    0    0    1    1    1    1    0    0     1
1732015907563:## [2,]    0    0    1    1    1    0    0    1    0     0
1732015907563:b_logical <- apply(b, MARGIN = 2, as.logical)
1732015907564:b_logical
1732015907564:##       [,1]  [,2]  [,3] [,4] [,5]  [,6]  [,7]  [,8]  [,9]
1732015907564:## [1,] FALSE FALSE FALSE TRUE TRUE  TRUE  TRUE FALSE FALSE
1732015907564:## [2,] FALSE FALSE  TRUE TRUE TRUE FALSE FALSE  TRUE FALSE
1732015907564:##      [,10]
1732015907564:## [1,]  TRUE
1732015907564:## [2,] FALSE
1732015907564:# Hamming Distance
1732015907565:dist(b, method = "manhattan")
1732015907566:##   1
1732015907566:## 2 5
1732015907567:dist(b, method = "euclidean")^2
1732015907569:##   1
1732015907569:## 2 5
1732015907569:# Jaccard Index
1732015907569:dist(b, method = "binary")
1732015907569:##        1
1732015907569:## 2 0.7143
1732015907569:# Distances for Mixed Data
1732015907569:people <- tibble(
1732015907569:height = c(      160,    185,    170),
1732015907569:weight = c(       52,     90,     75),
1732015907569:sex    = c( "female", "male", "male")
1732015907569:)
1732015907578:people
1732015907593:## # A tibble: 3 × 3
1732015907593:##   height weight sex
1732015907593:##    <dbl>  <dbl> <chr>
1732015907593:## 1    160     52 female
1732015907593:## 2    185     90 male
1732015907593:## 3    170     75 male
1732015907593:people <- people |>
1732015907593:mutate(across(where(is.character), factor))
1732015907594:people
1732015907602:## # A tibble: 3 × 3
1732015907602:##   height weight sex
1732015907602:##    <dbl>  <dbl> <fct>
1732015907602:## 1    160     52 female
1732015907602:## 2    185     90 male
1732015907602:## 3    170     75 male
1732015907602:# Gower’s Coefficient
1732015907602:library(proxy)
1732015907686:##
1732015907686:## Attaching package: 'proxy'
1732015907686:## The following object is masked from 'package:Matrix':
1732015907686:##
1732015907686:##     as.matrix
1732015907686:## The following objects are masked from 'package:stats':
1732015907686:##
1732015907686:##     as.dist, dist
1732015907686:## The following object is masked from 'package:base':
1732015907686:##
1732015907686:##     as.matrix
1732015907686:d_Gower <- dist(people, method = "Gower")
1732015907689:d_Gower
1732015907689:##        1      2
1732015907689:## 2 1.0000
1732015907689:## 3 0.6684 0.3316
1732015907689:# Using Euclidean Distance with Mixed Data
1732015907689:library(caret)
1732015907702:## Loading required package: lattice
1732015907702:##
1732015907702:## Attaching package: 'caret'
1732015907702:## The following object is masked from 'package:purrr':
1732015907702:##
1732015907702:##     lift
1732015907702:data_dummy <- dummyVars(~., people) |>
1732015907702:predict(people)
1732015907704:data_dummy
1732015907704:##   height weight sex.female sex.male
1732015907704:## 1    160     52          1        0
1732015907704:## 2    185     90          0        1
1732015907704:## 3    170     75          0        1
1732015907704:weight_matrix <- matrix(c(1, 1, 1/2, 1/2),
1732015907704:ncol = 4,
1732015907704:nrow = nrow(data_dummy),
1732015907704:byrow = TRUE)
1732015907705:data_dummy_scaled <- scale(data_dummy) * weight_matrix
1732015907705:d_dummy <- dist(data_dummy_scaled)
1732015907705:d_dummy
1732015907705:##       1     2
1732015907705:## 2 3.064
1732015907705:## 3 1.891 1.427
1732015907705:ggplot(tibble(d_dummy, d_Gower), aes(x = d_dummy, y = d_Gower)) +
1732015907705:geom_point() +
1732015907705:geom_smooth(method = "lm", se = FALSE)
1732015907836:## Don't know how to automatically pick scale for object of
1732015907836:## type <dist>. Defaulting to continuous.
1732015907836:## Don't know how to automatically pick scale for object of
1732015907836:## type <dist>. Defaulting to continuous.
1732015907836:## `geom_smooth()` using formula = 'y ~ x'
1732015907836:# More Proximity Measure
1732015907836:library(proxy)
1732015907836:pr_DB$get_entry_names()
1732015907836:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1732015907836:##  [4] "Mountford"       "Fager"           "Russel"
1732015907836:##  [7] "simple matching" "Hamman"          "Faith"
1732015907836:## [10] "Tanimoto"        "Dice"            "Phi"
1732015907836:## [13] "Stiles"          "Michael"         "Mozley"
1732015907837:## [16] "Yule"            "Yule2"           "Ochiai"
1732015907837:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1732015907837:## [22] "angular"         "eJaccard"        "eDice"
1732015907837:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1732015907837:## [28] "Tschuprow"       "Cramer"          "Pearson"
1732015907837:## [31] "Gower"           "Euclidean"       "Mahalanobis"
1732015907837:## [34] "Bhjattacharyya"  "Manhattan"       "supremum"
1732015907837:## [37] "Minkowski"       "Canberra"        "Wave"
1732015907837:## [40] "divergence"      "Kullback"        "Bray"
1732015907837:## [43] "Soergel"         "Levenshtein"     "Podani"
1732015907837:## [46] "Chord"           "Geodesic"        "Whittaker"
1732015907837:## [49] "Hellinger"       "fJaccard"
1732015907837:# Data Exploration
1732015907837:library(tidyverse)
1732015907837:data(iris)
1732015907840:iris <- as_tibble(iris)
1732015907841:iris
1732015907859:## # A tibble: 150 × 5
1732015907859:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015907859:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015907859:##  1          5.1         3.5          1.4         0.2 setosa
1732015907859:##  2          4.9         3            1.4         0.2 setosa
1732015907859:##  3          4.7         3.2          1.3         0.2 setosa
1732015907859:##  4          4.6         3.1          1.5         0.2 setosa
1732015907859:##  5          5           3.6          1.4         0.2 setosa
1732015907859:##  6          5.4         3.9          1.7         0.4 setosa
1732015907859:##  7          4.6         3.4          1.4         0.3 setosa
1732015907859:##  8          5           3.4          1.5         0.2 setosa
1732015907859:##  9          4.4         2.9          1.4         0.2 setosa
1732015907859:## 10          4.9         3.1          1.5         0.1 setosa
1732015907859:## # ℹ 140 more rows
1732015907859:# Basic statistics
1732015907859:summary(iris)
1732015907860:##   Sepal.Length   Sepal.Width    Petal.Length   Petal.Width
1732015907860:##  Min.   :4.30   Min.   :2.00   Min.   :1.00   Min.   :0.1
1732015907860:##  1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60   1st Qu.:0.3
1732015907861:##  Median :5.80   Median :3.00   Median :4.35   Median :1.3
1732015907861:##  Mean   :5.84   Mean   :3.06   Mean   :3.76   Mean   :1.2
1732015907861:##  3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10   3rd Qu.:1.8
1732015907861:##  Max.   :7.90   Max.   :4.40   Max.   :6.90   Max.   :2.5
1732015907861:##        Species
1732015907861:##  setosa    :50
1732015907861:##  versicolor:50
1732015907861:##  virginica :50
1732015907861:##
1732015907861:##
1732015907861:##
1732015907861:iris |>
1732015907861:summarize(avg_Sepal.Length = mean(Sepal.Length),
1732015907861:sd_Sepal.Length = sd(Sepal.Length))
1732015907868:## # A tibble: 1 × 2
1732015907868:##   avg_Sepal.Length sd_Sepal.Length
1732015907868:##              <dbl>           <dbl>
1732015907868:## 1             5.84           0.828
1732015907868:mean(c(1, 2, NA, 3, 4, 5))
1732015907869:## [1] NA
1732015907869:mean(c(1, 2, NA, 3, 4, 5),  na.rm = TRUE)
1732015907869:## [1] 3
1732015907869:iris |>
1732015907869:summarize(
1732015907869:avg_Sepal.Length = mean(Sepal.Length),
1732015907869:trimmed_avg_Sepal.Length = mean(Sepal.Length, trim = .1)
1732015907869:)
1732015907876:## # A tibble: 1 × 2
1732015907877:##   avg_Sepal.Length trimmed_avg_Sepal.Length
1732015907877:##              <dbl>                    <dbl>
1732015907877:## 1             5.84                     5.81
1732015907877:iris |> summarize(across(where(is.numeric), mean))
1732015907887:## # A tibble: 1 × 4
1732015907887:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015907887:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015907887:## 1         5.84        3.06         3.76        1.20
1732015907887:iris |> summarize(across(where(is.numeric), sd))
1732015907904:## # A tibble: 1 × 4
1732015907904:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015907904:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015907904:## 1        0.828       0.436         1.77       0.762
1732015907904:iris |> summarize(across(where(is.numeric),
1732015907904:list(min = min,
1732015907904:median = median,
1732015907904:max = max)))
1732015907977:## # A tibble: 1 × 12
1732015907977:##   Sepal.Length_min Sepal.Length_median Sepal.Length_max
1732015907977:##              <dbl>               <dbl>            <dbl>
1732015907977:## 1              4.3                 5.8              7.9
1732015907977:## # ℹ 9 more variables: Sepal.Width_min <dbl>,
1732015907977:## #   Sepal.Width_median <dbl>, Sepal.Width_max <dbl>,
1732015907977:## #   Petal.Length_min <dbl>, Petal.Length_median <dbl>,
1732015907977:## #   Petal.Length_max <dbl>, Petal.Width_min <dbl>,
1732015907977:## #   Petal.Width_median <dbl>, Petal.Width_max <dbl>
1732015907977:iris |> summarize(across(where(is.numeric), mad))
1732015907987:## # A tibble: 1 × 4
1732015907987:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015907987:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015907987:## 1         1.04       0.445         1.85        1.04
1732015907987:# Grouped Operations and Calculations
1732015907987:iris |>
1732015907987:group_by(Species) |>
1732015907987:summarize(across(Sepal.Length, mean))
1732015907996:## # A tibble: 3 × 2
1732015907996:##   Species    Sepal.Length
1732015907996:##   <fct>             <dbl>
1732015907996:## 1 setosa             5.01
1732015907996:## 2 versicolor         5.94
1732015907996:## 3 virginica          6.59
1732015907996:iris |>
1732015907996:group_by(Species) |>
1732015907996:summarize(across(where(is.numeric), mean))
1732015908009:## # A tibble: 3 × 5
1732015908009:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015908009:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1732015908009:## 1 setosa           5.01        3.43         1.46       0.246
1732015908009:## 2 versico…         5.94        2.77         4.26       1.33
1732015908010:## 3 virgini…         6.59        2.97         5.55       2.03
1732015908010:res.aov <- aov(Sepal.Length ~ Species, data = iris)
1732015908010:summary(res.aov)
1732015908012:##              Df Sum Sq Mean Sq F value Pr(>F)
1732015908012:## Species       2   63.2   31.61     119 <2e-16 ***
1732015908012:## Residuals   147   39.0    0.27
1732015908012:## ---
1732015908012:## Signif. codes:
1732015908012:## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
1732015908012:TukeyHSD(res.aov)
1732015908022:##   Tukey multiple comparisons of means
1732015908022:##     95% family-wise confidence level
1732015908022:##
1732015908022:## Fit: aov(formula = Sepal.Length ~ Species, data = iris)
1732015908022:##
1732015908022:## $Species
1732015908022:##                       diff    lwr    upr p adj
1732015908022:## versicolor-setosa    0.930 0.6862 1.1738     0
1732015908022:## virginica-setosa     1.582 1.3382 1.8258     0
1732015908022:## virginica-versicolor 0.652 0.4082 0.8958     0
1732015908022:# Tabulate data
1732015908022:iris |>
1732015908022:group_by(Species) |>
1732015908022:summarize(n())
1732015908033:## # A tibble: 3 × 2
1732015908033:##   Species    `n()`
1732015908033:##   <fct>      <int>
1732015908033:## 1 setosa        50
1732015908033:## 2 versicolor    50
1732015908033:## 3 virginica     50
1732015908033:iris_ord <- iris |>
1732015908033:mutate(across(where(is.numeric),
1732015908033:function(x) cut(x, 3, labels = c("short", "medium", "long"),
1732015908033:ordered = TRUE)))
1732015908035:iris_ord
1732015908050:## # A tibble: 150 × 5
1732015908050:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015908050:##    <ord>        <ord>       <ord>        <ord>       <fct>
1732015908050:##  1 short        medium      short        short       setosa
1732015908050:##  2 short        medium      short        short       setosa
1732015908050:##  3 short        medium      short        short       setosa
1732015908050:##  4 short        medium      short        short       setosa
1732015908050:##  5 short        medium      short        short       setosa
1732015908050:##  6 short        long        short        short       setosa
1732015908050:##  7 short        medium      short        short       setosa
1732015908050:##  8 short        medium      short        short       setosa
1732015908050:##  9 short        medium      short        short       setosa
1732015908050:## 10 short        medium      short        short       setosa
1732015908050:## # ℹ 140 more rows
1732015908050:summary(iris_ord)
1732015908051:##  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015908051:##  short :59    short :47   short :50    short :50
1732015908051:##  medium:71    medium:88   medium:54    medium:54
1732015908051:##  long  :20    long  :15   long  :46    long  :46
1732015908051:##        Species
1732015908051:##  setosa    :50
1732015908051:##  versicolor:50
1732015908051:##  virginica :50
1732015908051:tbl <- iris_ord |>
1732015908051:select(Sepal.Length, Species) |>
1732015908051:table()
1732015908052:tbl
1732015908052:##             Species
1732015908052:## Sepal.Length setosa versicolor virginica
1732015908052:##       short      47         11         1
1732015908052:##       medium      3         36        32
1732015908052:##       long        0          3        17
1732015908052:iris_ord |>
1732015908052:select(Species, Sepal.Length) |>
1732015908052:### Relationship Between Nominal and Ordinal Features
1732015908052:pivot_longer(cols = Sepal.Length) |>
1732015908052:group_by(Species, value) |>
1732015908052:count() |>
1732015908052:ungroup() |>
1732015908052:pivot_wider(names_from = Species, values_from = n)
1732015908072:## # A tibble: 3 × 4
1732015908072:##   value  setosa versicolor virginica
1732015908072:##   <ord>   <int>      <int>     <int>
1732015908072:## 1 short      47         11         1
1732015908072:## 2 medium      3         36        32
1732015908072:## 3 long       NA          3        17
1732015908072:tbl |>
1732015908072:chisq.test()
1732015908073:##
1732015908073:##  Pearson's Chi-squared test
1732015908073:##
1732015908073:## data:  tbl
1732015908073:## X-squared = 112, df = 4, p-value <2e-16
1732015908073:fisher.test(tbl)
1732015908076:##
1732015908076:##  Fisher's Exact Test for Count Data
1732015908076:##
1732015908076:## data:  tbl
1732015908076:## p-value <2e-16
1732015908076:## alternative hypothesis: two.sided
1732015908076:# Percentiles (Quantiles)
1732015908076:iris |>
1732015908076:pull(Petal.Length) |>
1732015908077:quantile()
1732015908077:##   0%  25%  50%  75% 100%
1732015908077:## 1.00 1.60 4.35 5.10 6.90
1732015908077:iris |>
1732015908077:summarize(IQR =
1732015908077:quantile(Petal.Length, probs = 0.75) -
1732015908077:quantile(Petal.Length, probs = 0.25))
1732015908084:## # A tibble: 1 × 1
1732015908084:##     IQR
1732015908084:##   <dbl>
1732015908084:## 1   3.5
1732015908084:# Correlation
1732015908084:# Pearson Correlation
1732015908084:cc <- iris |>
1732015908084:select(-Species) |>
1732015908084:cor()
1732015908085:cc
1732015908085:##              Sepal.Length Sepal.Width Petal.Length
1732015908085:## Sepal.Length       1.0000     -0.1176       0.8718
1732015908085:## Sepal.Width       -0.1176      1.0000      -0.4284
1732015908085:## Petal.Length       0.8718     -0.4284       1.0000
1732015908085:## Petal.Width        0.8179     -0.3661       0.9629
1732015908085:##              Petal.Width
1732015908085:## Sepal.Length      0.8179
1732015908085:## Sepal.Width      -0.3661
1732015908085:## Petal.Length      0.9629
1732015908085:## Petal.Width       1.0000
1732015908085:ggplot(iris, aes(Petal.Length, Petal.Width)) +
1732015908085:geom_point() +
1732015908085:geom_smooth(method = "lm")
1732015908151:## `geom_smooth()` using formula = 'y ~ x'
1732015908151:with(iris, cor(Petal.Length, Petal.Width))
1732015908151:## [1] 0.9629
1732015908151:with(iris, cor.test(Petal.Length, Petal.Width))
1732015908151:##
1732015908151:##  Pearson's product-moment correlation
1732015908151:##
1732015908151:## data:  Petal.Length and Petal.Width
1732015908151:## t = 43, df = 148, p-value <2e-16
1732015908151:## alternative hypothesis: true correlation is not equal to 0
1732015908152:## 95 percent confidence interval:
1732015908152:##  0.9491 0.9730
1732015908152:## sample estimates:
1732015908152:##    cor
1732015908152:## 0.9629
1732015908152:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1732015908152:geom_point() +
1732015908152:geom_smooth(method = "lm")
1732015908220:## `geom_smooth()` using formula = 'y ~ x'
1732015908220:with(iris, cor(Sepal.Length, Sepal.Width))
1732015908220:## [1] -0.1176
1732015908220:with(iris, cor.test(Sepal.Length, Sepal.Width))
1732015908220:##
1732015908220:##  Pearson's product-moment correlation
1732015908220:##
1732015908220:## data:  Sepal.Length and Sepal.Width
1732015908220:## t = -1.4, df = 148, p-value = 0.2
1732015908220:## alternative hypothesis: true correlation is not equal to 0
1732015908220:## 95 percent confidence interval:
1732015908221:##  -0.27269  0.04351
1732015908221:## sample estimates:
1732015908221:##     cor
1732015908221:## -0.1176
1732015908221:# Rank Correlation
1732015908221:iris_ord <- iris |>
1732015908221:mutate(across(where(is.numeric),
1732015908221:function(x) cut(x, 3,
1732015908221:labels = c("short", "medium", "long"),
1732015908221:ordered = TRUE)))
1732015908222:iris_ord
1732015908243:## # A tibble: 150 × 5
1732015908243:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015908243:##    <ord>        <ord>       <ord>        <ord>       <fct>
1732015908243:##  1 short        medium      short        short       setosa
1732015908243:##  2 short        medium      short        short       setosa
1732015908243:##  3 short        medium      short        short       setosa
1732015908243:##  4 short        medium      short        short       setosa
1732015908243:##  5 short        medium      short        short       setosa
1732015908243:##  6 short        long        short        short       setosa
1732015908243:##  7 short        medium      short        short       setosa
1732015908244:##  8 short        medium      short        short       setosa
1732015908244:##  9 short        medium      short        short       setosa
1732015908244:## 10 short        medium      short        short       setosa
1732015908244:## # ℹ 140 more rows
1732015908244:summary(iris_ord)
1732015908244:##  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015908244:##  short :59    short :47   short :50    short :50
1732015908244:##  medium:71    medium:88   medium:54    medium:54
1732015908244:##  long  :20    long  :15   long  :46    long  :46
1732015908244:##        Species
1732015908244:##  setosa    :50
1732015908244:##  versicolor:50
1732015908244:##  virginica :50
1732015908244:iris_ord |>
1732015908244:pull(Sepal.Length)
1732015908245:##   [1] short  short  short  short  short  short  short
1732015908245:##   [8] short  short  short  short  short  short  short
1732015908245:##  [15] medium medium short  short  medium short  short
1732015908245:##  [22] short  short  short  short  short  short  short
1732015908245:##  [29] short  short  short  short  short  short  short
1732015908245:##  [36] short  short  short  short  short  short  short
1732015908245:##  [43] short  short  short  short  short  short  short
1732015908246:##  [50] short  long   medium long   short  medium medium
1732015908246:##  [57] medium short  medium short  short  medium medium
1732015908246:##  [64] medium medium medium medium medium medium medium
1732015908246:##  [71] medium medium medium medium medium medium long
1732015908246:##  [78] medium medium medium short  short  medium medium
1732015908246:##  [85] short  medium medium medium medium short  short
1732015908246:##  [92] medium medium short  medium medium medium medium
1732015908246:##  [99] short  medium medium medium long   medium medium
1732015908246:## [106] long   short  long   medium long   medium medium
1732015908246:## [113] long   medium medium medium medium long   long
1732015908246:## [120] medium long   medium long   medium medium long
1732015908246:## [127] medium medium medium long   long   long   medium
1732015908246:## [134] medium medium long   medium medium medium long
1732015908246:## [141] medium long   medium long   medium medium medium
1732015908246:## [148] medium medium medium
1732015908246:## Levels: short < medium < long
1732015908246:iris_ord |>
1732015908246:select(-Species) |>
1732015908246:sapply(xtfrm) |>
1732015908246:cor(method = "kendall")
1732015908247:##              Sepal.Length Sepal.Width Petal.Length
1732015908247:## Sepal.Length       1.0000     -0.1438       0.7419
1732015908248:## Sepal.Width       -0.1438      1.0000      -0.3299
1732015908248:## Petal.Length       0.7419     -0.3299       1.0000
1732015908248:## Petal.Width        0.7295     -0.3154       0.9198
1732015908248:##              Petal.Width
1732015908248:## Sepal.Length      0.7295
1732015908248:## Sepal.Width      -0.3154
1732015908248:## Petal.Length      0.9198
1732015908248:## Petal.Width       1.0000
1732015908248:iris_ord |>
1732015908248:select(-Species) |>
1732015908248:sapply(xtfrm) |>
1732015908248:cor(method = "spearman")
1732015908248:##              Sepal.Length Sepal.Width Petal.Length
1732015908249:## Sepal.Length       1.0000     -0.1570       0.7938
1732015908249:## Sepal.Width       -0.1570      1.0000      -0.3663
1732015908249:## Petal.Length       0.7938     -0.3663       1.0000
1732015908249:## Petal.Width        0.7843     -0.3517       0.9399
1732015908249:##              Petal.Width
1732015908249:## Sepal.Length      0.7843
1732015908249:## Sepal.Width      -0.3517
1732015908249:## Petal.Length      0.9399
1732015908249:## Petal.Width       1.0000
1732015908249:iris |>
1732015908249:select(-Species) |>
1732015908249:cor()
1732015908249:##              Sepal.Length Sepal.Width Petal.Length
1732015908249:## Sepal.Length       1.0000     -0.1176       0.8718
1732015908249:## Sepal.Width       -0.1176      1.0000      -0.4284
1732015908249:## Petal.Length       0.8718     -0.4284       1.0000
1732015908250:## Petal.Width        0.8179     -0.3661       0.9629
1732015908250:##              Petal.Width
1732015908250:## Sepal.Length      0.8179
1732015908250:## Sepal.Width      -0.3661
1732015908250:## Petal.Length      0.9629
1732015908250:## Petal.Width       1.0000
1732015908250:# Density
1732015908250:ggplot(iris, aes(x = Petal.Length, y = 0)) + geom_point()
1732015908309:# Histograms
1732015908309:ggplot(iris, aes(x = Petal.Length)) +
1732015908309:geom_histogram() +
1732015908309:geom_rug(alpha = 1/2)
1732015908388:## `stat_bin()` using `bins = 30`. Pick better value with
1732015908388:## `binwidth`.
1732015908388:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1732015908388:geom_bin2d(bins = 10) +
1732015908388:geom_jitter(color = "red")
1732015908468:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1732015908468:geom_hex(bins = 10) +
1732015908468:geom_jitter(color = "red")
1732015908619:# Kernel Density Estimate (KDE)
1732015908619:ggplot(iris, aes(Petal.Length)) +
1732015908619:geom_density(bw = .2) +
1732015908619:geom_rug(alpha = 1/2)
1732015908684:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1732015908684:geom_density_2d_filled() +
1732015908684:geom_jitter()
1732015909024:# Visualization
1732015909024:# Histogram
1732015909024:ggplot(iris, aes(Petal.Width)) + geom_histogram(bins = 20)
1732015909101:ggplot(iris, aes(Petal.Width)) +
1732015909101:geom_histogram(bins = 20, aes(fill = Species))
1732015909171:ggplot(iris, aes(Petal.Width)) +
1732015909171:geom_histogram(bins = 20, aes(fill = Species), alpha = .5, position = 'identity')
1732015909247:# Boxplot
1732015909247:ggplot(iris, aes(Species, Sepal.Length)) +
1732015909247:geom_boxplot()
1732015909319:iris |> group_by(Species) |>
1732015909319:summarize(across(where(is.numeric), median))
1732015909338:## # A tibble: 3 × 5
1732015909338:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015909338:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1732015909338:## 1 setosa            5           3.4         1.5          0.2
1732015909338:## 2 versico…          5.9         2.8         4.35         1.3
1732015909338:## 3 virgini…          6.5         3           5.55         2
1732015909338:library(tidyr)
1732015909338:iris_long <- iris |>
1732015909339:mutate(id = row_number()) |>
1732015909339:pivot_longer(1:4)
1732015909341:ggplot(iris_long, aes(name, value)) +
1732015909341:geom_boxplot() +
1732015909341:labs(y = "Original value")
1732015909409:library(tidyr)
1732015909409:iris_long_scaled <- iris |>
1732015909409:scale_numeric() |>
1732015909409:mutate(id = row_number()) |> pivot_longer(1:4)
1732015909415:ggplot(iris_long_scaled, aes(name, value)) +
1732015909415:geom_boxplot() +
1732015909415:labs(y = "Scaled value")
1732015909482:# Scatter plot
1732015909482:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1732015909482:geom_point(aes(color = Species))
1732015909546:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1732015909546:geom_point(aes(color = Species)) +
1732015909546:geom_smooth(method = "lm")
1732015909654:## `geom_smooth()` using formula = 'y ~ x'
1732015909654:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1732015909654:geom_point(aes(color = Species)) +
1732015909655:geom_smooth(method = "lm", aes(color = Species))
1732015909779:## `geom_smooth()` using formula = 'y ~ x'
1732015909779:# Scatter Plot Matrix
1732015909779:pairs(iris, col = iris$Species)
1732015909838:library("GGally")
1732015909838:ggpairs(iris,  aes(color = Species), progress = FALSE)
1732015911130:## `stat_bin()` using `bins = 30`. Pick better value with
1732015911130:## `binwidth`.
1732015911130:## `stat_bin()` using `bins = 30`. Pick better value with
1732015911130:## `binwidth`.
1732015911130:## `stat_bin()` using `bins = 30`. Pick better value with
1732015911130:## `binwidth`.
1732015911130:## `stat_bin()` using `bins = 30`. Pick better value with
1732015911130:## `binwidth`.
1732015911130:# Matrix Visualization
1732015911130:iris_matrix <- iris |> select(-Species) |> as.matrix()
1732015911131:iris_long <- as_tibble(iris_matrix) |>
1732015911131:mutate(id = row_number()) |>
1732015911131:pivot_longer(1:4)
1732015911133:head(iris_long)
1732015911141:## # A tibble: 6 × 3
1732015911141:##      id name         value
1732015911141:##   <int> <chr>        <dbl>
1732015911141:## 1     1 Sepal.Length   5.1
1732015911141:## 2     1 Sepal.Width    3.5
1732015911141:## 3     1 Petal.Length   1.4
1732015911141:## 4     1 Petal.Width    0.2
1732015911141:## 5     2 Sepal.Length   4.9
1732015911141:## 6     2 Sepal.Width    3
1732015911142:ggplot(iris_long, aes(x = name, y = id)) +
1732015911142:geom_tile(aes(fill = value))
1732015911271:library(seriation)
1732015911300:## Registered S3 methods overwritten by 'registry':
1732015911300:##   method               from
1732015911300:##   print.registry_field proxy
1732015911300:##   print.registry_entry proxy
1732015911300:##
1732015911300:## Attaching package: 'seriation'
1732015911300:## The following object is masked from 'package:lattice':
1732015911300:##
1732015911300:##     panel.lines
1732015911300:ggpimage(iris_matrix, prop = FALSE)
1732015911403:iris_scaled <- scale(iris_matrix)
1732015911403:ggpimage(iris_scaled, prop = FALSE)
1732015911468:ggpimage(iris_scaled, order = seriate(iris_scaled), prop = FALSE)
1732015911893:# Correlation Matrix
1732015911893:cm1 <- iris |>
1732015911893:select(-Species) |>
1732015911893:as.matrix() |>
1732015911893:cor()
1732015911894:cm1
1732015911894:##              Sepal.Length Sepal.Width Petal.Length
1732015911894:## Sepal.Length       1.0000     -0.1176       0.8718
1732015911894:## Sepal.Width       -0.1176      1.0000      -0.4284
1732015911894:## Petal.Length       0.8718     -0.4284       1.0000
1732015911894:## Petal.Width        0.8179     -0.3661       0.9629
1732015911894:##              Petal.Width
1732015911894:## Sepal.Length      0.8179
1732015911894:## Sepal.Width      -0.3661
1732015911894:## Petal.Length      0.9629
1732015911895:## Petal.Width       1.0000
1732015911895:library(ggcorrplot)
1732015911904:ggcorrplot(cm1)
1732015911968:gghmap(cm1, prop = TRUE)
1732015912658:cm2 <- iris |>
1732015912658:select(-Species) |>
1732015912658:as.matrix() |>
1732015912658:t() |>
1732015912658:cor()
1732015912659:ggcorrplot(cm2)
1732015912827:# Parallel Coordinates Plot
1732015912827:library(GGally)
1732015912827:ggparcoord(iris, columns = 1:4, groupColumn = 5)
1732015912990:o <- seriate(as.dist(1-cor(iris[,1:4])), method = "BBURCG")
1732015913224:get_order(o)
1732015913225:## Petal.Length  Petal.Width Sepal.Length  Sepal.Width
1732015913225:##            3            4            1            2
1732015913225:ggparcoord(iris,
1732015913225:columns = as.integer(get_order(o)),
1732015913225:groupColumn = 5)
1732015913336:# Star Plot
1732015913336:flowers_5 <- iris[c(1:5, 51:55, 101:105), ]
1732015913337:flowers_5
1732015913348:## # A tibble: 15 × 5
1732015913348:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015913348:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015913348:##  1          5.1         3.5          1.4         0.2 setosa
1732015913348:##  2          4.9         3            1.4         0.2 setosa
1732015913348:##  3          4.7         3.2          1.3         0.2 setosa
1732015913348:##  4          4.6         3.1          1.5         0.2 setosa
1732015913348:##  5          5           3.6          1.4         0.2 setosa
1732015913348:##  6          7           3.2          4.7         1.4 versic…
1732015913348:##  7          6.4         3.2          4.5         1.5 versic…
1732015913349:##  8          6.9         3.1          4.9         1.5 versic…
1732015913349:##  9          5.5         2.3          4           1.3 versic…
1732015913349:## 10          6.5         2.8          4.6         1.5 versic…
1732015913349:## 11          6.3         3.3          6           2.5 virgin…
1732015913349:## 12          5.8         2.7          5.1         1.9 virgin…
1732015913349:## 13          7.1         3            5.9         2.1 virgin…
1732015913349:## 14          6.3         2.9          5.6         1.8 virgin…
1732015913349:## 15          6.5         3            5.8         2.2 virgin…
1732015913349:stars(flowers_5[, 1:4], ncol = 5)
1732015929409:# Star Plot
1732015929409:flowers_5 <- iris[c(1:5, 51:55, 101:105), ]
1732015930117:flowers_5
1732015930710:##  6          7           3.2          4.7         1.4 versic…
1732015930710:##  7          6.4         3.2          4.5         1.5 versic…
1732015930710:##  8          6.9         3.1          4.9         1.5 versic…
1732015930710:##  9          5.5         2.3          4           1.3 versic…
1732015930710:## 10          6.5         2.8          4.6         1.5 versic…
1732015930711:## 11          6.3         3.3          6           2.5 virgin…
1732015930711:## 12          5.8         2.7          5.1         1.9 virgin…
1732015930711:## 13          7.1         3            5.9         2.1 virgin…
1732015930711:## 14          6.3         2.9          5.6         1.8 virgin…
1732015930711:## 15          6.5         3            5.8         2.2 virgin…
1732015930711:stars(flowers_5[, 1:4], ncol = 5)
1732015948766:# Chapter 3: Classification: Basic Concepts
1732015948766:# Shakira B. Regalado
1732015948766:# BSIT 3B
1732015948766:pkgs <- c("caret", "FSelector", "lattice", "mlbench",
1732015948766:"palmerpenguins", "party", "pROC", "rpart",
1732015948766:"rpart.plot", "tidyverse")
1732015948766:pkgs_install <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
1732015948771:if(length(pkgs_install)) install.packages(pkgs_install)
1732015948772:# General Framework for Classification
1732015948772:# The Zoo Dataset
1732015948772:data(Zoo, package="mlbench")
1732015948779:head(Zoo)
1732015948782:##           hair feathers  eggs  milk airborne aquatic
1732015948782:## aardvark  TRUE    FALSE FALSE  TRUE    FALSE   FALSE
1732015948782:## antelope  TRUE    FALSE FALSE  TRUE    FALSE   FALSE
1732015948782:## bass     FALSE    FALSE  TRUE FALSE    FALSE    TRUE
1732015948782:## bear      TRUE    FALSE FALSE  TRUE    FALSE   FALSE
1732015948782:## boar      TRUE    FALSE FALSE  TRUE    FALSE   FALSE
1732015948782:## buffalo   TRUE    FALSE FALSE  TRUE    FALSE   FALSE
1732015948782:##          predator toothed backbone breathes venomous  fins
1732015948782:## aardvark     TRUE    TRUE     TRUE     TRUE    FALSE FALSE
1732015948783:## antelope    FALSE    TRUE     TRUE     TRUE    FALSE FALSE
1732015948783:## bass         TRUE    TRUE     TRUE    FALSE    FALSE  TRUE
1732015948783:## bear         TRUE    TRUE     TRUE     TRUE    FALSE FALSE
1732015948783:## boar         TRUE    TRUE     TRUE     TRUE    FALSE FALSE
1732015948783:## buffalo     FALSE    TRUE     TRUE     TRUE    FALSE FALSE
1732015948783:##          legs  tail domestic catsize   type
1732015948783:## aardvark    4 FALSE    FALSE    TRUE mammal
1732015948783:## antelope    4  TRUE    FALSE    TRUE mammal
1732015948783:## bass        0  TRUE    FALSE   FALSE   fish
1732015948783:## bear        4 FALSE    FALSE    TRUE mammal
1732015948783:## boar        4  TRUE    FALSE    TRUE mammal
1732015948783:## buffalo     4  TRUE    FALSE    TRUE mammal
1732015948783:library(tidyverse)
1732015948783:as_tibble(Zoo, rownames = "animal")
1732015948819:## # A tibble: 101 × 18
1732015948819:##    animal   hair  feathers eggs  milk  airborne aquatic
1732015948819:##    <chr>    <lgl> <lgl>    <lgl> <lgl> <lgl>    <lgl>
1732015948819:##  1 aardvark TRUE  FALSE    FALSE TRUE  FALSE    FALSE
1732015948819:##  2 antelope TRUE  FALSE    FALSE TRUE  FALSE    FALSE
1732015948820:##  3 bass     FALSE FALSE    TRUE  FALSE FALSE    TRUE
1732015948820:##  4 bear     TRUE  FALSE    FALSE TRUE  FALSE    FALSE
1732015948820:##  5 boar     TRUE  FALSE    FALSE TRUE  FALSE    FALSE
1732015948820:##  6 buffalo  TRUE  FALSE    FALSE TRUE  FALSE    FALSE
1732015948820:##  7 calf     TRUE  FALSE    FALSE TRUE  FALSE    FALSE
1732015948820:##  8 carp     FALSE FALSE    TRUE  FALSE FALSE    TRUE
1732015948820:##  9 catfish  FALSE FALSE    TRUE  FALSE FALSE    TRUE
1732015948820:## 10 cavy     TRUE  FALSE    FALSE TRUE  FALSE    FALSE
1732015948820:## # ℹ 91 more rows
1732015948820:## # ℹ 11 more variables: predator <lgl>, toothed <lgl>,
1732015948820:## #   backbone <lgl>, breathes <lgl>, venomous <lgl>,
1732015948820:## #   fins <lgl>, legs <int>, tail <lgl>, domestic <lgl>,
1732015948820:## #   catsize <lgl>, type <fct>
1732015948820:Zoo <- Zoo |>
1732015948820:mutate(across(where(is.logical),
1732015948820:function (x) factor(x, levels = c(TRUE, FALSE)))) |>
1732015948820:mutate(across(where(is.character), factor))
1732015948827:summary(Zoo)
1732015948831:##     hair     feathers     eggs       milk     airborne
1732015948831:##  TRUE :43   TRUE :20   TRUE :59   TRUE :41   TRUE :24
1732015948831:##  FALSE:58   FALSE:81   FALSE:42   FALSE:60   FALSE:77
1732015948831:##
1732015948831:##
1732015948831:##
1732015948831:##
1732015948831:##
1732015948831:##   aquatic    predator   toothed    backbone   breathes
1732015948832:##  TRUE :36   TRUE :56   TRUE :61   TRUE :83   TRUE :80
1732015948832:##  FALSE:65   FALSE:45   FALSE:40   FALSE:18   FALSE:21
1732015948832:##
1732015948832:##
1732015948832:##
1732015948832:##
1732015948832:##
1732015948832:##   venomous     fins         legs         tail     domestic
1732015948832:##  TRUE : 8   TRUE :17   Min.   :0.00   TRUE :75   TRUE :13
1732015948832:##  FALSE:93   FALSE:84   1st Qu.:2.00   FALSE:26   FALSE:88
1732015948832:##                        Median :4.00
1732015948832:##                        Mean   :2.84
1732015948832:##                        3rd Qu.:4.00
1732015948832:##                        Max.   :8.00
1732015948832:##
1732015948832:##   catsize              type
1732015948832:##  TRUE :44   mammal       :41
1732015948832:##  FALSE:57   bird         :20
1732015948832:##             reptile      : 5
1732015948832:##             fish         :13
1732015948832:##             amphibian    : 4
1732015948832:##             insect       : 8
1732015948832:##             mollusc.et.al:10
1732015948832:# Decision Tree Classifiers
1732015948832:library(rpart)
1732015948856:# Create Tree
1732015948856:tree_default <- Zoo |>
1732015948856:rpart(type ~ ., data = _)
1732015948865:tree_default
1732015948866:## n= 101
1732015948866:##
1732015948866:## node), split, n, loss, yval, (yprob)
1732015948866:##       * denotes terminal node
1732015948866:##
1732015948866:##  1) root 101 60 mammal (0.41 0.2 0.05 0.13 0.04 0.079 0.099)
1732015948866:##    2) milk=TRUE 41  0 mammal (1 0 0 0 0 0 0) *
1732015948866:##    3) milk=FALSE 60 40 bird (0 0.33 0.083 0.22 0.067 0.13 0.17)
1732015948866:##      6) feathers=TRUE 20  0 bird (0 1 0 0 0 0 0) *
1732015948866:##      7) feathers=FALSE 40 27 fish (0 0 0.12 0.33 0.1 0.2 0.25)
1732015948866:##       14) fins=TRUE 13  0 fish (0 0 0 1 0 0 0) *
1732015948866:##       15) fins=FALSE 27 17 mollusc.et.al (0 0 0.19 0 0.15 0.3 0.37)
1732015948866:##         30) backbone=TRUE 9  4 reptile (0 0 0.56 0 0.44 0 0) *
1732015948866:##         31) backbone=FALSE 18  8 mollusc.et.al (0 0 0 0 0 0.44 0.56) *
1732015948866:library(rpart.plot)
1732015948881:rpart.plot(tree_default, extra = 2)
1732015948956:# Make Predictions for New Data
1732015948956:my_animal <- tibble(hair = TRUE, feathers = TRUE, eggs = FALSE,
1732015948956:milk = TRUE, airborne = TRUE, aquatic = FALSE, predator = TRUE,
1732015948956:toothed = TRUE, backbone = TRUE, breathes = TRUE,
1732015948956:venomous = FALSE, fins = FALSE, legs = 4, tail = TRUE,
1732015948956:domestic = FALSE, catsize = FALSE, type = NA)
1732015948958:my_animal <- my_animal |>
1732015948958:mutate(across(where(is.logical),
1732015948958:function(x) factor(x, levels = c(TRUE, FALSE))))
1732015948960:my_animal
1732015948981:## # A tibble: 1 × 17
1732015948981:##   hair  feathers eggs  milk  airborne aquatic predator
1732015948981:##   <fct> <fct>    <fct> <fct> <fct>    <fct>   <fct>
1732015948981:## 1 TRUE  TRUE     FALSE TRUE  TRUE     FALSE   TRUE
1732015948981:## # ℹ 10 more variables: toothed <fct>, backbone <fct>,
1732015948981:## #   breathes <fct>, venomous <fct>, fins <fct>, legs <dbl>,
1732015948981:## #   tail <fct>, domestic <fct>, catsize <fct>, type <fct>
1732015948981:predict(tree_default , my_animal, type = "class")
1732015948984:##      1
1732015948984:## mammal
1732015948984:## 7 Levels: mammal bird reptile fish amphibian ... mollusc.et.al
1732015948984:# Manual Calculation of the Resubstitution Error
1732015948984:predict(tree_default, Zoo) |> head ()
1732015948987:##          mammal bird reptile fish amphibian insect
1732015948987:## aardvark      1    0       0    0         0      0
1732015948987:## antelope      1    0       0    0         0      0
1732015948987:## bass          0    0       0    1         0      0
1732015948987:## bear          1    0       0    0         0      0
1732015948987:## boar          1    0       0    0         0      0
1732015948987:## buffalo       1    0       0    0         0      0
1732015948987:##          mollusc.et.al
1732015948987:## aardvark             0
1732015948987:## antelope             0
1732015948987:## bass                 0
1732015948987:## bear                 0
1732015948987:## boar                 0
1732015948987:## buffalo              0
1732015948987:pred <- predict(tree_default, Zoo, type="class")
1732015948989:head(pred)
1732015948990:## aardvark antelope     bass     bear     boar  buffalo
1732015948990:##   mammal   mammal     fish   mammal   mammal   mammal
1732015948990:## 7 Levels: mammal bird reptile fish amphibian ... mollusc.et.al
1732015948990:confusion_table <- with(Zoo, table(type, pred))
1732015948990:confusion_table
1732015948990:##                pred
1732015948990:## type            mammal bird reptile fish amphibian insect
1732015948990:##   mammal            41    0       0    0         0      0
1732015948990:##   bird               0   20       0    0         0      0
1732015948990:##   reptile            0    0       5    0         0      0
1732015948990:##   fish               0    0       0   13         0      0
1732015948990:##   amphibian          0    0       4    0         0      0
1732015948990:##   insect             0    0       0    0         0      0
1732015948990:##   mollusc.et.al      0    0       0    0         0      0
1732015948990:##                pred
1732015948990:## type            mollusc.et.al
1732015948990:##   mammal                    0
1732015948990:##   bird                      0
1732015948990:##   reptile                   0
1732015948990:##   fish                      0
1732015948990:##   amphibian                 0
1732015948990:##   insect                    8
1732015948991:##   mollusc.et.al            10
1732015948991:correct <- confusion_table |> diag() |> sum()
1732015948991:correct
1732015948991:## [1] 89
1732015948991:error <- confusion_table |> sum() - correct
1732015948991:error
1732015948991:## [1] 12
1732015948991:accuracy <- correct / (correct + error)
1732015948991:accuracy
1732015948991:## [1] 0.8812
1732015948991:accuracy <- function(truth, prediction) {
1732015948991:tbl <- table(truth, prediction)
1732015948991:sum(diag(tbl))/sum(tbl)
1732015948991:}
1732015948991:accuracy(Zoo |> pull(type), pred)
1732015948992:## [1] 0.8812
1732015948992:# Confusion Matrix for the Resubstitution Error using Caret
1732015948992:library(caret)
1732015948992:confusionMatrix(data = pred,
1732015948992:reference = Zoo |> pull(type))
1732015949072:## Confusion Matrix and Statistics
1732015949072:##
1732015949072:##                Reference
1732015949072:## Prediction      mammal bird reptile fish amphibian insect
1732015949072:##   mammal            41    0       0    0         0      0
1732015949072:##   bird               0   20       0    0         0      0
1732015949072:##   reptile            0    0       5    0         4      0
1732015949072:##   fish               0    0       0   13         0      0
1732015949072:##   amphibian          0    0       0    0         0      0
1732015949072:##   insect             0    0       0    0         0      0
1732015949072:##   mollusc.et.al      0    0       0    0         0      8
1732015949072:##                Reference
1732015949072:## Prediction      mollusc.et.al
1732015949072:##   mammal                    0
1732015949072:##   bird                      0
1732015949072:##   reptile                   0
1732015949072:##   fish                      0
1732015949072:##   amphibian                 0
1732015949072:##   insect                    0
1732015949072:##   mollusc.et.al            10
1732015949072:##
1732015949072:## Overall Statistics
1732015949072:##
1732015949073:##                Accuracy : 0.881
1732015949073:##                  95% CI : (0.802, 0.937)
1732015949073:##     No Information Rate : 0.406
1732015949073:##     P-Value [Acc > NIR] : <2e-16
1732015949073:##
1732015949073:##                   Kappa : 0.843
1732015949073:##
1732015949073:##  Mcnemar's Test P-Value : NA
1732015949073:##
1732015949073:## Statistics by Class:
1732015949073:##
1732015949073:##                      Class: mammal Class: bird
1732015949073:## Sensitivity                  1.000       1.000
1732015949073:## Specificity                  1.000       1.000
1732015949073:## Pos Pred Value               1.000       1.000
1732015949073:## Neg Pred Value               1.000       1.000
1732015949073:## Prevalence                   0.406       0.198
1732015949073:## Detection Rate               0.406       0.198
1732015949073:## Detection Prevalence         0.406       0.198
1732015949073:## Balanced Accuracy            1.000       1.000
1732015949073:##                      Class: reptile Class: fish
1732015949073:## Sensitivity                  1.0000       1.000
1732015949073:## Specificity                  0.9583       1.000
1732015949073:## Pos Pred Value               0.5556       1.000
1732015949073:## Neg Pred Value               1.0000       1.000
1732015949073:## Prevalence                   0.0495       0.129
1732015949073:## Detection Rate               0.0495       0.129
1732015949073:## Detection Prevalence         0.0891       0.129
1732015949073:## Balanced Accuracy            0.9792       1.000
1732015949073:##                      Class: amphibian Class: insect
1732015949073:## Sensitivity                    0.0000        0.0000
1732015949073:## Specificity                    1.0000        1.0000
1732015949074:## Pos Pred Value                    NaN           NaN
1732015949074:## Neg Pred Value                 0.9604        0.9208
1732015949074:## Prevalence                     0.0396        0.0792
1732015949074:## Detection Rate                 0.0000        0.0000
1732015949074:## Detection Prevalence           0.0000        0.0000
1732015949074:## Balanced Accuracy              0.5000        0.5000
1732015949074:##                      Class: mollusc.et.al
1732015949074:## Sensitivity                         1.000
1732015949074:## Specificity                         0.912
1732015949074:## Pos Pred Value                      0.556
1732015949074:## Neg Pred Value                      1.000
1732015949074:## Prevalence                          0.099
1732015949074:## Detection Rate                      0.099
1732015949074:## Detection Prevalence                0.178
1732015949074:## Balanced Accuracy                   0.956
1732015949074:# Model Overfitting
1732015949074:tree_full <- Zoo |>
1732015949074:rpart(type ~ . , data = _,
1732015949074:control = rpart.control(minsplit = 2, cp = 0))
1732015949078:rpart.plot(tree_full, extra = 2,
1732015949078:roundint=FALSE,
1732015949078:box.palette = list("Gy", "Gn", "Bu", "Bn",
1732015949078:"Or", "Rd", "Pu"))
1732015949125:tree_full
1732015949126:## n= 101
1732015949126:##
1732015949126:## node), split, n, loss, yval, (yprob)
1732015949126:##       * denotes terminal node
1732015949126:##
1732015949126:##   1) root 101 60 mammal (0.41 0.2 0.05 0.13 0.04 0.079 0.099)
1732015949126:##     2) milk=TRUE 41  0 mammal (1 0 0 0 0 0 0) *
1732015949126:##     3) milk=FALSE 60 40 bird (0 0.33 0.083 0.22 0.067 0.13 0.17)
1732015949126:##       6) feathers=TRUE 20  0 bird (0 1 0 0 0 0 0) *
1732015949126:##       7) feathers=FALSE 40 27 fish (0 0 0.12 0.33 0.1 0.2 0.25)
1732015949126:##        14) fins=TRUE 13  0 fish (0 0 0 1 0 0 0) *
1732015949126:##        15) fins=FALSE 27 17 mollusc.et.al (0 0 0.19 0 0.15 0.3 0.37)
1732015949126:##          30) backbone=TRUE 9  4 reptile (0 0 0.56 0 0.44 0 0)
1732015949126:##            60) aquatic=FALSE 4  0 reptile (0 0 1 0 0 0 0) *
1732015949126:##            61) aquatic=TRUE 5  1 amphibian (0 0 0.2 0 0.8 0 0)
1732015949126:##             122) eggs=FALSE 1  0 reptile (0 0 1 0 0 0 0) *
1732015949126:##             123) eggs=TRUE 4  0 amphibian (0 0 0 0 1 0 0) *
1732015949126:##          31) backbone=FALSE 18  8 mollusc.et.al (0 0 0 0 0 0.44 0.56)
1732015949126:##            62) airborne=TRUE 6  0 insect (0 0 0 0 0 1 0) *
1732015949126:##            63) airborne=FALSE 12  2 mollusc.et.al (0 0 0 0 0 0.17 0.83)
1732015949126:##             126) predator=FALSE 4  2 insect (0 0 0 0 0 0.5 0.5)
1732015949126:##               252) legs>=3 2  0 insect (0 0 0 0 0 1 0) *
1732015949126:##               253) legs< 3 2  0 mollusc.et.al (0 0 0 0 0 0 1) *
1732015949126:##             127) predator=TRUE 8  0 mollusc.et.al (0 0 0 0 0 0 1) *
1732015949126:pred_full <- predict(tree_full, Zoo, type = "class")
1732015949129:accuracy(Zoo |> pull(type), pred_full)
1732015949132:## [1] 1
1732015949132:# Model Selection
1732015949132:fit <- Zoo |>
1732015949132:train(type ~ .,
1732015949132:data = _ ,
1732015949132:method = "rpart",
1732015949132:control = rpart.control(minsplit = 2), # we have little data
1732015949132:tuneGrid = data.frame(cp = c(0.01, 0)),
1732015949132:trControl = trainControl(method = "LGOCV",
1732015949132:p = 0.8,
1732015949132:number = 10),
1732015949132:tuneLength = 5)
1732015949347:fit
1732015949349:## CART
1732015949349:##
1732015949349:## 101 samples
1732015949349:##  16 predictor
1732015949349:##   7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1732015949349:##
1732015949349:## No pre-processing
1732015949349:## Resampling: Repeated Train/Test Splits Estimated (10 reps, 80%)
1732015949349:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1732015949349:## Resampling results across tuning parameters:
1732015949349:##
1732015949349:##   cp    Accuracy  Kappa
1732015949349:##   0.00  0.9444    0.9232
1732015949349:##   0.01  0.9389    0.9155
1732015949349:##
1732015949349:## Accuracy was used to select the optimal model using
1732015949349:##  the largest value.
1732015949349:## The final value used for the model was cp = 0.
1732015949349:# Model Evaluation
1732015949349:set.seed(2000)
1732015949349:# Holdout Method
1732015949349:inTrain <- createDataPartition(y = Zoo$type, p = .8)[[1]]
1732015949350:Zoo_train <- Zoo |> slice(inTrain)
1732015949351:Zoo_test <- Zoo |> slice(-inTrain)
1732015949351:# Cross-Validation Methods
1732015949351:## Linux backend
1732015949351:# library(doMC)
1732015949351:# registerDoMC(cores = 4)
1732015949351:# getDoParWorkers()
1732015949351:## Windows backend
1732015949352:# library(doParallel)
1732015949352:# cl <- makeCluster(4, type="SOCK")
1732015949352:# registerDoParallel(cl)
1732015949352:# Hyperparameter Tuning
1732015949352:inTrain <- createDataPartition(y = Zoo$type, p = .8)[[1]]
1732015949352:Zoo_train <- Zoo |> slice(inTrain)
1732015949353:Zoo_test <- Zoo |> slice(-inTrain)
1732015949363:fit <- Zoo_train |>
1732015949363:train(type ~ .,
1732015949363:data = _ ,
1732015949363:method = "rpart",
1732015949363:control = rpart.control(minsplit = 2), # we have little data
1732015949363:trControl = trainControl(method = "cv", number = 10),
1732015949363:tuneLength = 5)
1732015949524:fit
1732015949525:## CART
1732015949525:##
1732015949525:## 83 samples
1732015949525:## 16 predictors
1732015949525:##  7 classes: 'mammal', 'bird', 'reptile', 'fish', 'amphibian', 'insect', 'mollusc.et.al'
1732015949525:##
1732015949525:## No pre-processing
1732015949525:## Resampling: Cross-Validated (10 fold)
1732015949525:## Summary of sample sizes: 74, 73, 77, 75, 73, 75, ...
1732015949525:## Resampling results across tuning parameters:
1732015949525:##
1732015949525:##   cp    Accuracy  Kappa
1732015949525:##   0.00  0.9289    0.9058
1732015949525:##   0.08  0.8603    0.8179
1732015949525:##   0.16  0.7296    0.6422
1732015949525:##   0.22  0.6644    0.5448
1732015949525:##   0.32  0.4383    0.1136
1732015949525:##
1732015949525:## Accuracy was used to select the optimal model using
1732015949525:##  the largest value.
1732015949526:## The final value used for the model was cp = 0.
1732015949526:library(rpart.plot)
1732015949526:rpart.plot(fit$finalModel, extra = 2,
1732015949526:box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
1732015949560:varImp(fit)
1732015949583:## rpart variable importance
1732015949583:##
1732015949583:##               Overall
1732015949583:## toothedFALSE    100.0
1732015949583:## feathersFALSE    79.5
1732015949583:## eggsFALSE        67.7
1732015949583:## milkFALSE        63.3
1732015949583:## backboneFALSE    57.3
1732015949583:## finsFALSE        53.5
1732015949583:## hairFALSE        52.1
1732015949583:## breathesFALSE    48.9
1732015949583:## legs             41.4
1732015949583:## tailFALSE        29.0
1732015949583:## aquaticFALSE     27.5
1732015949583:## airborneFALSE    26.5
1732015949583:## predatorFALSE    10.6
1732015949583:## venomousFALSE     1.8
1732015949583:## catsizeFALSE      0.0
1732015949583:## domesticFALSE     0.0
1732015949583:imp <- varImp(fit, compete = FALSE)
1732015949585:imp
1732015949585:## rpart variable importance
1732015949585:##
1732015949585:##               Overall
1732015949585:## milkFALSE      100.00
1732015949585:## feathersFALSE   55.69
1732015949585:## finsFALSE       39.45
1732015949586:## aquaticFALSE    28.11
1732015949586:## backboneFALSE   21.76
1732015949586:## eggsFALSE       12.32
1732015949586:## legs             7.28
1732015949586:## tailFALSE        0.00
1732015949586:## domesticFALSE    0.00
1732015949586:## airborneFALSE    0.00
1732015949586:## catsizeFALSE     0.00
1732015949586:## toothedFALSE     0.00
1732015949586:## venomousFALSE    0.00
1732015949586:## hairFALSE        0.00
1732015949586:## breathesFALSE    0.00
1732015949586:## predatorFALSE    0.00
1732015949586:ggplot(imp)
1732015949708:pred <- predict(fit, newdata = Zoo_test)
1732015949711:pred
1732015949711:##  [1] mammal        bird          mollusc.et.al bird
1732015949711:##  [5] mammal        mammal        insect        bird
1732015949712:##  [9] mammal        mammal        mammal        mammal
1732015949712:## [13] bird          fish          fish          reptile
1732015949712:## [17] mammal        mollusc.et.al
1732015949712:## 7 Levels: mammal bird reptile fish amphibian ... mollusc.et.al
1732015949712:confusionMatrix(data = pred,
1732015949712:ref = Zoo_test |> pull(type))
1732015949719:## Confusion Matrix and Statistics
1732015949719:##
1732015949719:##                Reference
1732015949719:## Prediction      mammal bird reptile fish amphibian insect
1732015949719:##   mammal             8    0       0    0         0      0
1732015949719:##   bird               0    4       0    0         0      0
1732015949719:##   reptile            0    0       1    0         0      0
1732015949719:##   fish               0    0       0    2         0      0
1732015949719:##   amphibian          0    0       0    0         0      0
1732015949719:##   insect             0    0       0    0         0      1
1732015949719:##   mollusc.et.al      0    0       0    0         0      0
1732015949719:##                Reference
1732015949719:## Prediction      mollusc.et.al
1732015949719:##   mammal                    0
1732015949719:##   bird                      0
1732015949719:##   reptile                   0
1732015949719:##   fish                      0
1732015949719:##   amphibian                 0
1732015949719:##   insect                    0
1732015949719:##   mollusc.et.al             2
1732015949719:##
1732015949719:## Overall Statistics
1732015949719:##
1732015949719:##                Accuracy : 1
1732015949719:##                  95% CI : (0.815, 1)
1732015949719:##     No Information Rate : 0.444
1732015949719:##     P-Value [Acc > NIR] : 4.58e-07
1732015949719:##
1732015949719:##                   Kappa : 1
1732015949719:##
1732015949719:##  Mcnemar's Test P-Value : NA
1732015949720:##
1732015949720:## Statistics by Class:
1732015949720:##
1732015949720:##                      Class: mammal Class: bird
1732015949720:## Sensitivity                  1.000       1.000
1732015949720:## Specificity                  1.000       1.000
1732015949720:## Pos Pred Value               1.000       1.000
1732015949720:## Neg Pred Value               1.000       1.000
1732015949720:## Prevalence                   0.444       0.222
1732015949720:## Detection Rate               0.444       0.222
1732015949720:## Detection Prevalence         0.444       0.222
1732015949720:## Balanced Accuracy            1.000       1.000
1732015949720:##                      Class: reptile Class: fish
1732015949720:## Sensitivity                  1.0000       1.000
1732015949720:## Specificity                  1.0000       1.000
1732015949720:## Pos Pred Value               1.0000       1.000
1732015949720:## Neg Pred Value               1.0000       1.000
1732015949720:## Prevalence                   0.0556       0.111
1732015949720:## Detection Rate               0.0556       0.111
1732015949720:## Detection Prevalence         0.0556       0.111
1732015949720:## Balanced Accuracy            1.0000       1.000
1732015949720:##                      Class: amphibian Class: insect
1732015949720:## Sensitivity                        NA        1.0000
1732015949720:## Specificity                         1        1.0000
1732015949720:## Pos Pred Value                     NA        1.0000
1732015949720:## Neg Pred Value                     NA        1.0000
1732015949720:## Prevalence                          0        0.0556
1732015949720:## Detection Rate                      0        0.0556
1732015949720:## Detection Prevalence                0        0.0556
1732015949720:## Balanced Accuracy                  NA        1.0000
1732015949720:##                      Class: mollusc.et.al
1732015949720:## Sensitivity                         1.000
1732015949721:## Specificity                         1.000
1732015949721:## Pos Pred Value                      1.000
1732015949721:## Neg Pred Value                      1.000
1732015949721:## Prevalence                          0.111
1732015949721:## Detection Rate                      0.111
1732015949721:## Detection Prevalence                0.111
1732015949721:## Balanced Accuracy                   1.000
1732015949721:# Model Comparison
1732015949721:train_index <- createFolds(Zoo_train$type,
1732015949721:k = 10,
1732015949721:returnTrain = TRUE)
1732015949721:rpartFit <- Zoo_train |>
1732015949721:train(type ~ .,
1732015949721:data = _,
1732015949721:method = "rpart",
1732015949721:tuneLength = 10,
1732015949721:trControl = trainControl(method = "cv",
1732015949721:index = train_index)
1732015949722:)
1732015949975:knnFit <- Zoo_train |>
1732015949975:train(type ~ .,
1732015949975:data = _,
1732015949976:method = "knn",
1732015949976:preProcess = "scale",
1732015949976:tuneLength = 10,
1732015949976:trControl = trainControl(method = "cv",
1732015949976:index = train_index)
1732015949976:)
1732015950198:resamps <- resamples(list(
1732015950198:CART = rpartFit,
1732015950198:kNearestNeighbors = knnFit
1732015950198:))
1732015950201:summary(resamps)
1732015950202:##
1732015950202:## Call:
1732015950202:## summary.resamples(object = resamps)
1732015950202:##
1732015950202:## Models: CART, kNearestNeighbors
1732015950202:## Number of resamples: 10
1732015950202:##
1732015950202:## Accuracy
1732015950202:##                     Min. 1st Qu. Median   Mean 3rd Qu.
1732015950202:## CART              0.6667   0.750 0.7778 0.7890  0.8512
1732015950202:## kNearestNeighbors 0.7500   0.875 0.8990 0.9076  1.0000
1732015950202:##                    Max. NA's
1732015950202:## CART              0.875    0
1732015950202:## kNearestNeighbors 1.000    0
1732015950202:##
1732015950202:## Kappa
1732015950202:##                     Min. 1st Qu. Median   Mean 3rd Qu.
1732015950202:## CART              0.5909  0.6800 0.7188 0.7227  0.7706
1732015950202:## kNearestNeighbors 0.6800  0.8315 0.8713 0.8816  1.0000
1732015950202:##                     Max. NA's
1732015950202:## CART              0.8298    0
1732015950202:## kNearestNeighbors 1.0000    0
1732015950202:bwplot(resamps, layout = c(3, 1))
1732015950240:difs <- diff(resamps)
1732015950241:difs
1732015950242:##
1732015950242:## Call:
1732015950242:## diff.resamples(x = resamps)
1732015950242:##
1732015950242:## Models: CART, kNearestNeighbors
1732015950242:## Metrics: Accuracy, Kappa
1732015950242:## Number of differences: 1
1732015950242:## p-value adjustment: bonferroni
1732015950242:summary(difs)
1732015950243:##
1732015950243:## Call:
1732015950243:## summary.diff.resamples(object = difs)
1732015950243:##
1732015950243:## p-value adjustment: bonferroni
1732015950243:## Upper diagonal: estimates of the difference
1732015950243:## Lower diagonal: p-value for H0: difference = 0
1732015950243:##
1732015950243:## Accuracy
1732015950243:##                   CART    kNearestNeighbors
1732015950243:## CART                      -0.119
1732015950243:## kNearestNeighbors 0.00768
1732015950243:##
1732015950243:## Kappa
1732015950243:##                   CART    kNearestNeighbors
1732015950243:## CART                      -0.159
1732015950243:## kNearestNeighbors 0.00538
1732015950243:# Feature Selection
1732015950243:library(FSelector)
1732015950250:# Univariate Feature Importance Score
1732015950250:weights <- Zoo_train |>
1732015950250:chi.squared(type ~ ., data = _) |>
1732015950250:as_tibble(rownames = "feature") |>
1732015950250:arrange(desc(attr_importance))
1732015950403:weights
1732015950412:## # A tibble: 16 × 2
1732015950412:##    feature  attr_importance
1732015950412:##    <chr>              <dbl>
1732015950412:##  1 feathers           1
1732015950412:##  2 milk               1
1732015950412:##  3 backbone           1
1732015950412:##  4 toothed            0.981
1732015950412:##  5 eggs               0.959
1732015950412:##  6 breathes           0.917
1732015950412:##  7 hair               0.906
1732015950412:##  8 fins               0.845
1732015950412:##  9 legs               0.834
1732015950412:## 10 airborne           0.818
1732015950412:## 11 tail               0.779
1732015950412:## 12 aquatic            0.725
1732015950412:## 13 catsize            0.602
1732015950412:## 14 venomous           0.520
1732015950412:## 15 predator           0.374
1732015950412:## 16 domestic           0.256
1732015950412:ggplot(weights,
1732015950412:aes(x = attr_importance,
1732015950412:y = reorder(feature, attr_importance))) +
1732015950412:geom_bar(stat = "identity") +
1732015950412:xlab("Importance score") +
1732015950412:ylab("Feature")
1732015950464:subset <- cutoff.k(weights |>
1732015950464:column_to_rownames("feature"),
1732015950464:5)
1732015950464:subset
1732015950464:## [1] "feathers" "milk"     "backbone" "toothed"  "eggs"
1732015950464:f <- as.simple.formula(subset, "type")
1732015950464:f
1732015950464:## type ~ feathers + milk + backbone + toothed + eggs
1732015950465:## <environment: 0x6522c21006e8>
1732015950465:m <- Zoo_train |> rpart(f, data = _)
1732015950466:rpart.plot(m, extra = 2, roundint = FALSE)
1732015950504:Zoo_train |>
1732015950504:gain.ratio(type ~ ., data = _) |>
1732015950504:as_tibble(rownames = "feature") |>
1732015950504:arrange(desc(attr_importance))
1732015950533:## # A tibble: 16 × 2
1732015950533:##    feature  attr_importance
1732015950533:##    <chr>              <dbl>
1732015950533:##  1 milk               1
1732015950533:##  2 backbone           1
1732015950533:##  3 feathers           1
1732015950533:##  4 toothed            0.959
1732015950533:##  5 eggs               0.907
1732015950533:##  6 breathes           0.845
1732015950533:##  7 hair               0.781
1732015950533:##  8 fins               0.689
1732015950533:##  9 legs               0.689
1732015950533:## 10 airborne           0.633
1732015950533:## 11 tail               0.573
1732015950533:## 12 aquatic            0.474
1732015950533:## 13 venomous           0.429
1732015950533:## 14 catsize            0.310
1732015950534:## 15 domestic           0.115
1732015950534:## 16 predator           0.110
1732015950534:# Feature Subset Selection
1732015950534:Zoo_train |>
1732015950534:cfs(type ~ ., data = _)
1732015950583:##  [1] "hair"     "feathers" "eggs"     "milk"     "toothed"
1732015950583:##  [6] "backbone" "breathes" "fins"     "legs"     "tail"
1732015950583:evaluator <- function(subset) {
1732015950583:model <- Zoo_train |>
1732015950583:train(as.simple.formula(subset, "type"),
1732015950583:data = _,
1732015950583:method = "rpart",
1732015950583:trControl = trainControl(method = "boot", number = 5),
1732015950583:tuneLength = 0)
1732015950583:results <- model$resample$Accuracy
1732015950583:cat("Trying features:", paste(subset, collapse = " + "), "\n")
1732015950583:m <- mean(results)
1732015950583:cat("Accuracy:", round(m, 2), "\n\n")
1732015950583:m
1732015950583:}
1732015950583:features <- Zoo_train |>
1732015950583:colnames() |>
1732015950583:setdiff("type")
1732015950584:#subset <- backward.search(features, evaluator)
1732015950584:#subset <- forward.search(features, evaluator)
1732015950584:#subset <- best.first.search(features, evaluator)
1732015950584:#subset <- hill.climbing.search(features, evaluator)
1732015950584:#subset
1732015950584:# Using Dummy Variables for Factors
1732015950584:tree_predator <- Zoo_train |>
1732015950584:rpart(predator ~ type, data = _)
1732015950585:rpart.plot(tree_predator, extra = 2, roundint = FALSE)
1732015950629:Zoo_train_dummy <- as_tibble(class2ind(Zoo_train$type)) |>
1732015950629:mutate(across(everything(), as.factor)) |>
1732015950629:add_column(predator = Zoo_train$predator)
1732015950632:Zoo_train_dummy
1732015950648:## # A tibble: 83 × 8
1732015950648:##    mammal bird  reptile fish  amphibian insect mollusc.et.al
1732015950648:##    <fct>  <fct> <fct>   <fct> <fct>     <fct>  <fct>
1732015950648:##  1 1      0     0       0     0         0      0
1732015950648:##  2 0      0     0       1     0         0      0
1732015950648:##  3 1      0     0       0     0         0      0
1732015950648:##  4 1      0     0       0     0         0      0
1732015950648:##  5 1      0     0       0     0         0      0
1732015950648:##  6 1      0     0       0     0         0      0
1732015950648:##  7 0      0     0       1     0         0      0
1732015950648:##  8 0      0     0       1     0         0      0
1732015950648:##  9 1      0     0       0     0         0      0
1732015950648:## 10 1      0     0       0     0         0      0
1732015950648:## # ℹ 73 more rows
1732015950648:## # ℹ 1 more variable: predator <fct>
1732015950648:tree_predator <- Zoo_train_dummy |>
1732015950648:rpart(predator ~ .,
1732015950648:data = _,
1732015950648:control = rpart.control(minsplit = 2, cp = 0.01))
1732015950650:rpart.plot(tree_predator, roundint = FALSE)
1732015950710:fit <- Zoo_train |>
1732015950710:train(predator ~ type,
1732015950710:data = _,
1732015950710:method = "rpart",
1732015950710:control = rpart.control(minsplit = 2),
1732015950710:tuneGrid = data.frame(cp = 0.01))
1732015950864:fit
1732015950864:## CART
1732015950865:##
1732015950865:## 83 samples
1732015950865:##  1 predictor
1732015950865:##  2 classes: 'TRUE', 'FALSE'
1732015950865:##
1732015950865:## No pre-processing
1732015950865:## Resampling: Bootstrapped (25 reps)
1732015950865:## Summary of sample sizes: 83, 83, 83, 83, 83, 83, ...
1732015950865:## Resampling results:
1732015950865:##
1732015950865:##   Accuracy  Kappa
1732015950865:##   0.5635    0.1166
1732015950865:##
1732015950865:## Tuning parameter 'cp' was held constant at a value of 0.01
1732015950865:rpart.plot(fit$finalModel, extra = 2)
1732015975771:# Chapter 2: Data
1732015975771:# Shakira B. Regalado
1732015975771:# BSIT 3B
1732015975771:# Install necessary libraries
1732015975771:pkgs <- c("arules", "caret", "factoextra", "GGally",
1732015975771:"ggcorrplot", "hexbin", "palmerpenguins", "plotly",
1732015975771:"proxy", "seriation", "tidyverse")
1732015975771:pkgs_install <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
1732015975776:if(length(pkgs_install)) install.packages(pkgs_install)
1732015975777:# Types of Data
1732015975777:# Attributes and Measurement
1732015975777:factor(c("red", "green", "green", "blue"))
1732015975777:## [1] red   green green blue
1732015975777:## Levels: blue green red
1732015975777:ordered(c("S", "L", "M", "S"),
1732015975777:levels = c("S", "M", "L"))
1732015975778:## [1] S L M S
1732015975778:## Levels: S < M < L
1732015975778:c(1, 2, 3, 4, 3, 3)
1732015975778:## [1] 1 2 3 4 3 3
1732015975778:# The Iris Dataset
1732015975778:library(tidyverse)
1732015975778:data(iris)
1732015975788:iris <- as_tibble(iris)
1732015975789:iris
1732015975818:## # A tibble: 150 × 5
1732015975818:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015975818:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015975818:##  1          5.1         3.5          1.4         0.2 setosa
1732015975818:##  2          4.9         3            1.4         0.2 setosa
1732015975818:##  3          4.7         3.2          1.3         0.2 setosa
1732015975818:##  4          4.6         3.1          1.5         0.2 setosa
1732015975818:##  5          5           3.6          1.4         0.2 setosa
1732015975818:##  6          5.4         3.9          1.7         0.4 setosa
1732015975818:##  7          4.6         3.4          1.4         0.3 setosa
1732015975818:##  8          5           3.4          1.5         0.2 setosa
1732015975818:##  9          4.4         2.9          1.4         0.2 setosa
1732015975818:## 10          4.9         3.1          1.5         0.1 setosa
1732015975818:## # ℹ 140 more rows
1732015975819:print(iris, n = 3, width = Inf)
1732015975843:## # A tibble: 150 × 5
1732015975843:##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015975843:##          <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015975843:## 1          5.1         3.5          1.4         0.2 setosa
1732015975843:## 2          4.9         3            1.4         0.2 setosa
1732015975843:## 3          4.7         3.2          1.3         0.2 setosa
1732015975843:## # ℹ 147 more rows
1732015975843:# Data Quality
1732015975843:summary(iris)
1732015975845:##   Sepal.Length   Sepal.Width    Petal.Length   Petal.Width
1732015975845:##  Min.   :4.30   Min.   :2.00   Min.   :1.00   Min.   :0.1
1732015975845:##  1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60   1st Qu.:0.3
1732015975845:##  Median :5.80   Median :3.00   Median :4.35   Median :1.3
1732015975845:##  Mean   :5.84   Mean   :3.06   Mean   :3.76   Mean   :1.2
1732015975845:##  3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10   3rd Qu.:1.8
1732015975845:##  Max.   :7.90   Max.   :4.40   Max.   :6.90   Max.   :2.5
1732015975845:##        Species
1732015975845:##  setosa    :50
1732015975845:##  versicolor:50
1732015975845:##  virginica :50
1732015975845:##
1732015975845:##
1732015975845:##
1732015975845:iris |>
1732015975846:summarize(mean = mean(Sepal.Length))
1732015975856:## # A tibble: 1 × 1
1732015975856:##    mean
1732015975856:##   <dbl>
1732015975856:## 1  5.84
1732015975856:iris |>
1732015975856:summarize(across(where(is.numeric), mean))
1732015975871:## # A tibble: 1 × 4
1732015975871:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015975871:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015975871:## 1         5.84        3.06         3.76        1.20
1732015975871:library(GGally)
1732015975871:## Registered S3 method overwritten by 'GGally':
1732015975871:##   method from
1732015975871:##   +.gg   ggplot2
1732015975871:ggpairs(iris, aes(color = Species), progress = FALSE)
1732015977228:## `stat_bin()` using `bins = 30`. Pick better value with
1732015977228:## `binwidth`.
1732015977228:## `stat_bin()` using `bins = 30`. Pick better value with
1732015977228:## `binwidth`.
1732015977228:## `stat_bin()` using `bins = 30`. Pick better value with
1732015977228:## `binwidth`.
1732015977228:## `stat_bin()` using `bins = 30`. Pick better value with
1732015977228:## `binwidth`.
1732015977228:clean.data <- iris |>
1732015977229:drop_na() |>
1732015977229:unique()
1732015977229:summary(clean.data)
1732015977230:##   Sepal.Length   Sepal.Width    Petal.Length
1732015977230:##  Min.   :4.30   Min.   :2.00   Min.   :1.00
1732015977230:##  1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60
1732015977230:##  Median :5.80   Median :3.00   Median :4.30
1732015977230:##  Mean   :5.84   Mean   :3.06   Mean   :3.75
1732015977230:##  3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10
1732015977230:##  Max.   :7.90   Max.   :4.40   Max.   :6.90
1732015977230:##   Petal.Width         Species
1732015977230:##  Min.   :0.10   setosa    :50
1732015977231:##  1st Qu.:0.30   versicolor:50
1732015977231:##  Median :1.30   virginica :49
1732015977231:##  Mean   :1.19
1732015977231:##  3rd Qu.:1.80
1732015977231:##  Max.   :2.50
1732015977231:# Data Preprocessing
1732015977231:# Aggregation
1732015977231:iris |>
1732015977231:group_by(Species) |>
1732015977231:summarize(across(everything(), mean))
1732015977243:## # A tibble: 3 × 5
1732015977243:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015977243:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1732015977243:## 1 setosa           5.01        3.43         1.46       0.246
1732015977243:## 2 versico…         5.94        2.77         4.26       1.33
1732015977244:## 3 virgini…         6.59        2.97         5.55       2.03
1732015977244:iris |>
1732015977244:group_by(Species) |>
1732015977244:summarize(across(everything(), median))
1732015977257:## # A tibble: 3 × 5
1732015977257:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015977257:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1732015977257:## 1 setosa            5           3.4         1.5          0.2
1732015977257:## 2 versico…          5.9         2.8         4.35         1.3
1732015977257:## 3 virgini…          6.5         3           5.55         2
1732015977257:# Random Sampling
1732015977257:sample(c("A", "B", "C"), size = 10, replace = TRUE)
1732015977257:##  [1] "C" "A" "C" "C" "C" "B" "A" "A" "C" "B"
1732015977257:take <- sample(seq(nrow(iris)), size = 15)
1732015977257:take
1732015977257:##  [1]  99 113 103 119  10 130  67  27  38  79  71  30 138  84
1732015977258:## [15] 110
1732015977258:iris[take, ]
1732015977268:## # A tibble: 15 × 5
1732015977268:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015977268:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015977268:##  1          5.1         2.5          3           1.1 versic…
1732015977268:##  2          6.8         3            5.5         2.1 virgin…
1732015977268:##  3          7.1         3            5.9         2.1 virgin…
1732015977268:##  4          7.7         2.6          6.9         2.3 virgin…
1732015977268:##  5          4.9         3.1          1.5         0.1 setosa
1732015977268:##  6          7.2         3            5.8         1.6 virgin…
1732015977269:##  7          5.6         3            4.5         1.5 versic…
1732015977269:##  8          5           3.4          1.6         0.4 setosa
1732015977269:##  9          4.9         3.6          1.4         0.1 setosa
1732015977269:## 10          6           2.9          4.5         1.5 versic…
1732015977269:## 11          5.9         3.2          4.8         1.8 versic…
1732015977269:## 12          4.7         3.2          1.6         0.2 setosa
1732015977269:## 13          6.4         3.1          5.5         1.8 virgin…
1732015977269:## 14          6           2.7          5.1         1.6 versic…
1732015977269:## 15          7.2         3.6          6.1         2.5 virgin…
1732015977269:set.seed(1000)
1732015977269:s <- iris |>
1732015977269:slice_sample(n = 15)
1732015977270:library(GGally)
1732015977270:ggpairs(s, aes(color = Species), progress = FALSE)
1732015978680:## `stat_bin()` using `bins = 30`. Pick better value with
1732015978680:## `binwidth`.
1732015978680:## `stat_bin()` using `bins = 30`. Pick better value with
1732015978680:## `binwidth`.
1732015978680:## `stat_bin()` using `bins = 30`. Pick better value with
1732015978680:## `binwidth`.
1732015978680:## `stat_bin()` using `bins = 30`. Pick better value with
1732015978680:## `binwidth`.
1732015978680:# Stratified Sampling
1732015978680:set.seed(1000)
1732015978681:s2 <- iris |>
1732015978681:group_by(Species) |>
1732015978681:slice_sample(n = 5) |>
1732015978681:ungroup()
1732015978683:library(GGally)
1732015978683:ggpairs(s2, aes(color = Species), progress = FALSE)
1732015980220:## `stat_bin()` using `bins = 30`. Pick better value with
1732015980220:## `binwidth`.
1732015980220:## `stat_bin()` using `bins = 30`. Pick better value with
1732015980220:## `binwidth`.
1732015980220:## `stat_bin()` using `bins = 30`. Pick better value with
1732015980220:## `binwidth`.
1732015980220:## `stat_bin()` using `bins = 30`. Pick better value with
1732015980220:## `binwidth`.
1732015980220:# Principal Components Analysis (PCA
1732015980220:plotly::plot_ly(iris,
1732015980220:x = ~Sepal.Length,
1732015980220:y = ~Petal.Length,
1732015980220:z = ~Sepal.Width,
1732015980220:color = ~Species, size = 1) |>
1732015980220:plotly::add_markers()
1732015980255:pc <- iris |>
1732015980255:select(-Species) |>
1732015980255:as.matrix() |>
1732015980255:prcomp()
1732015980256:summary(pc)
1732015980257:## Importance of components:
1732015980257:##                          PC1    PC2    PC3     PC4
1732015980257:## Standard deviation     2.056 0.4926 0.2797 0.15439
1732015980257:## Proportion of Variance 0.925 0.0531 0.0171 0.00521
1732015980257:## Cumulative Proportion  0.925 0.9777 0.9948 1.00000
1732015980257:plot(pc, type = "line")
1732015980344:str(pc)
1732015980346:## List of 5
1732015980346:##  $ sdev    : num [1:4] 2.056 0.493 0.28 0.154
1732015980346:##  $ rotation: num [1:4, 1:4] 0.3614 -0.0845 0.8567 0.3583 -0.6566 ...
1732015980346:##   ..- attr(*, "dimnames")=List of 2
1732015980346:##   .. ..$ : chr [1:4] "Sepal.Length" "Sepal.Width" "Petal.Length" "Petal.Width"
1732015980346:##   .. ..$ : chr [1:4] "PC1" "PC2" "PC3" "PC4"
1732015980346:##  $ center  : Named num [1:4] 5.84 3.06 3.76 1.2
1732015980346:##   ..- attr(*, "names")= chr [1:4] "Sepal.Length" "Sepal.Width" "Petal.Length" "Petal.Width"
1732015980347:##  $ scale   : logi FALSE
1732015980347:##  $ x       : num [1:150, 1:4] -2.68 -2.71 -2.89 -2.75 -2.73 ...
1732015980347:##   ..- attr(*, "dimnames")=List of 2
1732015980347:##   .. ..$ : NULL
1732015980347:##   .. ..$ : chr [1:4] "PC1" "PC2" "PC3" "PC4"
1732015980347:##  - attr(*, "class")= chr "prcomp"
1732015980347:iris_projected <- as_tibble(pc$x) |>
1732015980347:add_column(Species = iris$Species)
1732015980347:ggplot(iris_projected, aes(x = PC1, y = PC2, color = Species)) +
1732015980348:geom_point()
1732015980458:ggplot(iris_projected,
1732015980458:aes(x = PC1, y = 0, color = Species)) +
1732015980458:geom_point() +
1732015980458:scale_y_continuous(expand=c(0,0)) +
1732015980458:theme(axis.text.y = element_blank(),
1732015980459:axis.title.y = element_blank()
1732015980459:)
1732015980528:library(factoextra)
1732015980528:fviz_pca(pc)
1732015980622:fviz_pca_var(pc)
1732015980691:# Multi-Dimensional Scaling (MDS)
1732015980691:d <- iris |>
1732015980691:select(-Species) |>
1732015980691:dist()
1732015980692:fit <- cmdscale(d, k = 2)
1732015980696:colnames(fit) <- c("comp1", "comp2")
1732015980696:fit <- as_tibble(fit) |>
1732015980696:add_column(Species = iris$Species)
1732015980696:ggplot(fit, aes(x = comp1, y = comp2, color = Species)) +
1732015980697:geom_point()
1732015980782:# Other Nonlinear Dimensionality Reduction Methods
1732015980782:iris |>
1732015980782:pull(Sepal.Width) |>
1732015980782:cut(breaks = 3)
1732015980783:##   [1] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015980783:##   [6] (3.6,4.4] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015980783:##  [11] (3.6,4.4] (2.8,3.6] (2.8,3.6] (2.8,3.6] (3.6,4.4]
1732015980783:##  [16] (3.6,4.4] (3.6,4.4] (2.8,3.6] (3.6,4.4] (3.6,4.4]
1732015980783:##  [21] (2.8,3.6] (3.6,4.4] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015980783:##  [26] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015980783:##  [31] (2.8,3.6] (2.8,3.6] (3.6,4.4] (3.6,4.4] (2.8,3.6]
1732015980783:##  [36] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015980783:##  [41] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6] (3.6,4.4]
1732015980783:##  [46] (2.8,3.6] (3.6,4.4] (2.8,3.6] (3.6,4.4] (2.8,3.6]
1732015980783:##  [51] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2,2.8]   (2,2.8]
1732015980783:##  [56] (2,2.8]   (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]
1732015980783:##  [61] (2,2.8]   (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6]
1732015980783:##  [66] (2.8,3.6] (2.8,3.6] (2,2.8]   (2,2.8]   (2,2.8]
1732015980783:##  [71] (2.8,3.6] (2,2.8]   (2,2.8]   (2,2.8]   (2.8,3.6]
1732015980783:##  [76] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6] (2,2.8]
1732015980783:##  [81] (2,2.8]   (2,2.8]   (2,2.8]   (2,2.8]   (2.8,3.6]
1732015980783:##  [86] (2.8,3.6] (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]
1732015980783:##  [91] (2,2.8]   (2.8,3.6] (2,2.8]   (2,2.8]   (2,2.8]
1732015980783:##  [96] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2,2.8]   (2,2.8]
1732015980783:## [101] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015980783:## [106] (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]   (2.8,3.6]
1732015980784:## [111] (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]   (2,2.8]
1732015980784:## [116] (2.8,3.6] (2.8,3.6] (3.6,4.4] (2,2.8]   (2,2.8]
1732015980784:## [121] (2.8,3.6] (2,2.8]   (2,2.8]   (2,2.8]   (2.8,3.6]
1732015980784:## [126] (2.8,3.6] (2,2.8]   (2.8,3.6] (2,2.8]   (2.8,3.6]
1732015980784:## [131] (2,2.8]   (3.6,4.4] (2,2.8]   (2,2.8]   (2,2.8]
1732015980784:## [136] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015980784:## [141] (2.8,3.6] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6]
1732015980784:## [146] (2.8,3.6] (2,2.8]   (2.8,3.6] (2.8,3.6] (2.8,3.6]
1732015980784:## Levels: (2,2.8] (2.8,3.6] (3.6,4.4]
1732015980784:library(arules)
1732015980784:## Loading required package: Matrix
1732015980784:##
1732015980784:## Attaching package: 'Matrix'
1732015980784:## The following objects are masked from 'package:tidyr':
1732015980784:##
1732015980784:##     expand, pack, unpack
1732015980784:##
1732015980784:## Attaching package: 'arules'
1732015980784:## The following object is masked from 'package:dplyr':
1732015980784:##
1732015980784:##     recode
1732015980784:## The following objects are masked from 'package:base':
1732015980784:##
1732015980784:##     abbreviate, write
1732015980784:iris |> pull(Petal.Width) |>
1732015980784:discretize(method = "interval", breaks = 3)
1732015980785:##   [1] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##   [6] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [11] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [16] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [21] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [26] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [31] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [36] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [41] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [46] [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9) [0.1,0.9)
1732015980786:##  [51] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:##  [56] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:##  [61] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:##  [66] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:##  [71] [1.7,2.5] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:##  [76] [0.9,1.7) [0.9,1.7) [1.7,2.5] [0.9,1.7) [0.9,1.7)
1732015980786:##  [81] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:##  [86] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:##  [91] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:##  [96] [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7) [0.9,1.7)
1732015980786:## [101] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015980786:## [106] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015980786:## [111] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015980786:## [116] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [0.9,1.7)
1732015980786:## [121] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015980786:## [126] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [0.9,1.7)
1732015980786:## [131] [1.7,2.5] [1.7,2.5] [1.7,2.5] [0.9,1.7) [0.9,1.7)
1732015980786:## [136] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015980786:## [141] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015980786:## [146] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5] [1.7,2.5]
1732015980786:## attr(,"discretized:breaks")
1732015980786:## [1] 0.1 0.9 1.7 2.5
1732015980786:## attr(,"discretized:method")
1732015980786:## [1] interval
1732015980786:## Levels: [0.1,0.9) [0.9,1.7) [1.7,2.5]
1732015980787:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1732015980787:geom_vline(
1732015980787:xintercept = iris |>
1732015980787:pull(Petal.Width) |>
1732015980787:discretize(method = "interval", breaks = 3, onlycuts = TRUE),
1732015980787:color = "blue"
1732015980787:) +
1732015980787:labs(title = "Discretization: interval",
1732015980787:subtitle = "Blue lines are discretization boundaries")
1732015980853:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1732015980853:geom_vline(
1732015980853:xintercept = iris |>
1732015980853:pull(Petal.Width) |>
1732015980853:discretize(method = "frequency", breaks = 3, onlycuts = TRUE),
1732015980853:color = "blue"
1732015980853:) +
1732015980853:labs(title = "Discretization: frequency",
1732015980854:subtitle = "Blue lines are discretization boundaries")
1732015980922:ggplot(iris, aes(Petal.Width)) + geom_histogram(binwidth = .2) +
1732015980922:geom_vline(
1732015980922:xintercept = iris |>
1732015980922:pull(Petal.Width) |>
1732015980922:discretize(method = "cluster", breaks = 3, onlycuts = TRUE),
1732015980922:color = "blue"
1732015980922:) +
1732015980922:labs(title = "Discretization: cluster",
1732015980922:subtitle = "Blue lines are discretization boundaries")
1732015980981:# Variable Transformation: Standardization
1732015980981:scale_numeric <- function(x)
1732015980981:x |>
1732015980981:mutate(across(where(is.numeric),
1732015980981:function(y) (y - mean(y, na.rm = TRUE)) / sd(y, na.rm = TRUE)))
1732015980981:iris.scaled <- iris |>
1732015980981:scale_numeric()
1732015980983:iris.scaled
1732015981004:## # A tibble: 150 × 5
1732015981004:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015981004:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015981004:##  1       -0.898      1.02          -1.34       -1.31 setosa
1732015981005:##  2       -1.14      -0.132         -1.34       -1.31 setosa
1732015981005:##  3       -1.38       0.327         -1.39       -1.31 setosa
1732015981005:##  4       -1.50       0.0979        -1.28       -1.31 setosa
1732015981005:##  5       -1.02       1.25          -1.34       -1.31 setosa
1732015981005:##  6       -0.535      1.93          -1.17       -1.05 setosa
1732015981005:##  7       -1.50       0.786         -1.34       -1.18 setosa
1732015981005:##  8       -1.02       0.786         -1.28       -1.31 setosa
1732015981005:##  9       -1.74      -0.361         -1.34       -1.31 setosa
1732015981005:## 10       -1.14       0.0979        -1.28       -1.44 setosa
1732015981005:## # ℹ 140 more rows
1732015981005:summary(iris.scaled)
1732015981006:##   Sepal.Length      Sepal.Width      Petal.Length
1732015981007:##  Min.   :-1.8638   Min.   :-2.426   Min.   :-1.562
1732015981007:##  1st Qu.:-0.8977   1st Qu.:-0.590   1st Qu.:-1.222
1732015981007:##  Median :-0.0523   Median :-0.132   Median : 0.335
1732015981007:##  Mean   : 0.0000   Mean   : 0.000   Mean   : 0.000
1732015981007:##  3rd Qu.: 0.6722   3rd Qu.: 0.557   3rd Qu.: 0.760
1732015981007:##  Max.   : 2.4837   Max.   : 3.080   Max.   : 1.780
1732015981007:##   Petal.Width           Species
1732015981007:##  Min.   :-1.442   setosa    :50
1732015981007:##  1st Qu.:-1.180   versicolor:50
1732015981007:##  Median : 0.132   virginica :50
1732015981007:##  Mean   : 0.000
1732015981007:##  3rd Qu.: 0.788
1732015981007:##  Max.   : 1.706
1732015981007:# Measures of Similarity and Dissimilarit
1732015981007:# Minkowsky Distance
1732015981007:iris_sample <- iris.scaled |>
1732015981007:select(-Species) |>
1732015981007:slice(1:5)
1732015981009:iris_sample
1732015981026:## # A tibble: 5 × 4
1732015981026:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015981026:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015981026:## 1       -0.898      1.02          -1.34       -1.31
1732015981026:## 2       -1.14      -0.132         -1.34       -1.31
1732015981026:## 3       -1.38       0.327         -1.39       -1.31
1732015981026:## 4       -1.50       0.0979        -1.28       -1.31
1732015981026:## 5       -1.02       1.25          -1.34       -1.31
1732015981026:dist(iris_sample, method = "euclidean")
1732015981027:##        1      2      3      4
1732015981027:## 2 1.1723
1732015981027:## 3 0.8428 0.5216
1732015981027:## 4 1.1000 0.4326 0.2829
1732015981027:## 5 0.2593 1.3819 0.9883 1.2460
1732015981027:dist(iris_sample, method = "manhattan")
1732015981028:##        1      2      3      4
1732015981028:## 2 1.3887
1732015981029:## 3 1.2280 0.7570
1732015981029:## 4 1.5782 0.6484 0.4635
1732015981029:## 5 0.3502 1.4973 1.3367 1.6868
1732015981029:dist(iris_sample, method = "maximum")
1732015981031:##        1      2      3      4
1732015981031:## 2 1.1471
1732015981031:## 3 0.6883 0.4589
1732015981031:## 4 0.9177 0.3623 0.2294
1732015981031:## 5 0.2294 1.3766 0.9177 1.1471
1732015981031:# Distances for Binary Data
1732015981031:b <- rbind(
1732015981031:c(0,0,0,1,1,1,1,0,0,1),
1732015981031:c(0,0,1,1,1,0,0,1,0,0)
1732015981032:)
1732015981032:b
1732015981032:##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
1732015981032:## [1,]    0    0    0    1    1    1    1    0    0     1
1732015981032:## [2,]    0    0    1    1    1    0    0    1    0     0
1732015981032:b_logical <- apply(b, MARGIN = 2, as.logical)
1732015981033:b_logical
1732015981033:##       [,1]  [,2]  [,3] [,4] [,5]  [,6]  [,7]  [,8]  [,9]
1732015981033:## [1,] FALSE FALSE FALSE TRUE TRUE  TRUE  TRUE FALSE FALSE
1732015981033:## [2,] FALSE FALSE  TRUE TRUE TRUE FALSE FALSE  TRUE FALSE
1732015981034:##      [,10]
1732015981034:## [1,]  TRUE
1732015981034:## [2,] FALSE
1732015981034:# Hamming Distance
1732015981034:dist(b, method = "manhattan")
1732015981036:##   1
1732015981036:## 2 5
1732015981036:dist(b, method = "euclidean")^2
1732015981038:##   1
1732015981038:## 2 5
1732015981038:# Jaccard Index
1732015981038:dist(b, method = "binary")
1732015981040:##        1
1732015981040:## 2 0.7143
1732015981040:# Distances for Mixed Data
1732015981040:people <- tibble(
1732015981040:height = c(      160,    185,    170),
1732015981040:weight = c(       52,     90,     75),
1732015981041:sex    = c( "female", "male", "male")
1732015981041:)
1732015981042:people
1732015981118:## # A tibble: 3 × 3
1732015981118:##   height weight sex
1732015981118:##    <dbl>  <dbl> <chr>
1732015981118:## 1    160     52 female
1732015981118:## 2    185     90 male
1732015981118:## 3    170     75 male
1732015981118:people <- people |>
1732015981118:mutate(across(where(is.character), factor))
1732015981119:people
1732015981127:## # A tibble: 3 × 3
1732015981127:##   height weight sex
1732015981127:##    <dbl>  <dbl> <fct>
1732015981127:## 1    160     52 female
1732015981127:## 2    185     90 male
1732015981127:## 3    170     75 male
1732015981128:# Gower’s Coefficient
1732015981128:library(proxy)
1732015981128:##
1732015981128:## Attaching package: 'proxy'
1732015981128:## The following object is masked from 'package:Matrix':
1732015981128:##
1732015981128:##     as.matrix
1732015981128:## The following objects are masked from 'package:stats':
1732015981128:##
1732015981128:##     as.dist, dist
1732015981128:## The following object is masked from 'package:base':
1732015981128:##
1732015981128:##     as.matrix
1732015981128:d_Gower <- dist(people, method = "Gower")
1732015981129:d_Gower
1732015981129:##        1      2
1732015981129:## 2 1.0000
1732015981129:## 3 0.6684 0.3316
1732015981129:# Using Euclidean Distance with Mixed Data
1732015981129:library(caret)
1732015981129:## Loading required package: lattice
1732015981129:##
1732015981129:## Attaching package: 'caret'
1732015981129:## The following object is masked from 'package:purrr':
1732015981129:##
1732015981129:##     lift
1732015981129:data_dummy <- dummyVars(~., people) |>
1732015981129:predict(people)
1732015981130:data_dummy
1732015981130:##   height weight sex.female sex.male
1732015981130:## 1    160     52          1        0
1732015981130:## 2    185     90          0        1
1732015981130:## 3    170     75          0        1
1732015981130:weight_matrix <- matrix(c(1, 1, 1/2, 1/2),
1732015981130:ncol = 4,
1732015981130:nrow = nrow(data_dummy),
1732015981130:byrow = TRUE)
1732015981130:data_dummy_scaled <- scale(data_dummy) * weight_matrix
1732015981131:d_dummy <- dist(data_dummy_scaled)
1732015981131:d_dummy
1732015981131:##       1     2
1732015981131:## 2 3.064
1732015981131:## 3 1.891 1.427
1732015981131:ggplot(tibble(d_dummy, d_Gower), aes(x = d_dummy, y = d_Gower)) +
1732015981131:geom_point() +
1732015981131:geom_smooth(method = "lm", se = FALSE)
1732015981257:## Don't know how to automatically pick scale for object of
1732015981257:## type <dist>. Defaulting to continuous.
1732015981257:## Don't know how to automatically pick scale for object of
1732015981257:## type <dist>. Defaulting to continuous.
1732015981257:## `geom_smooth()` using formula = 'y ~ x'
1732015981257:# More Proximity Measure
1732015981257:library(proxy)
1732015981257:pr_DB$get_entry_names()
1732015981257:##  [1] "Jaccard"         "Kulczynski1"     "Kulczynski2"
1732015981257:##  [4] "Mountford"       "Fager"           "Russel"
1732015981257:##  [7] "simple matching" "Hamman"          "Faith"
1732015981257:## [10] "Tanimoto"        "Dice"            "Phi"
1732015981257:## [13] "Stiles"          "Michael"         "Mozley"
1732015981257:## [16] "Yule"            "Yule2"           "Ochiai"
1732015981257:## [19] "Simpson"         "Braun-Blanquet"  "cosine"
1732015981257:## [22] "angular"         "eJaccard"        "eDice"
1732015981257:## [25] "correlation"     "Chi-squared"     "Phi-squared"
1732015981257:## [28] "Tschuprow"       "Cramer"          "Pearson"
1732015981258:## [31] "Gower"           "Euclidean"       "Mahalanobis"
1732015981258:## [34] "Bhjattacharyya"  "Manhattan"       "supremum"
1732015981258:## [37] "Minkowski"       "Canberra"        "Wave"
1732015981258:## [40] "divergence"      "Kullback"        "Bray"
1732015981258:## [43] "Soergel"         "Levenshtein"     "Podani"
1732015981258:## [46] "Chord"           "Geodesic"        "Whittaker"
1732015981258:## [49] "Hellinger"       "fJaccard"
1732015981258:# Data Exploration
1732015981258:library(tidyverse)
1732015981258:data(iris)
1732015981263:iris <- as_tibble(iris)
1732015981263:iris
1732015981286:## # A tibble: 150 × 5
1732015981286:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015981286:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015981286:##  1          5.1         3.5          1.4         0.2 setosa
1732015981286:##  2          4.9         3            1.4         0.2 setosa
1732015981286:##  3          4.7         3.2          1.3         0.2 setosa
1732015981286:##  4          4.6         3.1          1.5         0.2 setosa
1732015981286:##  5          5           3.6          1.4         0.2 setosa
1732015981286:##  6          5.4         3.9          1.7         0.4 setosa
1732015981286:##  7          4.6         3.4          1.4         0.3 setosa
1732015981286:##  8          5           3.4          1.5         0.2 setosa
1732015981286:##  9          4.4         2.9          1.4         0.2 setosa
1732015981286:## 10          4.9         3.1          1.5         0.1 setosa
1732015981286:## # ℹ 140 more rows
1732015981286:# Basic statistics
1732015981286:summary(iris)
1732015981287:##   Sepal.Length   Sepal.Width    Petal.Length   Petal.Width
1732015981287:##  Min.   :4.30   Min.   :2.00   Min.   :1.00   Min.   :0.1
1732015981287:##  1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60   1st Qu.:0.3
1732015981287:##  Median :5.80   Median :3.00   Median :4.35   Median :1.3
1732015981287:##  Mean   :5.84   Mean   :3.06   Mean   :3.76   Mean   :1.2
1732015981287:##  3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10   3rd Qu.:1.8
1732015981287:##  Max.   :7.90   Max.   :4.40   Max.   :6.90   Max.   :2.5
1732015981287:##        Species
1732015981287:##  setosa    :50
1732015981287:##  versicolor:50
1732015981287:##  virginica :50
1732015981287:##
1732015981287:##
1732015981287:##
1732015981287:iris |>
1732015981287:summarize(avg_Sepal.Length = mean(Sepal.Length),
1732015981287:sd_Sepal.Length = sd(Sepal.Length))
1732015981295:## # A tibble: 1 × 2
1732015981295:##   avg_Sepal.Length sd_Sepal.Length
1732015981295:##              <dbl>           <dbl>
1732015981295:## 1             5.84           0.828
1732015981295:mean(c(1, 2, NA, 3, 4, 5))
1732015981295:## [1] NA
1732015981295:mean(c(1, 2, NA, 3, 4, 5),  na.rm = TRUE)
1732015981295:## [1] 3
1732015981295:iris |>
1732015981295:summarize(
1732015981295:avg_Sepal.Length = mean(Sepal.Length),
1732015981295:trimmed_avg_Sepal.Length = mean(Sepal.Length, trim = .1)
1732015981295:)
1732015981302:## # A tibble: 1 × 2
1732015981302:##   avg_Sepal.Length trimmed_avg_Sepal.Length
1732015981302:##              <dbl>                    <dbl>
1732015981302:## 1             5.84                     5.81
1732015981302:iris |> summarize(across(where(is.numeric), mean))
1732015981312:## # A tibble: 1 × 4
1732015981312:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015981312:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015981312:## 1         5.84        3.06         3.76        1.20
1732015981312:iris |> summarize(across(where(is.numeric), sd))
1732015981322:## # A tibble: 1 × 4
1732015981322:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015981322:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015981322:## 1        0.828       0.436         1.77       0.762
1732015981322:iris |> summarize(across(where(is.numeric),
1732015981322:list(min = min,
1732015981322:median = median,
1732015981322:max = max)))
1732015981341:## # A tibble: 1 × 12
1732015981341:##   Sepal.Length_min Sepal.Length_median Sepal.Length_max
1732015981341:##              <dbl>               <dbl>            <dbl>
1732015981341:## 1              4.3                 5.8              7.9
1732015981341:## # ℹ 9 more variables: Sepal.Width_min <dbl>,
1732015981341:## #   Sepal.Width_median <dbl>, Sepal.Width_max <dbl>,
1732015981341:## #   Petal.Length_min <dbl>, Petal.Length_median <dbl>,
1732015981341:## #   Petal.Length_max <dbl>, Petal.Width_min <dbl>,
1732015981341:## #   Petal.Width_median <dbl>, Petal.Width_max <dbl>
1732015981341:iris |> summarize(across(where(is.numeric), mad))
1732015981419:## # A tibble: 1 × 4
1732015981419:##   Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015981419:##          <dbl>       <dbl>        <dbl>       <dbl>
1732015981419:## 1         1.04       0.445         1.85        1.04
1732015981419:# Grouped Operations and Calculations
1732015981419:iris |>
1732015981419:group_by(Species) |>
1732015981419:summarize(across(Sepal.Length, mean))
1732015981430:## # A tibble: 3 × 2
1732015981430:##   Species    Sepal.Length
1732015981430:##   <fct>             <dbl>
1732015981430:## 1 setosa             5.01
1732015981430:## 2 versicolor         5.94
1732015981430:## 3 virginica          6.59
1732015981430:iris |>
1732015981430:group_by(Species) |>
1732015981430:summarize(across(where(is.numeric), mean))
1732015981443:## # A tibble: 3 × 5
1732015981443:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015981443:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1732015981443:## 1 setosa           5.01        3.43         1.46       0.246
1732015981443:## 2 versico…         5.94        2.77         4.26       1.33
1732015981443:## 3 virgini…         6.59        2.97         5.55       2.03
1732015981443:res.aov <- aov(Sepal.Length ~ Species, data = iris)
1732015981444:summary(res.aov)
1732015981445:##              Df Sum Sq Mean Sq F value Pr(>F)
1732015981445:## Species       2   63.2   31.61     119 <2e-16 ***
1732015981445:## Residuals   147   39.0    0.27
1732015981445:## ---
1732015981445:## Signif. codes:
1732015981445:## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
1732015981445:TukeyHSD(res.aov)
1732015981447:##   Tukey multiple comparisons of means
1732015981447:##     95% family-wise confidence level
1732015981447:##
1732015981447:## Fit: aov(formula = Sepal.Length ~ Species, data = iris)
1732015981447:##
1732015981447:## $Species
1732015981447:##                       diff    lwr    upr p adj
1732015981447:## versicolor-setosa    0.930 0.6862 1.1738     0
1732015981447:## virginica-setosa     1.582 1.3382 1.8258     0
1732015981447:## virginica-versicolor 0.652 0.4082 0.8958     0
1732015981447:# Tabulate data
1732015981447:iris |>
1732015981447:group_by(Species) |>
1732015981447:summarize(n())
1732015981456:## # A tibble: 3 × 2
1732015981456:##   Species    `n()`
1732015981456:##   <fct>      <int>
1732015981456:## 1 setosa        50
1732015981456:## 2 versicolor    50
1732015981456:## 3 virginica     50
1732015981456:iris_ord <- iris |>
1732015981456:mutate(across(where(is.numeric),
1732015981456:function(x) cut(x, 3, labels = c("short", "medium", "long"),
1732015981457:ordered = TRUE)))
1732015981458:iris_ord
1732015981471:## # A tibble: 150 × 5
1732015981471:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015981471:##    <ord>        <ord>       <ord>        <ord>       <fct>
1732015981471:##  1 short        medium      short        short       setosa
1732015981471:##  2 short        medium      short        short       setosa
1732015981471:##  3 short        medium      short        short       setosa
1732015981471:##  4 short        medium      short        short       setosa
1732015981471:##  5 short        medium      short        short       setosa
1732015981471:##  6 short        long        short        short       setosa
1732015981472:##  7 short        medium      short        short       setosa
1732015981472:##  8 short        medium      short        short       setosa
1732015981472:##  9 short        medium      short        short       setosa
1732015981472:## 10 short        medium      short        short       setosa
1732015981472:## # ℹ 140 more rows
1732015981472:summary(iris_ord)
1732015981473:##  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015981473:##  short :59    short :47   short :50    short :50
1732015981473:##  medium:71    medium:88   medium:54    medium:54
1732015981473:##  long  :20    long  :15   long  :46    long  :46
1732015981473:##        Species
1732015981473:##  setosa    :50
1732015981473:##  versicolor:50
1732015981473:##  virginica :50
1732015981473:tbl <- iris_ord |>
1732015981473:select(Sepal.Length, Species) |>
1732015981473:table()
1732015981474:tbl
1732015981474:##             Species
1732015981474:## Sepal.Length setosa versicolor virginica
1732015981474:##       short      47         11         1
1732015981474:##       medium      3         36        32
1732015981474:##       long        0          3        17
1732015981474:iris_ord |>
1732015981474:select(Species, Sepal.Length) |>
1732015981474:### Relationship Between Nominal and Ordinal Features
1732015981474:pivot_longer(cols = Sepal.Length) |>
1732015981475:group_by(Species, value) |>
1732015981475:count() |>
1732015981475:ungroup() |>
1732015981475:pivot_wider(names_from = Species, values_from = n)
1732015981491:## # A tibble: 3 × 4
1732015981491:##   value  setosa versicolor virginica
1732015981491:##   <ord>   <int>      <int>     <int>
1732015981491:## 1 short      47         11         1
1732015981491:## 2 medium      3         36        32
1732015981491:## 3 long       NA          3        17
1732015981491:tbl |>
1732015981491:chisq.test()
1732015981492:##
1732015981492:##  Pearson's Chi-squared test
1732015981492:##
1732015981492:## data:  tbl
1732015981492:## X-squared = 112, df = 4, p-value <2e-16
1732015981492:fisher.test(tbl)
1732015981494:##
1732015981495:##  Fisher's Exact Test for Count Data
1732015981495:##
1732015981495:## data:  tbl
1732015981495:## p-value <2e-16
1732015981495:## alternative hypothesis: two.sided
1732015981495:# Percentiles (Quantiles)
1732015981495:iris |>
1732015981495:pull(Petal.Length) |>
1732015981495:quantile()
1732015981495:##   0%  25%  50%  75% 100%
1732015981495:## 1.00 1.60 4.35 5.10 6.90
1732015981495:iris |>
1732015981495:summarize(IQR =
1732015981495:quantile(Petal.Length, probs = 0.75) -
1732015981495:quantile(Petal.Length, probs = 0.25))
1732015981502:## # A tibble: 1 × 1
1732015981502:##     IQR
1732015981502:##   <dbl>
1732015981502:## 1   3.5
1732015981502:# Correlation
1732015981502:# Pearson Correlation
1732015981502:cc <- iris |>
1732015981502:select(-Species) |>
1732015981502:cor()
1732015981503:cc
1732015981503:##              Sepal.Length Sepal.Width Petal.Length
1732015981503:## Sepal.Length       1.0000     -0.1176       0.8718
1732015981503:## Sepal.Width       -0.1176      1.0000      -0.4284
1732015981503:## Petal.Length       0.8718     -0.4284       1.0000
1732015981503:## Petal.Width        0.8179     -0.3661       0.9629
1732015981503:##              Petal.Width
1732015981503:## Sepal.Length      0.8179
1732015981503:## Sepal.Width      -0.3661
1732015981503:## Petal.Length      0.9629
1732015981503:## Petal.Width       1.0000
1732015981503:ggplot(iris, aes(Petal.Length, Petal.Width)) +
1732015981503:geom_point() +
1732015981503:geom_smooth(method = "lm")
1732015981565:## `geom_smooth()` using formula = 'y ~ x'
1732015981565:with(iris, cor(Petal.Length, Petal.Width))
1732015981565:## [1] 0.9629
1732015981565:with(iris, cor.test(Petal.Length, Petal.Width))
1732015981566:##
1732015981566:##  Pearson's product-moment correlation
1732015981566:##
1732015981566:## data:  Petal.Length and Petal.Width
1732015981566:## t = 43, df = 148, p-value <2e-16
1732015981566:## alternative hypothesis: true correlation is not equal to 0
1732015981566:## 95 percent confidence interval:
1732015981566:##  0.9491 0.9730
1732015981566:## sample estimates:
1732015981566:##    cor
1732015981566:## 0.9629
1732015981566:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1732015981566:geom_point() +
1732015981566:geom_smooth(method = "lm")
1732015981645:## `geom_smooth()` using formula = 'y ~ x'
1732015981645:with(iris, cor(Sepal.Length, Sepal.Width))
1732015981646:## [1] -0.1176
1732015981646:with(iris, cor.test(Sepal.Length, Sepal.Width))
1732015981646:##
1732015981646:##  Pearson's product-moment correlation
1732015981646:##
1732015981646:## data:  Sepal.Length and Sepal.Width
1732015981646:## t = -1.4, df = 148, p-value = 0.2
1732015981646:## alternative hypothesis: true correlation is not equal to 0
1732015981646:## 95 percent confidence interval:
1732015981646:##  -0.27269  0.04351
1732015981646:## sample estimates:
1732015981646:##     cor
1732015981646:## -0.1176
1732015981646:# Rank Correlation
1732015981647:iris_ord <- iris |>
1732015981647:mutate(across(where(is.numeric),
1732015981647:function(x) cut(x, 3,
1732015981647:labels = c("short", "medium", "long"),
1732015981647:ordered = TRUE)))
1732015981648:iris_ord
1732015981662:## # A tibble: 150 × 5
1732015981662:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015981662:##    <ord>        <ord>       <ord>        <ord>       <fct>
1732015981662:##  1 short        medium      short        short       setosa
1732015981662:##  2 short        medium      short        short       setosa
1732015981662:##  3 short        medium      short        short       setosa
1732015981662:##  4 short        medium      short        short       setosa
1732015981662:##  5 short        medium      short        short       setosa
1732015981662:##  6 short        long        short        short       setosa
1732015981662:##  7 short        medium      short        short       setosa
1732015981662:##  8 short        medium      short        short       setosa
1732015981662:##  9 short        medium      short        short       setosa
1732015981662:## 10 short        medium      short        short       setosa
1732015981662:## # ℹ 140 more rows
1732015981662:summary(iris_ord)
1732015981663:##  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015981663:##  short :59    short :47   short :50    short :50
1732015981663:##  medium:71    medium:88   medium:54    medium:54
1732015981663:##  long  :20    long  :15   long  :46    long  :46
1732015981663:##        Species
1732015981663:##  setosa    :50
1732015981663:##  versicolor:50
1732015981663:##  virginica :50
1732015981663:iris_ord |>
1732015981663:pull(Sepal.Length)
1732015981664:##   [1] short  short  short  short  short  short  short
1732015981664:##   [8] short  short  short  short  short  short  short
1732015981664:##  [15] medium medium short  short  medium short  short
1732015981664:##  [22] short  short  short  short  short  short  short
1732015981664:##  [29] short  short  short  short  short  short  short
1732015981664:##  [36] short  short  short  short  short  short  short
1732015981664:##  [43] short  short  short  short  short  short  short
1732015981664:##  [50] short  long   medium long   short  medium medium
1732015981664:##  [57] medium short  medium short  short  medium medium
1732015981664:##  [64] medium medium medium medium medium medium medium
1732015981664:##  [71] medium medium medium medium medium medium long
1732015981664:##  [78] medium medium medium short  short  medium medium
1732015981664:##  [85] short  medium medium medium medium short  short
1732015981664:##  [92] medium medium short  medium medium medium medium
1732015981664:##  [99] short  medium medium medium long   medium medium
1732015981664:## [106] long   short  long   medium long   medium medium
1732015981664:## [113] long   medium medium medium medium long   long
1732015981664:## [120] medium long   medium long   medium medium long
1732015981664:## [127] medium medium medium long   long   long   medium
1732015981664:## [134] medium medium long   medium medium medium long
1732015981664:## [141] medium long   medium long   medium medium medium
1732015981664:## [148] medium medium medium
1732015981664:## Levels: short < medium < long
1732015981664:iris_ord |>
1732015981664:select(-Species) |>
1732015981664:sapply(xtfrm) |>
1732015981664:cor(method = "kendall")
1732015981666:##              Sepal.Length Sepal.Width Petal.Length
1732015981666:## Sepal.Length       1.0000     -0.1438       0.7419
1732015981666:## Sepal.Width       -0.1438      1.0000      -0.3299
1732015981666:## Petal.Length       0.7419     -0.3299       1.0000
1732015981666:## Petal.Width        0.7295     -0.3154       0.9198
1732015981666:##              Petal.Width
1732015981666:## Sepal.Length      0.7295
1732015981666:## Sepal.Width      -0.3154
1732015981666:## Petal.Length      0.9198
1732015981666:## Petal.Width       1.0000
1732015981666:iris_ord |>
1732015981666:select(-Species) |>
1732015981666:sapply(xtfrm) |>
1732015981666:cor(method = "spearman")
1732015981667:##              Sepal.Length Sepal.Width Petal.Length
1732015981667:## Sepal.Length       1.0000     -0.1570       0.7938
1732015981667:## Sepal.Width       -0.1570      1.0000      -0.3663
1732015981667:## Petal.Length       0.7938     -0.3663       1.0000
1732015981667:## Petal.Width        0.7843     -0.3517       0.9399
1732015981667:##              Petal.Width
1732015981667:## Sepal.Length      0.7843
1732015981667:## Sepal.Width      -0.3517
1732015981667:## Petal.Length      0.9399
1732015981667:## Petal.Width       1.0000
1732015981667:iris |>
1732015981667:select(-Species) |>
1732015981667:cor()
1732015981668:##              Sepal.Length Sepal.Width Petal.Length
1732015981668:## Sepal.Length       1.0000     -0.1176       0.8718
1732015981668:## Sepal.Width       -0.1176      1.0000      -0.4284
1732015981668:## Petal.Length       0.8718     -0.4284       1.0000
1732015981668:## Petal.Width        0.8179     -0.3661       0.9629
1732015981668:##              Petal.Width
1732015981668:## Sepal.Length      0.8179
1732015981668:## Sepal.Width      -0.3661
1732015981668:## Petal.Length      0.9629
1732015981668:## Petal.Width       1.0000
1732015981668:# Density
1732015981668:ggplot(iris, aes(x = Petal.Length, y = 0)) + geom_point()
1732015981719:# Histograms
1732015981719:ggplot(iris, aes(x = Petal.Length)) +
1732015981719:geom_histogram() +
1732015981719:geom_rug(alpha = 1/2)
1732015981787:## `stat_bin()` using `bins = 30`. Pick better value with
1732015981787:## `binwidth`.
1732015981787:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1732015981787:geom_bin2d(bins = 10) +
1732015981787:geom_jitter(color = "red")
1732015981858:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1732015981858:geom_hex(bins = 10) +
1732015981858:geom_jitter(color = "red")
1732015981942:# Kernel Density Estimate (KDE)
1732015981942:ggplot(iris, aes(Petal.Length)) +
1732015981942:geom_density(bw = .2) +
1732015981942:geom_rug(alpha = 1/2)
1732015982011:ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
1732015982011:geom_density_2d_filled() +
1732015982011:geom_jitter()
1732015982160:# Visualization
1732015982160:# Histogram
1732015982160:ggplot(iris, aes(Petal.Width)) + geom_histogram(bins = 20)
1732015982239:ggplot(iris, aes(Petal.Width)) +
1732015982239:geom_histogram(bins = 20, aes(fill = Species))
1732015982307:ggplot(iris, aes(Petal.Width)) +
1732015982308:geom_histogram(bins = 20, aes(fill = Species), alpha = .5, position = 'identity')
1732015982394:# Boxplot
1732015982394:ggplot(iris, aes(Species, Sepal.Length)) +
1732015982394:geom_boxplot()
1732015982464:iris |> group_by(Species) |>
1732015982464:summarize(across(where(is.numeric), median))
1732015982477:## # A tibble: 3 × 5
1732015982477:##   Species  Sepal.Length Sepal.Width Petal.Length Petal.Width
1732015982477:##   <fct>           <dbl>       <dbl>        <dbl>       <dbl>
1732015982477:## 1 setosa            5           3.4         1.5          0.2
1732015982477:## 2 versico…          5.9         2.8         4.35         1.3
1732015982477:## 3 virgini…          6.5         3           5.55         2
1732015982477:library(tidyr)
1732015982477:iris_long <- iris |>
1732015982477:mutate(id = row_number()) |>
1732015982477:pivot_longer(1:4)
1732015982479:ggplot(iris_long, aes(name, value)) +
1732015982479:geom_boxplot() +
1732015982480:labs(y = "Original value")
1732015982547:library(tidyr)
1732015982547:iris_long_scaled <- iris |>
1732015982547:scale_numeric() |>
1732015982547:mutate(id = row_number()) |> pivot_longer(1:4)
1732015982554:ggplot(iris_long_scaled, aes(name, value)) +
1732015982554:geom_boxplot() +
1732015982554:labs(y = "Scaled value")
1732015982621:# Scatter plot
1732015982621:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1732015982621:geom_point(aes(color = Species))
1732015982692:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1732015982692:geom_point(aes(color = Species)) +
1732015982692:geom_smooth(method = "lm")
1732015982799:## `geom_smooth()` using formula = 'y ~ x'
1732015982799:ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
1732015982799:geom_point(aes(color = Species)) +
1732015982799:geom_smooth(method = "lm", aes(color = Species))
1732015982897:## `geom_smooth()` using formula = 'y ~ x'
1732015982897:# Scatter Plot Matrix
1732015982897:pairs(iris, col = iris$Species)
1732015982958:library("GGally")
1732015982958:ggpairs(iris,  aes(color = Species), progress = FALSE)
1732015984260:## `stat_bin()` using `bins = 30`. Pick better value with
1732015984260:## `binwidth`.
1732015984260:## `stat_bin()` using `bins = 30`. Pick better value with
1732015984260:## `binwidth`.
1732015984260:## `stat_bin()` using `bins = 30`. Pick better value with
1732015984260:## `binwidth`.
1732015984260:## `stat_bin()` using `bins = 30`. Pick better value with
1732015984260:## `binwidth`.
1732015984260:# Matrix Visualization
1732015984260:iris_matrix <- iris |> select(-Species) |> as.matrix()
1732015984261:iris_long <- as_tibble(iris_matrix) |>
1732015984261:mutate(id = row_number()) |>
1732015984261:pivot_longer(1:4)
1732015984263:head(iris_long)
1732015984272:## # A tibble: 6 × 3
1732015984272:##      id name         value
1732015984272:##   <int> <chr>        <dbl>
1732015984272:## 1     1 Sepal.Length   5.1
1732015984272:## 2     1 Sepal.Width    3.5
1732015984272:## 3     1 Petal.Length   1.4
1732015984272:## 4     1 Petal.Width    0.2
1732015984272:## 5     2 Sepal.Length   4.9
1732015984272:## 6     2 Sepal.Width    3
1732015984272:ggplot(iris_long, aes(x = name, y = id)) +
1732015984272:geom_tile(aes(fill = value))
1732015984401:library(seriation)
1732015984401:## Registered S3 methods overwritten by 'registry':
1732015984401:##   method               from
1732015984401:##   print.registry_field proxy
1732015984401:##   print.registry_entry proxy
1732015984401:##
1732015984402:## Attaching package: 'seriation'
1732015984402:## The following object is masked from 'package:lattice':
1732015984402:##
1732015984402:##     panel.lines
1732015984402:ggpimage(iris_matrix, prop = FALSE)
1732015984492:iris_scaled <- scale(iris_matrix)
1732015984492:ggpimage(iris_scaled, prop = FALSE)
1732015984556:ggpimage(iris_scaled, order = seriate(iris_scaled), prop = FALSE)
1732015985017:# Correlation Matrix
1732015985017:cm1 <- iris |>
1732015985017:select(-Species) |>
1732015985017:as.matrix() |>
1732015985017:cor()
1732015985018:cm1
1732015985018:##              Sepal.Length Sepal.Width Petal.Length
1732015985018:## Sepal.Length       1.0000     -0.1176       0.8718
1732015985018:## Sepal.Width       -0.1176      1.0000      -0.4284
1732015985018:## Petal.Length       0.8718     -0.4284       1.0000
1732015985018:## Petal.Width        0.8179     -0.3661       0.9629
1732015985018:##              Petal.Width
1732015985018:## Sepal.Length      0.8179
1732015985018:## Sepal.Width      -0.3661
1732015985018:## Petal.Length      0.9629
1732015985018:## Petal.Width       1.0000
1732015985018:library(ggcorrplot)
1732015985018:ggcorrplot(cm1)
1732015985085:gghmap(cm1, prop = TRUE)
1732015985861:cm2 <- iris |>
1732015985861:select(-Species) |>
1732015985861:as.matrix() |>
1732015985861:t() |>
1732015985861:cor()
1732015985862:ggcorrplot(cm2)
1732015986029:# Parallel Coordinates Plot
1732015986029:library(GGally)
1732015986029:ggparcoord(iris, columns = 1:4, groupColumn = 5)
1732015986151:o <- seriate(as.dist(1-cor(iris[,1:4])), method = "BBURCG")
1732015986412:get_order(o)
1732015986413:## Petal.Length  Petal.Width Sepal.Length  Sepal.Width
1732015986413:##            3            4            1            2
1732015986413:ggparcoord(iris,
1732015986413:columns = as.integer(get_order(o)),
1732015986413:groupColumn = 5)
1732015986515:# Star Plot
1732015986515:flowers_5 <- iris[c(1:5, 51:55, 101:105), ]
1732015986515:flowers_5
1732015986527:## # A tibble: 15 × 5
1732015986527:##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1732015986527:##           <dbl>       <dbl>        <dbl>       <dbl> <fct>
1732015986527:##  1          5.1         3.5          1.4         0.2 setosa
1732015986527:##  2          4.9         3            1.4         0.2 setosa
1732015986527:##  3          4.7         3.2          1.3         0.2 setosa
1732015986527:##  4          4.6         3.1          1.5         0.2 setosa
1732015986527:##  5          5           3.6          1.4         0.2 setosa
1732015986527:##  6          7           3.2          4.7         1.4 versic…
1732015986527:##  7          6.4         3.2          4.5         1.5 versic…
1732015986527:##  8          6.9         3.1          4.9         1.5 versic…
1732015986527:##  9          5.5         2.3          4           1.3 versic…
1732015986527:## 10          6.5         2.8          4.6         1.5 versic…
1732015986527:## 11          6.3         3.3          6           2.5 virgin…
1732015986527:## 12          5.8         2.7          5.1         1.9 virgin…
1732015986527:## 13          7.1         3            5.9         2.1 virgin…
1732015986527:## 14          6.3         2.9          5.6         1.8 virgin…
1732015986527:## 15          6.5         3            5.8         2.2 virgin…
1732015986527:stars(flowers_5[, 1:4], ncol = 5)
1732325225087:# Load necessary libraries
1732325225088:# Install these if not already installed
1732325225088:if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
1732325225273:library(dplyr)
1732325225273:# Load the data
1732325225273:data <- read.csv("RISKFACTORSANDACCESSTOCARE1.csv")
1732325229775:setwd("~/Downloads/IM_2/capstone/data cleansed")
1732325232467:# Load necessary libraries
1732325232467:# Install these if not already installed
1732325232467:if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
1732325232467:library(dplyr)
1732325232467:# Load the data
1732325232467:data <- read.csv("RISKFACTORSANDACCESSTOCARE1.csv")
1732325236184:View(data)
1732325253636:View(data)
1732325353037:# Load necessary libraries
1732325353037:if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
1732325354098:library(dplyr)
1732325355479:# Load the data
1732325355480:data <- read.csv("RISKFACTORSANDACCESSTOCARE1.csv")
1732325357295:# Define the columns to check for -1111.1
1732325357295:columns_to_check <- c("No_Exercise", "Few_Fruit_Veg", "Obesity",
1732325357295:"High_Blood_Pres", "Smoker", "Diabetes")
1732325359294:# Filter out rows where any of the specified columns have the value -1111.1
1732325359294:filtered_data <- data %>%
1732325359294:filter(across(all_of(columns_to_check), ~ . != -1111.1))
1732325363800:# Display the cleaned dataset
1732325363800:print(filtered_data)
1732325371309:# Save the cleaned dataset to a new file
1732325371310:write.csv(filtered_data, "Filtered_RISKFACTORSANDACCESSTOCARE1.csv", row.names = FALSE)
1732325374546:cat("Filtered dataset saved as 'Filtered_RISKFACTORSANDACCESSTOCARE1.csv'")
1732325410148:data <- read.csv("Filtered_RISKFACTORSANDACCESSTOCARE1.csv")
1732325412849:View(filtered_data)
1732325432517:data <- read.csv("Filtered_RISKFACTORSANDACCESSTOCARE1.csv")
1732325434481:View(data)
